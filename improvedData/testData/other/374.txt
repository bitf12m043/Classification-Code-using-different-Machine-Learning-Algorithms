Date Tue Dec GMT Server NCSA Content type text html Last modified Fri Jun GMT Content length Practical Data SheetW Derrick Weathersby Practical Data Sheet have many years software development experience platforms ranging from IBM mainframe computers running MVS TSO CMS RISC workstations and Personal Computers hosting Unix AIX Ultrix OSF Linux BSDI DOS and Windows Additionally developed significant WEB applications including online transaction management system distributed document server and more Take look resume postscript form Here are list signifcant projects amassed experiences over the last decade Shared server project led team developers building distributed user interface control the sharing applications The project centered around shared server developed under AIX IBM boxes The server enabled multiple clients share the interface arbitrary applications with out being written The user interface was also distributed shared application since had reflect the changing state the server and the entire system shared session whole The interesting challenges were asynchronously changing the state all clients session allowing clients synchronously change the state the session cloning the user interface for late arriving client and defining the interface intuitively display the session state and the other participating clients Useful skills Languages The entire project was designed Xwindows Intrinsics Motif AIX internals signals sockets UDP and TCP network programming Misc Developed user interface prototype generator Data Parallel Array Langauge and Compiler This project was begun result the thesis work done Calvin Lin under the direction Professor Larry Snyder Larry has spent many his research cycles parallel computation and bringing the field the level sequential computation started defining realistic machine model for parallel computers that captured the salient features having influence the performance the machines His machine model called CTA Candidate Type Architecture Larry contended that order achieve peak performance parallel machines applications had written perform well the CTA Basically this said that the CTA general architecture that programmers can utilize when developing and estimating performance their applications Further the compiler writers could use the model generate better code Calvin demonstrated that applications following the CTA had better predictive qualities terms performance and fact would perform equivalently relative similar applications for any machine implementing the CTA Following the machine model the Orca language Orca was conceived help the programmers abstract the notions the CTA Calvin work was done hand translating code Orca Orca defined three levels abstraction assist the programmer and The level specified task parallelism the level encompassed data parallelism and the level defined the distribution data realize the parallelism ZPL stands for Programming Level and the name implies its purpose was fulfill the data parallel level abstraction ZPL was designed with two major goals Efficiency and Portability These goals often conflict but have been brought together matrimony given the design methodology the language Basically the language initially started out with features that could compiled effectively and the language idioms only included ones with the highest degree parallelism After all the language was being targeted for one level three level abstraction therefore there was pressure for completeness the level would offer this completeness since task parallelism much more general than data parallelism any event the language grew carefully with much deliberation with full features ZPL now fully functioning language and compiler Useful skills worked many the internals the compiler including interprocedural analysis aliases statically determining index sets ZPL allows index inherited through runtime region stack code generation and AST traversal and minipulation routines However research has focused the collective communication routines such broadcasts scans and reduces 