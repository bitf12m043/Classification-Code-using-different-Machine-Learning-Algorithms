Date Wed Jan GMT Server NCSA Content type text html Using the GNU Emacs Common Lisp InterfaceUsing the GNU Emacs Common Lisp InterfaceExecutive Summary This document designed help you get started using Lisp with emacs the MSCC accounts isn complete set what available you but rather designed get you started using minimal set useful functions Introduction For the first part the course you will programming Lisp Although historically there have been more versions this language than you would even want know about recent years there has been convergence one language definition CommonLisp and there even book Common Lisp The Language that considered the Bible Lisp now will using implementation called Allegro CommonLisp AllegroCL for short which one the more heavy duty industrial implementations out there Allegro sold Franz Incorporated Historical note the origin the name Franz was because the product was originally called Franz Lisp which people thought was pretty darned funny the time One the nice things about AllegroCL that comes with nice package for integrating the process writing and debugging code within single Emacs session The basic idea that you have one process buffer open which Lisp constantly running then one more editor buffers each one which shows file with some Lisp code The interface allows you things like point function definition editor buffer and send automatically the Lisp process get online entries from the CommonLisp manual find out where particular function defined and automatically pop editor window for and worth experimenting with this package bit really will make your life lot easier try show you some the cool features class too Getting started use this environment you must the following Create file called emacs your home directory doesn already exist and put the following line load emacs Create file called clinit your home directory and put the following line load clinit Now when you start emacs edit Lisp file the Lisp file must have extension lisp you will automatically put into Emacs mode called CommonLisp mode This mode will things like balance parentheses and indent your code automatically and will also allow you send function definitions directly the Lisp process For example typing emacs foo will open the file foo for editing special Common Lisp mode buffer that allows you things like skip forward and backward expressions look the definition symbol the online Common Lisp manual get list what functions call particular function and Important emacs commands know NOTE for the following commands means hitting the control key The following commands work regardless the mode your current Emacs buffer Type exit emacs you have not saved your file will ask you you want save Type save changes the current file Type save the current file new file you will prompted for file name Type switch another buffer that you had already worked with this session Type open another file Type split the emacs window into two panes Type back and forth between the window Type revert the display single window These commands are special buffers Common Lisp mode which the mode assigned any buffer open file with extension Type from your Lisp file the Lisp interpreter This will also start the Lisp interpreter not already running Type from the Lisp interpreter the Lisp file most recently edited Type send the currrent buffer the Lisp interpreter evaluated Type the same thing AND switch the Lisp buffer Type evaluate the current defun the Lisp interpreter Type compile the current defun the Lisp interpreter Type the beginning the current defun Type the end the current defun Type control followed period find out where function defined Type ESC clman get the Common Lisp manual entry for some symbol When you are the Lisp interpreter buffer recalls the previous expression typed Lisp and recalls the next expression you are earlier one Example Begin the session typing emacs foo Emacs will start Lisp session and display buffer for editing foo Now you can type start Lisp session and put you You can switch back and forth between the editing buffer and the inferior Lisp buffer using well Emacs will prompt you for several things when you first start Lisp session Buffer Host Process Directory Image name Image arguments Most the time you should just hit return take the default values all these questions back edit buffer Type the following code which simply counts the number items list defun foo cond null atom foo car foo cdr Passing this function definition Lisp either typing evaluate the entire buffer putting the cursor somewhere within foo function definiton and typing ESC evaluate single defun Either command will send the defun Lisp interpreter Now switch the Lisp process buffer with Test the function typing foo When you are done exit Lisp and Emacs typing exit and then For More Information More information about the interface appears CSE Lab Note Steve Hanks hanks washington edu 