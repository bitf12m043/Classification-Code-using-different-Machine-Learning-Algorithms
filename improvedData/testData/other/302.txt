Date Tue Dec GMT Server NCSA Content type text html Last modified Thu Oct GMT Content length Etch OverviewInstrumentation and Optimization WIN Intel Executables Etch application program performance evaluation and optimization system developed for Intel platforms running Windows Windows and Linux operating systems The system allows you annotate existing binaries with arbitrary instructions for example trace perform coverage analysis rewrite existing binary that executes more efficiently Etch works directly executables does not require program source code for either measurement optimization Some Results you like see some traces generated from few popular Windows programs click here Who uses Etch Etch targeted two different user groups developers who wish understand the performance their programs during the development cycle and users who wish understand and improve the performance common applications executing their environment Etch provides both groups with measurement tools evaluate performance several levels detail and optimization tools automatically restructure programs improve performance where possible How Etch Works Etch reads executable binaries and under Win DLLs for application modifies the image and writes new one that has been enhanced for measurement optimization The transformations performed the binary Etch not change program correctness although program transformed for performance measurement collection will run more slowly Etch does not require changes the operating system but modified Etch binary may utilize facilities such software timers even implementation specific facilities such Intel Pentium performance counters Using Etch There are three key concepts using Etch Instrumentation Instrumentation transforms binary according arbitrary criteria For example program may instrumented count instructions count the occurrence each instruction simulate cache tracking memory references Data collection Once instrumented executable can run that time instrumentation routines collect data about the program Data processing Once run any data generated instrumented executable can processed Trace based optimization typical data processing phase made possible Etch Instrumentation instrument program Etch invoked with the name executable and DLL The DLL provides set routines which are invoked for each instruction the executable Roughly Etch operates for each instruction executable InstrumentBefore instruction InstrumentAfter instruction end InstrumentBeforeMainProgram InstrumentAfterMainProgram The instrumentation tool provides implementations these Before and After functions The call back functions can turn direct Etch modify the executable with respect the specific instruction The directions effect say before after this instruction runs please call some specific function with some specific set arguments For example count instructions the InstrumentBefore procedure would direct Etch insert code that incremented counter runtime These inserted instructions not change the correctness the program Once the entire executable has been scanned and instrumented Etch writes new version the executable that can run Any functions referenced the callback routines well the Etch runtime library are included the new executable Data Collection The executable written Etch can run and any instrumentation routines will run side effect running the program Instrumentation routines the program running can inspect the state the program for example the contents registers effective addresses All addresses whether text data are relative the original binary the collection routines not have compensate for the fact that they are part modified executable Data Processing When Etched program terminates its data collection routines can save information about the executable disk Later post processing utilities can examine the data For example predicted execution time can determined after the fact based hypothetical processor cache and memory speeds lower level detailed information about program performance can obtained such shown below the graph instruction cache performance for collection popular Win programs The graph shows the miss penalty the first level instruction cache and second level unified cache for the Perl interpreter three commercial compilers and WORD Optimization Etch also provides facilities for rewriting executable order improve its performance For example the instrumentation phase rather than adding new instructions can direct Etch write the executable out according different code layout optimized for cache and behavior The impact optimization The graph below shows the reduction instruction cache misses and execution time cycles for collection popular Win programs that have been optimized for code layout using Etch Mhz Pentium Etch was first used discover the programs locality while executing against training set and then rewritten order achieve tighter cache and packing Infrequently executed basic blocks were moved out line and frequently interacting basic blocks were laid out contiguously the executable The results were measured using inputs different than those used during training The User Interface addition programming interface Etch also offers graphical user interface for performing common instrumentation and optimization operations The user interface can drive the measurement process runs Etch the original binary produce new binary modified collect the necessary behavioral data executes the modified binary produce the data and feeds the data analysis tools that produce graphs charts that help pinpoint problems Once problem has been identified the user may instruct Etch perform performance optimization transformation For example Etch may rewrite the original binary change the layout data code order improve cache virtual memory performance Sample dialog box from the user interfaceSample results showing distribution instruction opcodes Requirements Etch runs Intel Pentium and processors with least memory Etch works bit Win binaries has been used for programs built MSVC Borland and Intel compilers Availability you are interested obtaining more information about Etch please contact etch info washington eduProject Members Etch due the efforts people Harvard University and the University Washington These include Dennis Lee Ted Romer Geoff Voelker Alec Wolman Wayne Wong Brad Chen Brian Bershad and Hank Levy 