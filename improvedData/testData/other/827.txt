Date Tue Dec GMT Server NCSA Content type text html Cecil paper Whole Program Optimization Object Oriented Languages Whole Program Optimization Object Oriented Languages Craig Chambers Jeffrey Dean and David Grove describe Vortex optimizing compiler intended produce high quality code for programs written heavily object oriented style achieve this end Vortex includes number intra and interprocedural static analyses that can exploit knowledge about the whole program being compiled including intraprocedural class analysis class hierarchy analysis and exhaustive class testing and profile guided optimizations such receiver class prediction and selective specialization make whole program optimization practical Vortex automatically tracks cross file optimization dependencies fine granularity triggering selective recompilation affected compiled files whenever the source program changes Empirical measurements five purely object oriented benchmark programs written Cecil ranging size from several hundred lines source code indicate that these optimization techniques improve performance large programs more than factor three over system with only intraprocedural static optimizations Vortex written Cecil and has been used its own compiler and optimizer during its development for the past two years Vortex optimizations and implementation techniques should useful for any language program where optimizations reduce the cost polymorphism are important including object oriented languages are currently adding front ends for Modula and Java Vortex study its effectiveness these other language styles and other high level symbolic functional and logic languages Note This document pages long University Washington Department Computer Science and Engineering Technical Report CSE get the PostScript file click here Return Cecil Vortex papers page 