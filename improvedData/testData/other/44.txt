Date Wed Jan GMT Server NCSA Content type text html Smalltalk quiz sample solution For many these questions there were number reasonable solutions tried pick ones that are clean somewhat efficient but not overly tricky haven actually typed this code and tried run apologize advance for any typos max aNumber self aNumber ifTrue self ifFalse aNumber isBigger aCollection self size aCollection size isNumeric self elem elem isNumber ifFalse false true numOccurances anObject counter counter self elem elem anObject ifTrue counter counter counter sumSquares aCollection sum sum self isNumeric ifFalse self error Non numeric collection self elem sum sum elem elem sum was looking for discussion that clearly articulated these two main points There only one copy the class variable which shared all instances the class Each instance the class gets its own private copy the instance variable This distinction between shared and non shared variables was the big idea secondary idea was that class variables are accessible may read written from both class and instance methods while instance variables can only accessed from instance methods and thus have more limited visibility Account instance methods serviceAccount self subclassResponsibility CheckingAccount instance methods serviceAccount self assessServiceCharge SavingsAccount instance methods serviceAccount self payInterest Collection instance methods serviceAccounts self acct acct serviceAccount showDifference Returns instance variables class variable SomeClass new SomeClass new access access implement add used approach based double dispatching which how this kind thing usually actually done the Smalltalk standard library There were number other solutions that were perfectly fine based sending isNumber isInteger isComplex message the argument add Class defintion Number subclass ComplexNumber instanceVariableName real imaginary classVariableName category Magnitude Numbers Complex Number Class Methods new self real imaginary real aNumber imaginary anotherNumber super new real aNumber imaginary anotherNumber Complex Number Instance Methods real aNumber imaginary anotherNumber real aNumber imaginary anotherNumber self real real imaginary imaginary add aNumber aNumber addWithComplex self addWithComplex aComplexNumber The first version the add method looked like this self real aComplexNumber real self imaginary aComplexNumber imaginary self class real imaginary multiply aComplexNumber was really doing this double dispatching again self real aComplexNumber real self imaginary aComplexNumber imaginary self real aComplexNumber imaginary self imaginary aComplexNumber real self class real imaginary Number Instance Methods addWithComplex aComplexNumber ComplexNumber real self imaginary add aComplexNumber cse webmaster washington edu 