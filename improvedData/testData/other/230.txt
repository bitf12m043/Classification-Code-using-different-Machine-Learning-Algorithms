Date Mon Dec GMT Server NCSA Content type text html CSE Homework Assignment CSE Principles Digital Systems Design Carl Ebeling Fall Homework Distributed Wednesday Nov Due Friday Nov classYou are work together teams this homework Please look the problems individually first and sketch possible solutions and questions Then meet together and formulate solutions each you can and assign the writeup one more team members Then meet again collate and review your solutions before you hand them The whole team responsible for understanding the solution all problems For problems involving Verilog code hand your code and your simulation log least part really long Design two modules one run length encoding input stream bytes and another the corresponding run length decoding plugging your two modules back back you should reconstruct the original byte stream You must design your own protocol for this there are optimizations you can try based the image compression context One the things you must worry about the fact that the compressed stream not the same length the original stream Although generally shorter might longer depending your run length coding Your circuits must handle any possibility course Design your circuits using Verilog and use the simulator show that works Design circuit that performs one level wavelet transform image The image and the resulting transform are stored two different memory modules You should store the sub images you produce four images the output image The memories you should use are simple static RAMs with bit address bit data input for writes bit data output for reads and single control signal which asserted high when reading and asserted low for writing You should write Verilog model for this memory Note that has clock input asserted read then the data output should what the address selects the address changes does the data out unasserted write then nothing happens until changes high again which time the data the input written into the memory this problem you will design and test simple cache controller using Verilog simulation This cache direct mapped read allocate write through cache The controller sits between the processor and the cache memory and generates the control signals needed the processor and the memory The cache controller has the following signals Inputs Read Processor asserts request read Write Processor asserts request write Only one Read Write can asserted once Address Processor provides the memory address word being read written Hit The cache tag memory asserts Hit the memory address the cache Reset Resets the cache controller into initial state Outputs Ready Signal the processor indicating data present and processor can continue MemRead Asserted tell memory perform read operationMemWrite Asserted tell memory perform write operation Only one MemRead and MemWrite can asserted time MemAddress Address main memory word being read written Addresses are word addresses with words per cache line each cycle the processor asserts read write request neither the cache controller along with the memory address word then waits for the Ready signal asserted cache tag module checks see the address the cache asserts Hit the next cycle after the Read Write request asserted You not have design the cache tag module assume there and the Hit signal asserted appropriately Different things happen depending whether Read Write has been asserted Read Hit asserted then Ready should asserted immediately same clock cycle Hit Hit not asserted the controller must read the cache line from memory starting with the requested word From the time MemRead asserted takes cycles before the first word from memory available After that takes only one cycle per word read from the same cache line That the controller issues MemRead with the address the first word accessed waits cycles and then issues more reads one per cycle with the addresses the remaining words the cache line The controller can assert the Ready signal soon the data from the requested address available Write Writes are easier since cache lines are not allocated write miss Whether not Hit asserted the controller issues write memory for one word Ready can asserted immediately however without waiting for the write complete which takes cycles Read Write Overlap Reads and writes that memory cannot overlap That there are two read misses row the second set reads memory must wait until the previous reads have completed This can happen because the controller asserts Ready before completing all the reads from the first miss read miss write followed read hit however Ready can asserted right away since memory access required Write Verilog description for this cache controller and use Verilog test your design will provide driver for your design couple days ebeling washington edu 