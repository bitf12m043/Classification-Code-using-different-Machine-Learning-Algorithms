Date Mon Dec GMT Server NCSA Content type text html Sample write Autumn Quarter Below sample project write written for wavelet based image compression program project previous offering Your write should use similar outline AbstractAn introduction the project what does why useful etc ImplementationHow your group implemented the project You should discuss the basics the algorithms and how they were implemented Personal implementationDiscuss what you contributed the project including the required parts and any bells and whistles that you worked ResultsHow well does your program work Does produce interesting results What might you change add given more time Project Wavelet Brad West Group Oct Abstract Wavelets originally developed mathematical concept and method for signal processing are quickly becoming standard tool computer graphics The wavelet transform has many advantages allows the storage information multiple resolutions easy implement and very fast compute this project investigated the use wavelets for image compression Wavelets are natural tool for compression because they isolate the parts the image that contain lot detail With wavelets possible many cases display recognizable image using only five percent the original data addition the coefficients wavelet transformed image can ordered from most least significant allowing for progressive transmission bandwidth limited applications such when sending image over the Web Implementation Our group implemented wavelet compression program Indy using the libui user interface library The program allows user load rgb image and then compress that image with selectable degree compression using the wavelet transform chose use the Haar wavelet basis because very easy implement and fast compute represent signal the Haar basis the basic algorithm take two neighboring samples and average them Then place the two original samples you instead store their average and difference two dimensional image can treated the same way one dimensional signal concatenating the scan lines end end Performing this procedure recursively the computed averages transforms image down single overall average and array differences Though information saved the transform itself throwing out the smallest differences provides compressed representation compressed image then basically overall average few important details and lot zeroed out coefficients When saving the transformed image file perform run length encoding get concise representation Personal implementation Though our group worked together the basic wavelet transform algorithm personal responsibility was saving this transformed image file and consequently being able read that file back This turned out rather substantial task First turns out that although the basic wavelet transform theoretically results change the amount data there initially substantial increase the amount memory used This because image stored array three byte bit pixels but wavelet transform results array three float bit values Already have increased the amount memory required factor four actually reduce the total amount storage first quantized the floats into bit values Though this still almost twice the original amount storage required with this change the subsequent compression step which small coefficients are zeroed out then yields net reduction storage When writing the wavelet coefficients disk each value proceeded flag bit that encodes whether the value wavelet coefficient series zeros When the value represents series zeros the remaining bits encode how many zeros the series Results The biggest problem achieving high compression rate encoding the compressed image disk For example compressing mona rgb with loss quality allowed discard about the coefficients The resulting file however was still about the size the original Though have achieved fairly high compression would seem that should still able much better For future work would interesting investigate other methods tranforming the original two dimensional data into one dimensional signal For example instead simply reading the data from left right and top bottom might try reading serpentine order that goes first from left right and then from right left goes down the screen space filling curve order that winds through the image Such methods might produce larger strings zeros resulting more compression also wanted try using different amounts compression each color channel for example compressing more the blue channel which our eyes are less sensitive than the red 