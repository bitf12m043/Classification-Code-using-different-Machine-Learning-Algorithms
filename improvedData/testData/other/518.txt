Date Tue Dec GMT Server NCSA Content type text html Last modified Fri Jun GMT Content length Research Teaching Summary Research Summary Jeffrey Dean Over the past four years have pursued research programming language implementation programming language design and software engineering This research driven the belief that programmer productivity can significantly improved through the use high level programming languages These languages aid the rapid development robust software incorporating advanced language features such garbage collection flexible type systems closures inheritance and message passing However programmers have been reluctant adopt these languages because their implementations have imposed severe performance penalties combat this research has developed techniques that permit high level languages and particular object oriented languages implemented more efficiently enlarging the set problems which these languages can realistically applied Object oriented languages promote the development flexible software decoupling the clients abstractions from their implementations This decoupling happens through the use dynamic dispatches virtual function calls message sends Smalltalk which delay the selection the appropriate implementation behavior until run time However while implementation details are burden the programmer they are essential the compiler generate efficient code The absence implementation knowledge imposes both direct and indirect costs language implementation The direct cost simply due the overhead determining which implementation behavior should invoked run time Often much more significant however the indirect cost the lost opportunity apply traditional compiler optimizations such inlining due this lack implementation information These costs are exacerbated frequent use dynamic dispatching and the decomposition programs into many small routines The key then improving the performance object oriented programs enable the compiler discover the implementation details abstractions Some languages such allow programmers expose implementation information the compiler foregoing the flexibility dynamic dispatching some call sites The problem with this approach that programmers must decide priori where they want flexibility their program These decisions are not always obvious advance and performing these hand optimization decisions detracts programmers attention from the real task hand writing software better approach and the motivation for research obtain high performance without compromising the flexibility the programming model This can done applying compiler analyses and transformations discover the implementations that are invoked dynamic dispatches the compiler can prove that only single implementation can invoked from dynamic dispatch site then can converted direct procedure call which then amenable other optimizations such inlining Unfortunately the traditional separate compilation model hinders these analyses because the compiler must assume that implementations might exist other modules making impossible most cases know the complete set implementations that might invoked particular dynamic dispatch support more efficient implementations research has explored the use whole program analysis and optimization improve the information available the compiler This opens many opportunities for optimization the compiler For example because the complete inheritance hierarchy the program known the compiler can optimize away all dynamic dispatches for which only single implementation the behavior exists the program The remaining dynamic dispatches are places where programmers really might use the flexibility because multiple implementations particular behavior are defined the program attack these cases have explored selective specialization and profile guided optimization dynamic dispatches have developed algorithm that detects when beneficial compile multiple specialized versions single source routine each applicable different set inputs Often this technique has the effect moving dynamic dispatches from program hot spots less frequently executed portions the program final technique applies profile feedback from the program optimize the remaining dynamic dispatches for their common cases issue with these techniques that perform optimizations are based the current structure the program that they introduce complex dependencies from the generated code various aspects the program source code order practical for use interactive development environment the ability incremental compilation must preserved accomplish this have developed techniques for managing these intermodule dependencies and selectively invalidating only those pieces compiled code that must regenerated after programming change experimentally validate these ideas and ensure that remain focused practical techniques have designed and implemented Vortex optimizing compiler for object oriented languages Vortex relatively language independent currently compiling programs written Cecil and Modula and implements the optimization techniques developed part dissertation Since Vortex written entirely Cecil language with many the high level features that espouse also serves demonstration that such languages can practical given appropriate implementation techniques its performance has been sufficient put daily use interactive development environment The techniques have developed embodied their implementation Vortex have been remarkably successful the optimizations found Vortex improve the performance large Cecil programs factor four over optimizing baseline without these techniques and experiments are currently underway assess their effectiveness and Modula programs Despite the success these techniques many potential areas research remain the future envision three areas which will focus research efforts First will continue investigate implementation issues related object oriented languages Many avenues still remain unexplored this area One possibility develop techniques that rearrange the layout objects and cluster frequently used objects together order improve locality This sort transformation likely become more important program performance becomes increasingly dependent effective utilization the memory system Another interesting area exploring more powerful forms interprocedural analyses serious challenge here developing interprocedural algorithms that are both incremental and scale realistically sized programs Second would like explore the synergistic interaction between language design and language implementation The development new implementation techniques can make potential language features much less expensive spurring language designers explore new areas Similarly the introduction new language features can provide challenges language implementors For example starting with the viewpoint that the compiler will have access the entire program allows many compromises made existing language designs avoided explore these issues interested designing new systems programming language that includes features such closures multi methods and garbage collection yet has excellent performance and the mechanisms needed for low level control data representations Finally the gap between the source language and implementation language widens becomes more difficult for programmers identify and understand performance bottlenecks With lower level languages simple profiling tools coupled with understanding the implementation costs source language constructs were sufficient identify code that needed performance tuning With high level languages and implementations that perform sophisticated optimizations longer obvious which source constructs are expensive and which pieces code require tuning would like explore means providing more informative feedback the programmer more precisely identify performance bottlenecks All these directions have the common goal improving programmer productivity through the use high level languages making these languages faster more expressive and therefore applicable wider range problems Teaching Summary Jeffrey Dean One the primary reasons that have chosen academic career the ability have profound influence students educating them with the knowledge and skills that they need they can understand and solve the problems faced computer scientists today and beyond the process hope impart them the enthusiasm have for field graduate student the University Washington been teaching assistant both for the introductory undergraduate computer science courses three quarters and for the graduate courses compilers and programming languages one quarter each Furthermore the end first year graduate school was the instructor for the second course the introductory computer science sequence Data Abstraction Ada although the course has since converted using This provided with valuable experience developing course curriculum exams and projects and giving course lectures Through experience both and instructor have discovered that teaching challenging but also rewarding see students learn and prosper when given the proper stimulation feel that teaching skills would best utilized courses such compilers programming languages and software engineering philosophy that truly engage the students these types courses essential that they get hands experience building systems through course projects this level subtleties that have been glossed over the text and course lecture become apparent enhancing the student understanding Often these projects can group projects which also teach students effectively communicate their ideas essential skill regardless their career path also firm believer that involving advanced undergraduates research projects important part their education undergraduate own involvement research provided with valuable experience and was major factor decision graduate school graduate student have advised and worked closely with several undergraduates doing projects related research would hope continue this involvement undergraduate research faculty member have consistently received very good and excellent ratings teaching evaluations and these ratings have shown improvement every quarter that have taught Here are some excerpts from evaluations instructor Splendid absolutely splendid really enjoyed this course even though required lot work Jeff Dean was excellent instructor Your knowledge enthusiasm organization preparedness for lectures encouragement and the way you answered questions were especially good Jeez Every aspect the course was good Jeff very clear communicator Ideas about pointers linked lists etc are pretty hard grasp but Jeff gave very good explanations and examples Thorough and clear teaching very good teaching manner easy follow not threatening intimidating but not boring either well some excerpts from evaluations teaching assistant the dozens TAs with whom have interacted TAed well been TAed Jeff perhaps the best You frequently did better job explaining the material than the professor You are excellent the best have ever had Thank you Your patience and your desire for learn probably your greatest asset jdean washington edu 