Date Tue Dec GMT Server NCSA Content type text html Last modified Sat Sep GMT Content length Java Measurements Java Measurements This page contains set measurements Sun Java interpreter executing Pentium Pro running Windows had originally measured Java the platform because Java interpreter was yet available for the alpha platform For consistency the ASPLOS VII paper switched the alpha when Java port became available But since have the measurements would also like make them available those who are interested you are interested the tool that used help collect these measurements the take look the Etch home page The tables and figures below roughly correspond the tables and figures that appeared the final version the ASPLOS VII paper However since they are the tables and figures that were the submitted version the paper they are presented slightly different format from the final version The system which performed our measurements was MHz Pentium Pro workstation running Windows The microbenchmarks and the Java interpreter were compiled using Microsoft Visual Also note that even though the Java measurements were from system the measurements for the other interpreters are still from the alpha system Table Microbenchmark results This table shows the slowdown each microbenchmark relative the equivalent operation implemented Each microbenchmark ran for least five seconds per trial Each number presented the average runs Standard deviations were more than and were usually under Table This table shows baseline performance measurements the interpreters running set representative programs along with two benchmark programs written The Fetch Decode column shows the percentage native instructions due fetching and decoding virtual commands Native instructions per virtual command simply the total number instructions executed divided the number virtual commands includes fetch decode overhead well any other program overheads Figures and These two figures from the final paper were compiled from the data shown these six graphs Java native instruction count distributions for categories Java virtual commands Each category represents the total number native instructions executed while interpreting virtual commands that category during the execution phase Successive categories are cumulative with respect previous categories The percentage after each category name denotes the number times that virtual commands that category were executed percentage all virtual commands executed Figures and not have any corresponding results for Figure because don have Pentium Pro simulator with which perform the equivalent experiment Similarly did not perform any cache simulations Java executing the rocky washington edu 