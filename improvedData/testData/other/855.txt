Date Tue Dec GMT Server NCSA Content type text html Chinook Paper list Chinook Paper List and Abstracts Chinook Overview COB Pai Chou Ross Ortega Gaetano Borriello The Chinook Hardware Software Synthesis System International Symposium System Synthesis Cannes France September Also appears CSE Tech report Embedded systems are becoming more commonplace and are being designed larger numbers designers with ever tighter constraints design time Unfortunately computer aided design tools for embedded systems have not kept pace with these trends and are still fundamentally identical those used twenty years ago The Chinook synthesis system under development the University Washington addresses the automation the most time consuming and error prone tasks embedded controller design namely the synthesis interface hardware and software needed integrate system components the migration functions between processors and custom logic and the simulation system specifications before during and after synthesis this paper describe the principal elements the Chinook system and discuss its application variety embedded designs BCO Gaetano Borriello Pai Chou Ross Ortega Embedded System Design Towards Portability and Rapid Integration Hardware Software Design Sami and Micheli EDs Kluwer Aacademic Publishers With the ever increasing performance and capacity microprocessors and programmable logic devices more and more digital systems are being designed embedded systems Designing these systems requires the skills both software and hardware engineers But frequently due the interface between these two groups design options are not fully explored Unfortunately embedded system design tools support this separation design responsibilities and design data thereby further exacerbating the problem Some the principal issues the design process that require attention are the proper evaluation design tradeoffs the portability design specifications the integration system components and rapid prototyping the resulting design this chapter discuss approach these issues that believe will lead new generation embedded system design tools that will permit designers more fully explore the design space and attain higher confidence the appropriateness their designs One the first steps this direction embodied the Chinook synthesis system under development the University Washington addresses the automation the most time consuming and error prone tasks embedded controller design namely the synthesis the interface hardware and software needed integrate system components the migration functions between processors and custom logic and the simulation system specifications before and after synthesis Although others exemplified many the contributions this volume have looked virtually all these issues Chinook approach different its focus design space exploration that will hopefully mature into embedded system designer assistant Interface Synthesis COB Pai Chou Ross Ortega Gaetano Borriello Interface Synthesis Techniques for Embedded Systems Proceedings the IEEE ACM International Conference Computer Aided Design San Jose November key aspect the synthesis embedded systems the automatic integration system components This entails the derivation both the hardware and software interfaces that will bind these elements together and permit them communicate correctly and efficiently Without the automatic synthesis these interfaces designers are not able fully simulate and evaluate their systems Frequently they are discouraged from exploring the design space different hardware software partitions because practical concerns mandate minimizing changes late the design cycle thus leading more costly implementations than necessary This paper presents set techniques that form the basis comprehensive solution the synthesis hardware software interfaces Software drivers and glue logic are generated connect processors peripheral devices hardware processors communication interfaces while meeting bandwidth and performance requirements use examples set devices that communicate over infrared local communications network highlighting video wrist watch display explain our techniques and the need for design space exploration tools for embedded systems COB Pai Chou Ross Ortega Gaetano Borriello Synthesis the Hardware Software Interface Microcontroller Based Systems Proceedings the IEEE ACM International Conference Computer Aided Design Santa Clara November Microcontroller based systems require the design hardware software interface that enables software running the microcontroller control external devices This interface consists the sequential logic that physically connects the devices the microcontroller and the software drivers that allow code access the device functions This paper presents method for automatically synthesizing this hardware software interface using recursive algorithm Practical examples are used demonstrate the utility the method and results indicate that the synthesized circuit and driver code are comparable that generated human designers This new tool will used higher level synthesis tools evaluate partitionings system between hardware and software components Walkup Borriello Interface Timing Verification with Application Synthesis Design Automation Conference Proceedings June fundamental timing analysis problem the verification and synthesis interface logic circuitry the determination allowable time separations skews between interface events given timing constraints and circuit propagation delays These skews are used verify timing properties and determine allowable propagation delays for logic synthesis This paper presents algorithm that provides tighter skew bounds with better asymptotic running time than previous methods and shows how apply the method synthesis tasks Walkup and Borriello Automatic Synthesis Device Drivers for Hardware Software design University Washington Department Computer Science Technical Report Automatically synthesizing device drivers the hardware and software needed interface device processor important element hardware software design Driver software consists the sequences instructions needed for the processor control its interactions with the device Driver hardware consists the digital logic necessary physically connect the devices and generate signal events while meeting timing constraints describe approach that begins with device specifications the form timing and state diagrams and determines which signals can controlled directly from software and which require indirect control through intervening hardware Minimizing this hardware requires solving simultaneous scheduling and partitioning problem whose goal limit the number wires whose events are not directly generated the processor software show that even the simplest version this problem hard and discuss heuristic solution that should work well practical situations Scheduling CWB Pai Chou Elizabeth Walkup Gaetano Borriello Scheduling Issues the Synthesis Reactive Real Time Systems IEEE Micro August Also appeared Technical Report Dept Computer Science and Engineering University Washington Seattle Many embedded control applications must respect intricate timing requirements their interactions with the external environment These constraints are derived from response time rate execution and low level signaling requirements Currently most these systems are being designed hoc manner Many tools assume the designer has already finalized the scheduling while most schedulers make simplifying assumptions and often cannot handle general timing constraints this paper discuss the scheduling issues that must addressed synthesis tools for embedded systems and outline possible approaches the problems Our perspective based experience with Chinook hardware software synthesis system for reactive real time systems currently under development the University Washington Chinook initially targeting embedded applications without operating system support From high level specification and device library Chinook synthesizes both interface hardware and software program realize the design Pai Chou Gaetano Borriello Interval Scheduling Fine Grained Code Scheduling for Embedded Systems DAC June central problem embedded system synthesis the generation software for low level Scheduling still remains manual task because existing coarse grained real time scheduling algorithms are not applicable they assume fixed delays even though the run times are often variable and they incur too much overhead solve this problem present new static ordering technique called interval scheduling for meeting general timing constraints fine grained variable delay operations without using run time executive Pai Chou Gaetano Borriello Software Scheduling the Synthesis Reactive Real Time Systems Proceedings the Design Automation Conference San Diego June Existing software scheduling techniques limit the functions that can implemented software those with restricted class timing constraints particular those with coarse grained uniform periodic behavior practice however many systems change their behavior response the inputs from the environment This paper considers one such class systems called reactive real time systems where timing requirements can include sequencing rate and response time constraints present static non preemptive fine grained software scheduling algorithm meet these constraints This algorithm suitable for control dominated embedded systems with hard real time constraints and part the core hardware software synthesis system last updated Mon Nov PST 