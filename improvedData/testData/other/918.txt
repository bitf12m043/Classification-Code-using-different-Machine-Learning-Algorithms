Date Tue Dec GMT Server NCSA Content type text html ZPL Program Walk Through ZPL Program Walk Through Though ZPL new powerful array language users other languages such Fortran Pascal etc find quite intuitive after brief introduction Therefore looking sample program perhaps the fastest introduction ZPL The accompanying ZPL program solves the Jacobi computation Jacobi Given array iteratively replace its elements with the average their four nearest neighbors until the largest change between two consecutive iterations less than delta For this example will two dimensional array and the program will generate its own data initialized except for its southern boundary which set the constant all positions The tolerance delta will Jacobi program jacobi config var integer Declarations delta float region direction north south east west procedure jacobi Entry point var Temp float err float begin Initialization north east west south repeat Main body Temp north east west south err max abs Temp Temp until err Figure ZPL program for the Jacobi computation quick skim the Jacobi program shows that organized pretty much like other programs Declarations Lines Starting point for the executable part the computation Line Initialization the array Lines Iteration loop compute the result Lines Result output Line The quick look also reveals that assignment written rather than Fortran and that every statement terminated semicolon Comments starting with extend the end the line while and are comment brackets The main thing that unconventional about ZPL that computes with whole arrays rather than individual array elements Thus Line sets the entire array zero indexing looping The specifies the region assigned which this case all Compare with similar computations expressed other languages that must manipulate individual elements Fortran Pascal for Even Fortran another array language more cumbersome because its required range specification FORTRAN Concepts like regions explained momentarily simplify ZPL because the programmer can think more abstractly and leave the low level details like indexing and looping the language shown below performance lost have this convenience The Jacobi program explained the following might convenient clone your window keep copy the program visible more thorough introduction ZPL can found the ZPL Programmer Guide Regions and Declarations fundamental concept ZPL the notion region region simply set indices For example Line region specifies the standard indices array the set ordered pairs Regions can used declare arrays which means the array defined for those indices Thus Line var Temp float declares two array variables and Temp composed floating point numbers called real some languages with indices given region The final variable declaration Line err float does not mention region and err declared simple scalar variable The program next declares set four directions Directions are used transform regions the expression north Line They are vectors with many elements the region has dimensions The four direction declarations Lines direction north south east west point unit distance the four cardinal compass directions The figures below illustrate transformations region using these directions Initializations Regions also allow ZPL computations extended operate entire arrays without explicit looping prefixing statement with region specifier which simply the region name brackets the operations the statement are applied all elements the array Thus Line assigns all elements array with indices Since many scientific problems have boundary conditions the region specifier can used augment arrays with boundaries Extending the array with boundaries and initializing their values the role the next four lines Lines north east west south The region specifier defines the index set region adjacent the direction the statement then applied the elements the region Thus north defines the index set which row for and the assignment initializes these elements The successive effects these initialization statements are illustrated Figure Figure Definition and initialization boundaries for Program Body With the declarations and initialization completed programming the Jacobi computation simple The repeat loop which iterates until the condition becomes true has three statements Compute new approximation averaging all elements Line Determine the largest amount change between this and the new iteration Line Update with the new iteration Line All statements are executed the context the region since the repeat statement prefixed the region specifier The statements operate follows Averaging The averaging illustrates how explicit array indexing avoided ZPL referring adjacent array elements using the operator The statement Line Temp north east west south finds for each element the average its four nearest neighbors and assigns the result Temp expression executed the context region results array the same size and shape composed elements offset the direction illustrated Figure can thought adding each index equivalently this case shifting Figure references and its boundaries executed the context region specifier covering all the dots shown correspond element the shifted arrays The four arrays are combined elementwise yielding the effect computing for element the sum its four nearest neighbors This can seen the following identities north north east east west west south south The elements are then each divided and the result stored into Temp Maximum Finding compute the largest change any element between the current and the next iteration Line more elementwise array operations are performed The bold subexpression err max abs Temp causes the elements Temp subtracted from the corresponding elements and then the absolute value each element found abs Temp abs Temp abs Temp This computes the magnitude change all the elements find the largest among these maximum reduction max performed This operation reduces the entire array its largest element This maximum then assigned err scalar variable that controls the loop Update The final statement the loop Line Temp simply installs Temp the current value Performance Although the ZPL program written high level that relieves the programmer many tedious details was not necessary give performance for this convenience The Jacobi program has been hand coded and customized two representative parallel computers the Intel Paragon and the Kendall Square Research KSR The results shown the accompanying graph demonstrate that for this problem least ZPL was just efficient low level programming solution Figure Speedup the Jacobi program for iterations the Kendall Square Research KSR the Intel Paragon and program handcoded for each machine ZPL programs perform well because the higher level array concepts are easier for compiler analyze and understand This means that the ZPL compiler frequently successful finding opportunities optimize the program Summary The Jacobi program illustrates fundamental properties ZPL Computations are performed whole arrays avoiding error prone indexing and tedious looping Global operations like finding the maximum element array are provided language primitives general ZPL high level array concepts simply the programmer task and allow the compiler produce very efficient code ZPL therefore ideal for array based scientific and engineering computations that require high performance ZPL CSE zpl info washington edu 