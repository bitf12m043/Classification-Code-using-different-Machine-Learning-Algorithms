Date Mon Dec GMT Server NCSA Content type text html CSE libui documentation Autumn Quarter libui The Interface LibraryOverviewReferenceData Types and ConstantsMacrosRoutinesInitialization routinesWindow routinesControl routinesImage routinesDrawing RoutinesMiscellaneous routinesGlossaryIndex This documentation still needs work you find anything confusing incomplete please let know Any comments may you have will greatly facilitate revision Overview The user interface library you will using designed powerful and simple use provides you with buttons toggle buttons sliders rectangular drawing areas file dialogs and text feedback area The main things that the libui library provides you with are main application window The application will have main window which will hold all the controls the text area drawing areas etc This window created when the application calls uiInitWindow Buttons You can add buttons the control area the upper right part the main window which take some action when pressed Buttons are created and their actions specified calling uiAddButton Toggle Buttons You can add toggle buttons the control area the main window which can set either True False the user Toggle buttons are created calling uiAddToggleButton The current state True False toggle button can queried calling uiGetToggleButtonState Sliders Sliders can added the control area allow the user control continuous parameter Sliders are created with call uiAddSlider The current value the slider can retrieved using uiGetSliderValue You can set the value the slider using uiSetSliderValue Menus Menus can added control area allow the user select the desired option Menus are created with call uiMakeMenu Menu item can added using uiAddMenuItem Drawing areas These are rectangular areas within the main application window that can rendered into using OpenGL These are created calling uiAddWindow Text area There optional area the bottom the main window that used display text and allow the user input text The text displayed can set using uiSetText and can examined with uiGetText File selection dialogs Applications can present file selection dialog boxes let the user specify file The dialog box presented calling uiPostFileDialog This call returns immediately after the dialog put the application notified that the button has been pressed having callback procedure invoked Event handling Applications respond user and systems actions such buttons being pressed and windows becoming visible through event callbacks These are routines that are called the system response these types events Callbacks are usually specified when interface element created There also function call uiBusyCursor prevent all user interactions until the program finishes executing certain process ReferenceData types and ConstantsuiBoolBoolean type typedef enum uiFalse uiTrue uiBool uiColorRGBRGB color type typedef struct float float float uiColorRGB uiDrawingPlaneThe different planes draw into Specified when calling uiSetCurrentWindow typedef enum uiNormal uiOverlayPlane uiDrawingPlane uiNormalThe normal drawing plane This full color drawing plane where colors are specified using the glColor calls Most drawing will take place this plane uiOverlayPlaneThe overlay plane This drawing plane that sits top the normal plane which can used draw top things without disturbing them This plane indexed color plane colors are specified using glIndex Index transparent uiAppOptionsOptions for the uiInitWindows call The options parameter this call should the logical the desired options uiNone for none them typedef enum uiHasNone uiHasControls uiHasText uiHasDouble uiAppOptions uiHasNonenone the following uiHasControlsThe control area the upper right the main window present uiHasTextThe text area the bottom the main window present uiHasDoubleDouble buffering enabled for the application uiIndexedColorModeMain windows use indexed color Examples uiInitWindows NULL uiHasControls uiInitWindows NULL uiHasControls uiHasText uiMouseActionEnumerated type indicating what kind mouse action has taken place typedef enum uiLeftMouseDown uiLeftMouseUp uiLeftMouseDrag uiLeftMouseClick uiRightMouseDown uiRightMouseUp uiRightMouseDrag uiRightMouseClick uiMouseAction uiLeftMouseDown uiRightMouseDown The left right mouse button was pressed uiLeftMouseUp uiRightMouseUp The left right mouse button was released uiLeftMouseDrag uiRightMouseDrag The mouse was moved while button was held down drag action will always preceeded corresponding uiMouseDown action uiLeftMouseClick uiRightMouseClick The mouse button has been briefly pressed and released without motion between When uiMouseClick action reported the corresponding uiMouseDown and uiMouseUp actions are not reported uiWindowOpaque type returned from uiAddWindow uiSliderSlider type returned from uiAddSlider uiToggleButtonToggle button type returned from uiToggleButton Callback typestypedef void uiExposeCallback uiWindow window Exposure callback routine Called response window being exposed window the window which has been exposed The application can force the exposure routine called calling uiDirtyWindow typedef int uiIdleCallback void Idle procedure Called periodically when the system has nothing better idle procedure added the work queue with uiSetIdleCallback and removed depending upon the return value your idle procedure TRUE The idle procedure through with its task and should removed from the work queue put back the queue you need call uiSetIdleCallback again FALSE The idle procedure not through with its task and will remain the event queue typedef int uiTimerCallback void Similar IdleCallback only also incorporates pause interval timer procedure added with uiSetTimerCallback where you define pause interval milliseconds Like idle procedure timer procedure added and removed depending its return value TRUE The timer procedure through remove this from the timer queue put back the queue you need call uiSetTimerCallback again FALSE The timer procedure not through with its task and will remain the event queue typedef void uiCallback void Button slider callback Called response the user pressing the button moving the slider with which associated See uiAddButton uiAddToggleButton and uiAddSlider typedef void uiMouseCallback uiWindow window int int uiMouseActionaction Mouse action callback called response mouse input window windowThe window which the mouse action took place yThe location the mouse action actionThe mouse action which caused the callback invoked Applications specify the mouse callback routine uiAddWindow typedef void uiFileBoxCallback char filename File selection dialog callback routine filenameThe name the file that was selected when the button was pressed uiMenuCallback Image Library typestypedef enum SCALAR VECTOR argType Color depth Image SCALARImage black and whiteVECTORImage colortypedef struct Real Vector Vector type For images used the red component used green and used blue typedef struct int width height argType type union Real scal image Vector vec image image int scale pixel values Real pixel scale factor Image Image type Routines are available for accessing all the fields this structure you shouldn have worry about them Macros The following macros are defined libui define MIN Fairly simple expands find the minimum two items define MAX MIN complement define CLAMP MAX MIN Clamps number specified between and loRoutinesInitialization routinesvoid uiSetControlWidth int width void uiSetControlHeight int height Sets the width and height the control area which buttons and sliders are placed The control area located the upper right corner the main application window void uiSetTextHeight int height Sets the height the text area the bottom the application window The text displayed this area can changed and examined calling uiSetText and uiGetText void uiSetMainWindowWidth int width void uiSetMainWindowHeight int height Sets the size the main application window This includes the control area and the text area the application make sure that this window big enough hold all the things wants place inside uiBool uiInitWindows unsigned int argc char argv uiAppOptions options Initializes the interface library and creates the main application window argc argvIf you wish you can pass the arguments from main uiInitWindows Normally you would just pass and NULL optionsSets what aspects the application windows will enabled You may elect have text region control region double buffer more See the definition uiAppOptions for complete list options select two more options pass their logical The application should call uiInitWindows initialize the Library This call should made after the sizes the parts the application have been set void uiMainLoop This function starts the applications main loop this loop libui will process user interaction and call the appropriate callbacks where defined This function never returns should the last statement your main function Window routinesuiWindow uiAddWindow int int int width int height uiExposeCallbackexpose uiMouseCallbackmouse void userData Adds drawing area inside the main window yThe location the upper left corner the new window relative the upper left corner the main application window Note the coordinate system used this call unfortunately considers the origin the upper left with increasing going the right and increasing going down This not the same coordinate system used OpenGL which considers the origin the lower left corner with increasing going width heightThe width and height the new window exposeA callback invoked when the window exposed callback invoked pass NULL for the the expose paramater mouseA callback invoked response mouse input for this window mouse callback invoked pass NULL for the mouse paramater userDataA pointer some private data you wish associate with this window private data necessary pass NULL for the userData paramater Drawing areas are rectangular regions which the application can drawing specify which window drawn into the application must call uiSetCurrentWindow void uiSetUserData uiWindow window void data Sets window private data point data void uiGetUserData uiWindow window Retrieves window private data void uiSetCurrentWindow uiWindow window uiDrawingPlane plane Sets the current drawing window windowThe window into which drawing should done planeThe drawing layer onto which drawing should done plane uiNormal drawing will take place the normal drawing window plane uiOverlayPlane drawing will take place the overlay plane Note that the normal drawing plane uiNormal full color RGB plane while the overlay plane uiOverlayPlane indexed plane void uiDirtyWindow uiWindow window Forces window expose callback invoked windowThe window whose expose callback invoked This call used signal window redisplay contents This can useful the application written such way that drawing done only mostly inside expose callbacks This helps concentrate the drawing code one area which turn helps locate drawing related bugs void uiGetWindowSize uiWindow window int width int height Returns the size window width and height Pass NULL either you don care about their values void uiMapCoordinates uiWindow src uiWindow dst int int Maps location from the coordinate space one window the coordinate space another This most often used when one window contained withing another srcThe source window which the coordinates are initially expressed dstThe destination window which the coordinates are translated yThe point window src translated After the routine returns they will set the transformed coordinates Control routinesvoid uiAddButton char label uiCallbackpushCallback Adds button control the control area labelThe text used label for the button pushCallbackThe callback procedure invoked when the button pushed Controls buttons sliders menus etc are added one below another starting the top the control area uiToggleButton uiAddToggleButton char label uiBool initialState uiCallbackvalueChangedCallback Adds toggle button the control area labelThe text used label for the button initialStateThe initial state for the toggle button valueChangedCallbackThe callback procedure invoked when the state the toggle button changes toggle button checkbox small button which can set either True False the user Toggle buttons like other controls are added one below another starting the top the control area uiBool uiGetToggleButtonState uiToggleButton button Returns the current state button void uiSetToggleButtonState uiToggleButton button uiBool state Sets the current state toggle button button state uiSlider uiAddSlider char label double value double min double max int decimals uiCallback valueChangedCallback Adds slider control the control area labelThe name for the slider valueThe initial value for the slider min maxThe minimum and maximum values that the slider can have decimalsNumber decimals use decimals etc valueChangedCallbackThe callback procedure invoked when the slider value changed Note that you can always get the value slider with uiGetSliderValue you only really need use the callback cases where you want take some immediate action response slider being changed Additionally the callback only occurs when the user has released the mouse not while the user dragging the slider Sliders like all other controls are added one below another starting the top the control area double uiGetSliderValue uiSlider slider Returns the current value slider void uiSetSliderValue uiSlider slider double Sets the value the slider void uiSetSliderParams uiSlider slider double min double max double current int decimal points Sets the various paramaters the slider sliderThe uiSlider that being modified minThe new minimum value for the slider The minimum value must less than both the current and the max values maxThe maximum value for the slider The maximum value must greater than both the current and the min values currentThe new current value that the slider will show The current value must between min and max inclusive decimal pointsThe number digits the right the decimal that will displayed and reported Valid ranges are any non negative integer See also uiGetSliderParams for obtaining the current parameter set for slider void uiGetSliderParams uiSlider slider double min double max double current int decimal points Get the various parameters for slider sliderThe uiSlider that being read minA pointer where the minimum value the slider should written maxA pointer where the maximum value the slider should written currentA pointer where the current value the slider should written decimal pointsA pointer where the current number significant digits right the decimal should stored See also uiSetSliderParams uiMenu uiMakeMenu char menuTitle This function creates the menu button When the user clicks this button pop menu will appear add items this popup menu call uiAddMenuItem passing the uiMenu type returned this function void uiAddMenuItem uiMenu menu char menuText uiMenuCallback callback int userData Add menu item the menu menu which was created with uiMakeMenu menuThe menu which this menu item appended menu the value returned uiMakeMenu menuTextThis the label associated with this menu item When the user clicks the menu button reveal the popup menu this text that the user will see callbackThe callback routine invoked when the user selects this menu item such callback routine used pass NULL for this argument userDataThis the optional user data associated with this menu item When the callback invoked response user activity this data passed the callback routine Although the userData only int can still useful Typically the the menu item being created used for userData that one callback routine can used for the entire menu All that the callback routine would have then process its argument userData switch case break block void uiSetText char text Sets the contents the text field the bottom the window textThe text displayed Pass NULL text displayed This function only has effect uiInitWindows was called with the uiHasText option char uiGetText void Returns pointer the string the text field the bottom the window This pointer points memory allocated just for your program you don call uiFreeText that memory won freed and you have memory leak void uiFreeText char Frees the memory allocated libui when uiGetText called Without this freeing call you will have memory leak Image routinesImage uiNewImage int width int height argType type Returns newly allocated image widthThe width new image heightThe height new image typeThe type image either SCALAR for grayscale image VECTOR for color image Note that this routine allocates the memory for the image you need call uiDeleteImage free this memory when you done with the image void uiDeleteImage Image Frees the memory that has been allocated for image Image uiOpenImage char filename int width int height Opens RGB file and reads into memory Returns pointer the new image filenameName RGB file opened widthDesired width new image the RGB image disk has different width the image will scaled heightDesired height new image the RGB image disk has different height the image will scaled the file cannot opened some other error occurs uiOpenImage returns NULL All images that are opened are created VECTOR images When you are done with this image sure call uiCloseImage properly free the memory associated with the image void uiSaveImage Image image char filename Save image disk RGB file imagePointer image saved This image can either VECTOR scalar filenameName file save image This name should end with rgb quotes does not rgb extention will added for you Pixel scaling disabled uiSaveImage you must call uiScalePixelValues reenable scaling desired void uiCloseImage Image Close the image that was opened with uiOpenImage int uiImageWidth Image int uiImageHeight Image Returns the width height image argType uiImageType Image Returns the type image either SCALAR for grayscale image VECTOR for color image void uiSetScalarValue Image int int Real val Sets the grayscale intensity pixel image imThe image modify iyThe coordinates the pixel whose color set valThe grayscale value the pixel This should normalized between and void uiSetVectorValue Image int int Vector val Sets the color pixel image imThe image modify iyThe coordinates the pixel whose color set valThe color the pixel This vector where the first component taken the red value the second component taken the green value and the the third component taken the blue value All values should normalized between and Real uiGetScalarValue Image int int Returns the gray value pixel imThe image iyThe coordinates the pixel Vector uiGetVectorValue Image int int Returns the color value pixel imThe image iyThe coordinates the pixel unsigned long uiGetPixelValue Image int int Returns the color value pixel packed representation that OpenGL familiar with imThe image iyThe coordinates the pixel The return value this function packed representation the pixel color That the bit unsigned long that returned looks like RRGGBBAA where the red component the upper bits the green the next blue next and alpha the lowest bits This value can used the argument glColor call unsigned long uiGetPixelData Image Returns array pixel values that the call glDrawPixels can understand imThe image get the pixel data from This just like calling uiGetPixelValue for each pixel the image void uiScalePixelValues Image uiBool val Specifies whether not scale the intensity values image when retreiving pixel data from using uiGetPixelValue uiGetPixelData imThe image valuiTrue you want enable pixel value scaling and uiFalse you want disable void uiSetScaleFactor Image Real val Sets the pixel scaling factor for image imThe image set the scaling factor valThe scale factor use when generating pixel values for this image This procedure sets constant scaling factor multiply the value each pixel with when querying pixel values Drawing Routinesvoid uiGetColorTableParams int start int size Only valid when using indexed color mode the main window Sets start the starting index the color table and size the size the table void uiSetColorTableEntry int which float red float green float blue Only valid when using indexed color mode the main window Sets one entry the color table whichindex set red green bluefloating point values for red green and blue channels void uiSetColorTable int start int length float data Only valid when using indexed color mode the main window Sets set entries the color table startstarting index the color table lengthnumber entries set dataarray data containing floating point values for red green and blue channels void uiSetColorIndex uiColorIndex index Set the current drawing color indexed color indexIndex color map assign current color void uiSetColorRGB uiColorRGB color Set the current drawing color the RGB color specified colorRGB Color assign current color int uiGetBlackPixel void Returns the color index that will produce black the overlay plane int uiGetWhitePixel void Returns the color index that will produce white the overlay plane void uiSetBackground void Sets the current drawing color the window background color void uiDrawLine int int int int Draws line between two points This must preceeded uiSetCurrentWindow call and must followed uiFlush call first point second point void uiSetDrawMode uiDrawMode mode Used specify the drawing mode This can only used when drawing with indexed colormodeMode drawingUI XOR specifies drawing XOR modeUI COPY specifies drawing standard draw mode void uiDrawImage Image int int Draws image given coordinatesimPointer image memory yCoordinates draw image void uiFlush Signal draw queued objects immediately The function Miscellaneous routinesvoid uiSetIdleCallback uiIdleCallback idleProc Defines idle procedure called periodically when the program has nothing better You may call uiSetIdleCallback anywhere your program just long uiInitWindows has already been called disable idle procedure the procedure should return TRUE this will remove the procedure from the work queue you need call uiSetIdleCallback again replace leave idle procedure the work queue the procedure should return FALSE Because idle procedures even empty ones consume large amounts system resources best leave them disabled until needed void uiSetTimerCallback uiTimerCallbacktimerProc unsigned long interval Like idle callback only called defined interval milliseconds Will continually called until the callback procedure returns TRUE when removed from the event queue replace you must call uiSetTimerCallback again void uiQuit Shuts down the interface library This function never returns uiQuit calls exit its last statement void uiPostFileDialog char title char filter uiFileBoxCallback okCallback Presents file selection dialog titleThe title the dialog box filterAn optional filter that filenames must satisfy order shown for example show files ending with okCallbackThe callback procedure invoked when the user presses the button the dialog This where the name the selected file made available callback invoked pass NULL for this argument When the application calls uiPostFileDialog file selection box presented The uiPostFileDialog call returns control the application immediately while the dialog box still and the application notified when the button has been pressed via the okCallback void uiBusyCursor int state int interruptable Sets the cursor the watch This useful user interface routine let the user know that the current operation could take some time stateDetermines whether the the cursor should changed the watch changed back change the watch use ENABLE BUSY CURSOR change back the default icon use DISABLE BUSY CURSOR When the cursor set the watch user interaction will allowed Additionally user interation will not queued interruptableThis variable currently not used Always set GlossaryCallback ProcedureA routine that called the interface library response some action the user presses button window becomes visible etc Idle ProcedureA routine that called periodically the interface library when there nothing else Overlay planeA drawing plane which lies above another drawing area and whose image drawn top the image beneath One color index typically specified transparent IndexCLAMPMAXMINuiAddMenuItemuiAddSlideruiAddToggleButtonuiAddWindowuiAppOptionsuiBooluiBusyCursoruiCallbackuiCloseImageuiDeleteImageuiDirtyWindowuiDrawingPlaneuiDrawImageuiDrawLineuiExposeCallbackuiFileBoxCallbackuiFlushuiFreeTextuiGetBlackPixeluiGetColorTableParamsuiGetPixelDatauiGetPixelValueuiGetSliderParamsuiGetScalarValueuiGetSliderValueuiGetTextuiGetToggleButtonStateuiGetUserDatauiGetVectorValueuiGetWhitePixeluiGetWindowSizeuiIdleCallbackuiImageTypeuiImageWidthuiInitWindowsuiMainLoopuiMakeMenuuiMapCoordinatesuiMouseActionuiMouseCallbackuiNewImageuiOpenImageuiPostFileDialoguiQuituiSaveImageuiScalePixelValuesuiSetBackgrounduiSetColorIndexuiSetColorRGBuiSetColorTableuiSetColorTableEntryuiSetControlHeightuiSetControlWidthuiSetCurrentWindowuiSetDrawModeuiSetIdleCallbackuiSetMainWindowHeightuiSetMainWindowWidthuiSetScalarValueuiSetScaleFactoruiSetSliderParamsuiSetSliderValue uiSetTextHeightuiSetTimerCallbackuiSetToggleButtonStateuiSetUserDatauiSetVectorValueuiSlideruiTimerCallbackuiToggleButtonuiWindow Back the Home Page mtwong washington edu last modified Mar 