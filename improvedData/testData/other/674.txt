Date Tue Dec GMT Server NCSA Content type text html Last modified Tue Nov GMT Content length Persistent Programming Languages The Best Both Worlds Next Contents Persistent Programming Languages The Best Both Worlds Rex Jakobovits Department Computer Science and Engineering University Washington Seattle Washington ROUGH DRAFTAbstract The integration databases and programming langauges being motivated from two directions The database community requires more flexible and powerful way modeling the world whereas the programming language community wants the convenience reliable efficient means enabling entities persist between program invocations Traditionally the query facilities provided database users are not computationally complete precluding arbitrarily complex processing data Furthermore they support only primitive data types making them inappropriate for modeling certain real world applications Processing must done off line host language but translation between the database and the language results impedence mismatch problem One solution extend existing programming language with the notion persistence enabling seamlessly interact with the storage manager This paper survey such efforts and the issues involved focusing primarily persistent object oriented languages Contents Integrating Databases and Programming Languages The Programming Language Perspective The Database Perspective Overcoming the Impedence Mismatch Problem Milestones Persistent Programming Langauge Development Comparison Relational Databases Case Study Two Object Oriented Databases Transparent Persistence Declarative Query Facility Collections and Iterators Constraints Active Databases Triggers Once Only Triggers Perpetual Triggers Intra Object Inter Object Triggers Eager Lazy Computation Triggers and Constraints Other Systems Misc Features Object Oriented Database Systems Mandatory Features Optional Features Swizzling Referential Integrity Versioning Other Object Oriented Systems BETA PROCOL Constraint Based Imperative Languages Constraints and Object Identity Kaleidoscope Adding Transactions Kaleidoscope Techniques for Integration Summary Persistent Prolog Motivation and Issues Expert Systems Why Prolog Could Use Persistence Database Interface for Prolog Translation Between SQL and Prolog Meta Translation MIMER Back End Prolog References About this document Rex Jakobovits Tue Nov PST 