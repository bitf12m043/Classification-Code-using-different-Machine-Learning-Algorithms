Date Tue Dec GMT Server NCSA Content type text html Coupling and CohesionCOUPLING and COHESIONCOUPLING indication the strength interconnections between program units Highly coupled have program units dependent each other Loosely coupled are made units that are independent almost independent Modules are independent they can function completely without the presence the other Obviously can have modules completely independent each other Must interact that can produce desired outputs The more connections between modules the more dependent they are the sense that more info about one modules required understand the other module Three factors number interfaces complexity interfaces type info flow along interfaces Want minimize number interfaces between modules minimize the complexity each interface and control the type info flow interface module used pass information and from other modules general modules tightly coupled they use shared variables they exchange control info Loose coupling info held within unit and interface with other units via parameter lists Tight coupling shared global data need only one field record don pass entire record Keep interface simple and small possible Two types info flow data control Passing receiving back control info means that the action the module will depend this control info which makes difficult understand the module Interfaces with only data communication result lowest degree coupling followed interfaces that only transfer control data Highest data hybrid Ranked highest lowest Content coupling one directly references the contents the other When one module modifies local data values instructions another module can happen assembly language one refers local data another module one branches into local label another Common coupling access global data modules bound together global data structures Control coupling passing control flags parameters globals that one module controls the sequence processing steps another module Stamp coupling similar common coupling except that global variables are shared selectively among routines that require the data packages Ada More desirable than common coupling because fewer modules will have modified shared data structure modified Pass entire data structure but need only parts Data coupling use parameter lists pass data items between routines COHESION Measure how well module fits together component should implement single logical function single logical entity All the parts should contribute the implementation Many levels cohesion Coincidental cohesion the parts component are not related but simply bundled into single component harder understand and not reusable Logical association similar functions such input error handling etc put together Functions fall same logical class May pass flag determine which ones executed interface difficult understand Code for more than one function may intertwined leading severe maintenance problems Difficult reuse Temporal cohesion all statements activated single time such start shut down are brought together Initialization clean Functions weakly related one another but more strongly related functions other modules may need change lots modules when maintenance Procedural cohesion single control sequence loop sequence decision statements Often cuts across functional lines May contain only part complete function parts several functions Functions still weakly connected and again unlikely reusable another product Communicational cohesion operate same input data produce same output data May performing more than one function Generally acceptable alternate structures with higher cohesion cannot easily identified still problems with reusability Sequential cohesion output from one part serves input for another part May contain several functions parts different functions Informational cohesion performs number functions each with its own entry point with independent code for each function all performed same data structure Different than logical cohesion because functions not intertwined Functional cohesion each part necessary for execution single function compute square root sort the array Usually reusable other contexts Maintenance easier Type cohesion modules that support data abstraction Not strictly linear scale Functional much stronger than rest while first two much weaker than others Often many levels may applicable when considering two elements module Cohesion module considered highest level cohesion that applicable all elements the module Adam Carlson 