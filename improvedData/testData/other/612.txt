Date Mon Dec GMT Server NCSA Content type text html CSE Grading PolicyCSE Grading Policy The grading policy CSE will based two main factors functionality how well your program works and software engineering how well your program constructed Functionality The main goal programming create working program However working generally extremely vague term since all depends what the program supposed many cases the programs that assign you will underspecified that won tell you exactly how they should work Instead give you pretty good idea what expect leaving decisions about how handle tricky ambiguous cases you this way you turn our partial specification into exact specification For example partial specification might ask you write program that draws mazes the screen without telling you exactly what input you should get from the user what kind maze make You might decide draw rectangular mazes with ASCII characters and prompt the user for maze size terms characters see below addition you might detail the way which the maze should constructed making these decisions you created more exact specification something that explains more precisely how your program should run How big would you like your maze rows columns Here your maze Start End Although there rarely single correct way handle ambiguities partial specification sure that your full specification the spirit the partial specification For example writing program that always generated mazes the following form probably isn what had mind How long would you like your maze columns Here your maze Start End The bottom line that order know your program working you have decide what supposed Therefore your first step should define full specification You generally asked submit full specification with your program the comments cover sheet for example that know what your specific goals and choices were This should not long document but short clear description the program expected behavior highlighting how handles ambiguous cases all means feel free discuss your specification choices with the TAs Once you finished writing the program you should demonstrate yourself and that works running some test cases Generally supply you with few test cases that will test aspects your program your program works our test cases that doesn necessarily mean that correct and you done Make sure write few test cases your own check some those ambiguous cases that your full specification describes and use these demonstrate that your program works you specified Software Engineering Software engineering all about how program put together involves the division the program into separate logical modules defining reasonable interfaces between these modules and commenting your code that clear others like your what does Remember that based the stereo analogy the programs that looking for are built multiple modules interacting through clean well defined interfaces not looking for the single monolithic piece code that has everything thrown into without any sense order that technique might have some benefits the stereo world but they rarely software this extent you will graded how well your program constructed addition how well works Did you comment that clear what your design was Did you make reasonable decisions how the code should organized and interface between modules Etc All these things may seem like pain may seem less important than getting the program working but they are essential any programming environment whether group project for course huge Microsoft application programs grow larger and evolve over time their initial structure will often determine how easy they are maintain debug and improve backwards seems program that well structured and documented but doesn quite work comment reading think the problem somewhere this routine often more impressive than one that works but completely indecipherable Strive for the best both Other Questions you are still unclear what looking for please consult with your cse webmaster washington edu 