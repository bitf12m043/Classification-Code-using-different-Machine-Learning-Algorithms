Date Mon Dec GMT Server NCSA Content type text html CSE ProjectsCSE Introduction toOperating SystemsAutumn ProjectsNOTE always you are free work any platform but your responsibility make sure what you hand works the instructional machines lynx wolf grizzly The source code provided throughout the quarter will written You are free use but will not supported The turnin program now accepting the intermdiate submission for Project and the Java extra credit assignment Programming and Debugging solution This project out Monday and due Monday Threads and Synchronization solution This project out Wednesday and due Friday System Calls and Virtual Memory The project description has accompanying Appendix This project out Thursday and due Monday There also intermediate due date Friday DOS File systemThis project out Monday and due Wednesday There also intermediate due date Wednesday Extra Credit Java AssignmentThis assignment out Monday and due Friday Project SolutionsProject queue here version queuetest timegetpid cNotes When using gettimeofday you get back value seconds and microseconds you want time something you will need call gettimeofday twice once get the start time start and again get the ending time end find the elapsed time not enough subtract the seconds field start from the seconds field end and similarly with the microseconds field you can get incorrect value for the number seconds and negative value for the microseconds You must first convert common unit either floating point value seconds integer value microseconds and then the subtraction start double start sec double start usec end double end sec double end usec elapsed time end start Project Below solution for the preemptive minithread system implemented spinlocks and had few extra header files Notice that you actually destroy threads semaphore destroy you need special destroy routine that doesn actually stop the thread like the one you use destroy threads your minithread system Look for minithread destroy and minithread destroy internal minithread and synch see the difference minithread minithread package synch semaphore implementation malloc safe malloc spinlock and spinlock spinlocks and few extra header files panic for errors minithread export other exported routines For the bounded buffer problem use three semaphores empty and full synchronize the producers and consumers and pool manage accesses the buffer pool addition provide three command line options that enable the user choose the number producers the number consumers and the size the buffer pool this was not part the assignment boundbuf For the cigarette problem use four semaphores array needed one for each ingredient and empty indicate that there nothing the table The way think this that each the three smokers each has different ingredient semaphore that signalled when the other two ingredients are there The agent randomly one these semaphores also provided three command line options that allow you control the agent particular default the agent puts ingredients the table each with equal probability the limit each smoker will smoke about the same number cigarettes The ratio smokers smoking You can use the command line options change this ratio this was not part the assignment cigarette ccse webmaster washington edu 