Date Wed Jan GMT Server NCSA Content type text html Bad ProgrammingProgramming Practices AvoidExecutive Summary Dave Grove will bad things you any your turned homework has any the following features Unmarked global variables Global variables must clearly declared the top file and must have names that begin and end with asterisks Also there must comment explaining why this variables should must global Mixing parameter passing styles Lisp allows positional keyword REST OPTIONAL and various combinations options for passing parameters function You should use positional function parameters unless you want need sometimes omit parameter which case use all keyword parameters not mix parameter passing conventions within function not use REST unless you have extremely good reason not use OPTIONAL all Nested defuns Lisp allows you define one function inside another For example defun main function args let local variable process args args defun helper function some function local variable some more processing This creates global binding for helper function and therefore case global side effect that not well documented Never put DEFUN inside DEFUN The LAMBDA macro allows you create local unnamed functions the fly Declaring before initializing Those accustomed programming PASCAL are used the idea declaring our variables the beginning function then initializint them later for example might write UGLY UGLY UGLY UGLY UGLY defun count symbols nested list let the car NIL Declarations only the cdr NIL symbols car NIL symbols cdr NIL cond null nested list setf symbols car setf the car car nested list symbolp the car setf symbols car listp the car setf symbols car count symbols the car setf symbols cdr count symbols cdr nested list symbols car symbols cdr This really bad Lisp style because there need pre declare then set these variables Here better way write let the different clauses the COND separate the cases for many cases doing that carefully allows fewer conditionals and local variables defun count symbols nested list cond null nested list let the car car nested list symbols rest count symbols cdr nested list cond symbolp the car symbols rest listp the car count symbols the car symbols rest symbols rest Here another version that uses conditional assignment variable open debate whether this good style not the most purely Lisp like the three but personally find little hard read defun count symbols nested list cond null nested list let the car car nested list symbols car cond symbolp the car listp the car count symbols the car symbols car count symbols cdr nested list Mixing Side effects and Computation Functions should written either compute result perform side effect like You should avoid writing functions that both substantial ammounts computation produce result and have interesting side efftects cse webmaster washington edu Last update 