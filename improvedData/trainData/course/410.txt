Date Wed Nov GMT Server Apache Content type text html Content length Last modified Wed Nov GMT Systems Programming Home PageSystems Programming Home Page Fall Last updated November The optional final exam for this course scheduled for Monday Afternoon Dec will minutes open book open notes Alert have made some modifications the spec for project Read the changes clicking here ContentsCourse InformationGradingScheduleProjectsSample programs from first half classSample Motif programsCode from the TextOther Motif and resourcesExam information Kerberos resourcesAFS NotesMiscellaneous resources Course Information Instructor Robert Ingalls Executive Officer Computer Science Dept Amos Eaton Phone email ingalr rpi edu ingallsr rpi edu Office Hours Texts Advanced Programming the Unix Environment Richard Stevens Addison Wesley The Window System Programming and Applications with Douglas Young Prentice Hall Teaching Assistants Lakshmi Bhat Amos Eaton email bhatl rpi edu Office Hours Corey Bufi Amos Eaton email bufic rpi edu Office Hours This course introduces students the basic concepts systems programming including system calls files and process management interprocess communication networking concurrent programming and graphics using windows Particular emphasis will placed the implementation these concepts Unix but other operating system implementations will also covered Prerequisites Students are assumed able program and have basic understanding data structures and assembler language programming Grading There will two tests and six programming assignments Each the tests will count the course grade the program assignments will varying weights depending their degree difficulty but they will total There will make exams However there will optional comprehensive final exam which can used replace missing test project your lowest test project Academic Integrity All programs submitted must your own work and you are expected develop your programs independently You may receive much help you wish the use the operating system text editors debuggers file transfer protocols and You may consult with other members the class about interpreting the assignment and you may get help finding bugs but not fixing bugs but you are not allowed look copy another person code discuss design decisions with others and you cannot show your code others Students found violation these guidelines will fail the project and will reported the dean Programming assignments This programming intensive course and students are expected strong programmers Assignments may done either While you may use whatever platforms compilers you wish develop your code all code submitted must run both Sun and AIX platforms RCS and must compile without errors significant warnings using gcc Wall Assignments will submitted mailing source code the multiple files should bundled using shar You must submit make file with each assignment There will ten point per day penalty for lateness ScheduleThis schedule tentative and should not taken too literally will sometimes ahead this sometimes behind and sometimes completely off Schedule TopicsDateTopicsReadingTu Aug Unix standards Posix debugging sharStevens Aug Structure program compiling linking make libraries concept system call errno Stevens Sep Files file system callsStevens Sep Files and directories more system callsStevens Sep Process concepts fork exec etc Stevens Sep process group relations daemon processesStevens Sep SignalsStevens Sep Interprocess Communication Pipes FIFOsStevens Sep Concurrency ConceptsnoneTh Sep Concurrency Unix semaphores file locks shared memoryStevens Oct Examples postscript printer database libraryStevens Oct The Client Server model socketsOnline readingTu Oct More sockets the Internet reviewnone Oct Exam none Oct Design Clients and Servers Oct Intro networking protocol stacks Oct The Internet Oct TCP and UDP Oct Security Kerberos Nov Overview the window systemYoung Nov Primitive Motif WidgetsYoung Nov Manager WidgetsYoung Nov Menus and dialogsYoung Nov EventsYoung Nov Graphics color fonts bitmapsYoung Nov Creating your own widgetsYoung Dec Review Dec Exam ProjectsGeneral Project Guidelines All projects should follow guidelines for good programming practices Here list Your program should have comment the top with your name login brief description what the program and any special compiling instructions main should like executive company should not any work but should delegate work other functions Most functions should short and each should only one thing function should ever more than lines Each function should have brief comment describing what does not necessary comment every line and your code well written should not require lot line commenting However you should use comments describe any unusual code hard follow code complicated code and describe any non obvious variables variables and functions should have meaningful names but you can use single letters like for loop counters and such You should check the return code for any system call that can fail and have appropriate error handler Your code should have enough error checking that matter what the user does your program will not seg fault loop forever other strange things very hard make your program idiot proof idiots are very clever All code must written you and you alone except that you can use and modify any sample code from the text from class long you provide credit the source About Project About Project About Project About Project About Project About Project you have problems suggestions send mail sysprog rpi edu Miscellaneous Resources the request one the students here link list all the RFCs Request for Comments This contains protocols for many common network services well other standards for the Internet 