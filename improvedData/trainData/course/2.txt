MIME Version Server CERN Date Sunday Nov GMT Content Type text html Content Length Last Modified Thursday Oct GMT Computer Science Computer Science Fall Course InformationAugust introductory course covering broad range computer science concepts and techniques including data abstraction recursion program correctness generic functions object oriented programming pattern matching and languages and their evaluators use the Dylan language object oriented dynamic language developed Apple Computer which well suited for covering broad range introductory computer science topics This not course about the Dylan language just happens the notation that have chosen for writing programs The major goals the course are teach students how think clearly about programs and programming and provide toolbox modern programming techniques that will applicable any language What course take Students often wonder whether take focuses programming skills the object oriented language Java whereas provides exposure broad range computational and programming problems using number programming paradigms including functional object oriented and imperative programming techniques you have good background good formal skills mathematics physics you should probably take Transfers between and either direction are encouraged during the first two weeks Reaching The best way reach the course staff posting questions comments using the Web site http www cornell edu Info Courses Current This site contains all course materials and runs CoNote server which allows students and staff post questions and answers annotations the handouts and problem sets order access the Web site you will need request user and password for the CoNote system this simply the home page and follow the instructions Your user and password will created Monday you request them this week You can also reach the course staff sending email cornell edu but this should not used for asking questions about problem sets handouts use the Web site Who Are Dan Huttenlocher Professor Upson Tobias Mayr Upson James Hamblin ugrad Robert Szewczyk ugrad Justin Voskuhl ugrad Andras Ferencz consultant Melissa consultantWhen Meet Lectures are Tuesday and Thursday Kimball and recitations are Monday and Wednesday Recitations expand the material lecture and provide more opportunity ask questions Consulting hours for help with problem sets other questions will held from until midnight the two evenings before each problem set due see schedule below Thus for problem sets due Tuesday there will consulting hours Sunday and Monday evenings and for those due Thursday there will consulting hours Tuesday and Wednesday evenings Consulting hours are the public Mac lab Upson Office hours are James Hamblin TBA Dan Huttenlocher Tobias Mayr Robert Szewczyk TBA Justin Voskuhl TBA Course Materials There textbook for this course There will course handouts and lecture notes which will available both hardcopy and the course Web site The Dylan interpreter available free the course Web site and was developed Justin Voskuhl for this class implemented Java and thus will run under any Java capable Web browser The best current browser changes almost weekly Netscape for Windows which has Borland just time Java compiler There are also standalone versions available that you can download onto your computer you not want use the Web browser version One word warning you download standalone Dylan onto your machine make sure that you are using the most recent version checking the web site Course Requirements Students are responsible for all material the assigned readings well that covered lectures and recitations There will six problem sets two preliminary exams and final exam schedule given below Each problem set will combination written exercises and programming assignment Course grades will based combination the problem sets and exam scores The problem sets will account for approximately one half the total grade late assignments will accepted will generally grade assignments immediately and return them the following class period You should try complete the programming assignments early will not accept late work The best use your time and the machine time think about the problems before sitting down the computer matter how many times say this takes long time sink think about the problems before sitting down the computer Policy Joint Work Much the learning this course comes from doing the programming problems You may work jointly with one other person the assignments more than two people should work together However you work together with someone you must submit single joint assignment with both names Under circumstances may you hand work done with someone else under your own name doubt credit the person from whom you got help You would amazed how easy tell when people work together problem sets please don make life unpleasant for all breaking these rules Public Lab Facilities CIT and various colleges campus provide public Macintosh and facilities you may use your own machine the public ones The department does not provide computer facilities for this course The course consultants will available the Upson Mac lab see above Problem Set Due Dates and Exam Dates All problem sets are due before the due date For example assignment due Tuesday must submitted electronically the course server Tuesday that late Monday night late assignments are accepted make sure you submit your final solution the correct time and date Assignment Assignment Assignment Prelim Assignment Assignment Prelim Assignment Final Exam see exam schedule Lecture Outline The Study Computation and Introduction Dylan Function Abstraction and the Substitution Model Evaluation Procedures and Processes Iteration Recursion and Induction Higher Order Procedures Functional Arguments and Values Analysis Algorithms Orders Growth Data Abstraction Structures Contracts and Implementations Hierarchical Data Lists Trees and the need for Quotation Recursive List Processing and Reasoning about Lists Symbolic Differentiation Extended Example Generic Operations Type Dispatching and Generic Functions Generic Operations Polynomial Arithmetic System Assignment and the Environment Model Evaluation Assignment and Local State Variables Objects with State and Object Oriented Programming Object Oriented Programming and Inheritance Multimethods and More About Object Oriented Programming Mutable Data Stacks and Queues Mutable Data Heaps Heapsort and Priority Queues The Metacircular Evaluator Dylan Dylan Variations Expression Evaluation Compilation and Optimization Streams Infinite Streams Nonlocal Exits Catch and Throw Garbage Collection and the Illusion Infinite Memory Topics Randomization and Quicksort Topics Computability MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Thursday Apr GMT Distributed Computing ICS Distributed Computing ISpring Instructor Lorenzo AlvisiTeaching Assistant Rajeev JoshiContents Office Hours Locations Mechanics Required Textbook Course Content Grading Problem Sets Information pertaining the final exam Suggested Solutions the Midterm Exam Newsgroup utexas class Instructional StaffLorenzo Alvisi Taylor Hall Phone Office Hours Tuesdays Rajeev Joshi Phone Office Hours Mondays and Thursdays Other meetings with Lorenzo and Rajeev can arranged appointment Mechanics expect that the classes will cover material from the required textbook the remainder will come from other sources papers other textbooks References such sources will given class the appropriate time Lectures Monday and Wednesday Robert Lee Moore Hall The newsgroup for the class utexas class Required Textbook Distributed Systems Second Edition Mullender editor ACM Press Addison Wesley Publishing Company Reading Course Content covers abstractions that have proved useful are expected useful for designing and building tomorrow distributed systems These include global states cuts logical and vector clocks causal message delivery global property detection message logging and checkpointing replication management state machine approach primary backup approach agreement protocols Byzantine agreement ordered multicast group programming techniques and applications distributed file systems caching disconnected operations time services Byzantine clock synchronization NTP security encryption authentication security group programming will integrate the discussion the general principles with the presentation case studies that exemplify how such principles have been used design and implement real systems Other topics depending time and interest will presented some you the size the class does not allow all you give presentation Such topics may include distributed shared memory distributed objects kernel support for distributed systems weak consistency for replica management protocols for electronic commerce protocols for wide area networks Grading There will written homework assignment Solutions will graded Any solution that demonstrates credible effort behalf its authors whether the solution right wrong will receive better Collaboration homework assignment three students permitted and encouraged but not required When there such collaboration single solution should submitted for grading with the names the collaborators Other collaborations will considered violations Academic Integrity There will written take home midterm examination for which collaboration will allowed There will final exam Each student however will required write final paper about pages that surveys one the issues that have discussed class list suggested topics will distributed class Monday The paper due the start the last class Wednesday hence you will have weeks complete the paper You can also team with colleague and prepare one two lectures topic not previously covered class you choose this option you and your colleague will only required write single survey paper about pages warmly encourage you consider volunteering for presentation will give you excellent opportunity improve your communication skills Problem Sets this and all subsequent problem sets you should conform the following general guidelines Prove and show are synonymous precise proof required when you are asked prove show something show that something impossible you have give proof that makes clear that the problem cannot solved matter what the algorithm insufficient show that particular algorithm does not work Any algorithm that you develop must accompanied proof correctness unless you explicitly told otherwise Due Mon Feb Problem The snapshot protocols discussed class and the textbook assume that communication channels are FIFO Derive snapshot protocol for asynchronous system that does not depend the FIFO assumption and prove correct prove that the protocol produces consistent global state You may assume that most one snapshot being computed any point during run Note The book contains reference paper Mattern that contains solution the problem urge you resist the temptation solve the problem visiting the library Problem Taking the snapshot distributed computation general technique for computing stable global predicates More efficient protocols can derived for computing specific predicates that are often conceptually simpler and more efficient terms the number messages they exchange than snapshot based solution this problem you are required derive such specialized protocol for detecting deadlock asynchronous distributed system Ideally your protocol would not need centralized monitor process and would have message cost where the number processes the distributed system monitor based snapshot protocol for detecting deadlock has cost The suggested solutions these problems are now online This link points the postscript file Due Wed Feb This link points the postscript file describing the second homework assignment The final exam The assignment constituting the final exam due Friday May This link points the Postscript file describing the assignment you have questions feel free send email Lorenzo Rajeev you have ideas improving this page please send your suggestions joshi utexas edu Rajeev Joshi last updated Apr Date Wed Nov GMT Server NCSA Content type text html Shlomo Zilberstein Teaching CMPSCI UNIVERSITY MASSACHUSETTS Computer Science Department CMPSCI Introduction Artificial IntelligenceFall Shlomo Zilberstein Handouts Note certain handouts are available umass edu only Course Information Schedule Messages Programming Assignment Programming Assignment Programming Assignment Programming Assignment Homework Assignment Homework Assignment Homework Assignment Homework Assignment Final ExaminationCourse Related Links Artificial Intelligence Modern Approach Home Page Source code for programs from the textbook The FAQ Frequently Asked Questions Virtual Library Reading University The Repository CMU List Resources from Canada Institute for Information Technology Yahoo directory SIGART ACM Special Interest Group AAAI The American Association for Artificial Intelligence Common Lisp OnlineLisp tutorials from Tulane Johns Hopkins Texas and Civilized Software Guy Steele Common Lisp The Language edition Index Lisp references from Yahoo comp lang lisp Frequently Asked Questions FAQ Lisp Resources University Massachusetts Lisp code accompanying textbooks The New Hacker Dictionaryshlomo umass edu Date Mon Nov GMT Server NCSA Content type text html Last modified Wed Oct GMT Content length Home Page ECE Machine Organization and Programming credits introduction current system structures control communication memories processors and devices Projects involve detailed study and use specific small computer hardware and software system Prerequisites consent instructor Not open students who have taken ECE Open Freshmen Semesterly course information info Fall 