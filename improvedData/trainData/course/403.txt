Server Netscape Commerce Date Wednesday Nov GMT Last modified Monday Apr GMT Content length Content type text html Princeton Programming Languages Spring Princeton Programming Languages Spring Home Page Image borrowed from the Indiana page courtesy Erik Hilsdale Overview Class Information Textbooks Syllabus Lecture Notes Assignments Tools Examinations AcknowledgmentsOverview This course provides introduction the principles underlying the design both modern and legacy programming languages developing series interpreters that study various characteristics programming languages students will obtain deep understanding language semantics Such understanding provides firm basis for selecting language for particular task and for graduate study programming languages and compilers lesser degree this course will also cover programming paradigms implementation concerns and formal specification programming language semantics Previous courses Princeton were taught using Kamin book and involved writing interpreters Pascal While this course similar content will developing interpreters Scheme Not only Scheme better suited this task but using Scheme will give students some first hand experience with advanced programming language Course Topics from Academic Calendar Principles theory and implementation modern programming languages Name binding macros parameter passing and closures Continuations coroutines and objects Types modules and representation independence Compilation transformation Lambda calculus operational semantics and denotational semantics Class Information Instructor Andrew Wright room Princeton NEC wright research nec com Office Hours before after class appointment via email Paul Martino room ahpah princeton edu Office Hours Tuesday Lecture Hours Tuesday Thursday from room Web Page this page http www princeton edu courses Local newsgroup Grading midterm final exam assignments Scheme quiz Textbooks Required Essentials Programming Languages Friedman Wand and Haynes McGraw Hill ISBN Chapter six this textbook out date get updated chapter six postscript format Also here draft chapter types and type inference Recommended The Little Schemer Friedman and Felleisen MIT Press ISBN older book called The Little Lisper will you can find used one The Seasoned Schemer Friedman and Felleisen MIT Press ISBN Tentative Syllabus for Spring Week Feb Introduction Scheme The Little Schemer chapters Induction Recursion and Scope EOPL chapter Static Properties Programs EOPL chapters and Week Feb Syntactic Abstraction and Data Abstraction EOPL chapter Advanced Scheme The Seasoned Schemer chapters Interpreters The Seasoned Schemer chapter EOPL chapter Scheme Quiz material from week Feb Week Feb Representation Independence and Dynamic Scope EOPL chapter Parameter Passing EOPL chapter Week Feb Continuation Passing Style EOPL chapter The Seasoned Schemer chapters Week March Continuation Passing Interpreters EOPL chapter Week March Review and Midterm Exam Week March Ski week lectures Week March Imperative form and Registerization EOPL chapter Week April Garbage Collection Formal Semantics Week April Type systems Week April Module systems Week April Object systems Week April Whatever left logic programming May May Reading period May May Final exams last possible due date for take home May Lecture Notes Lecture notes for each class will typeset and appear online one two days after each class Lecture NotesAssignments One assignment will due each week Most assignments will involve implementing some language facility interpreter Assignments will available Thursday and due the following Thursday the beginning class Solutions will discussed class after assignments are collected hence late assignments will not accepted Solutions will also posted online Assignments will graded for both content and style where style has specific meaning that should become clear class Since there are two points per assignment the grades are simple right close and wrong Assignments and SolutionsTools Scheme our most important tool Here are some useful Scheme links Scheme definition MIT Scheme Scheme Home Page MIT Indiana Scheme Repository are using MIT Scheme for this course Here are few useful things know about MIT Scheme get started type scheme shell start Scheme read eval print loop You can now type definitions and expressions interactively load files using load file scm Even you are familiar with emacs you may want the first assignment this way Alternatively you can run Scheme under Emacs For the interpreters building this course you need install few extensions Scheme Even you don run Scheme under Emacs you probably want edit Scheme programs using Emacs because has nice automatic indentation facilities better indentation style than the default can enabled placing setq load path cons emacs load path file called emacs your home directory Examinations The following tentative schedule for examinations Scheme Quiz class during the week Feb Midterm Exam the week March Final Exam May May Here study guide for the final exam Acknowledgments This course combines ideas and structure from Essentials Programming Languages Indiana University taught Dan Friedman Rice University taught Matthias Felleisen Andrew Wright NEC Research Institute wright research nec com 