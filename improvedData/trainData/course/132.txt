Date Wed Nov GMT Server NCSA Last modified Wed Nov GMT Content type text html Content length CIS Translator Design Fall CIS Translator Design Fall What New these Web Pages Phase assignment online Phase solution online OVERVIEW This course explores basic problems the construction programming language translators study the theoretical foundations translators and common implementation techniques The course will focus compilers for high level languages but will also look applying translation techniques variety little languages LECTURES Nichols MWF INSTRUCTOR Prof Matt Dwyer Office Nichols Email dwyer cis ksu edu WWW http www cis ksu edu dwyer Phone Office Hours Thu TEXT Compilers Principles Techniques and Tools Aho Sethi and Ullman Addison Wesley ADDITIONAL RESOURCES Web pages for course will include tool documentation assignments solutions test cases and lecture notesPREREQUISITES CIS REQUIREMENTS The course will consist mixture different kinds assignments major component your grade will determined large multi part compiler implementation project There will open book open note class final exam Occasional short homework assignments and closed book closed note class quizzes will given The goal these assignments provide feedback you how you are progressing understanding the course material also provides valuable feedback how you are doing that can tailor the course maximize the benefit the class The weighting used for the final grade will project final exam and homeworks and quizes The project consists implementing compiler for Pascal like language with classes You may write your compiler Pascal Ada you really want write another language come and talk expect the code clearly organized and documented very serious about this you use either Ada you can write your lexical analyzer using scanner generator such flex see man flexdoc for details you use another language you will have build the lexical analyzer hand Regardless the implementation language you will build top down recursive descent parser This parser will produce abstract syntax tree intermediate representation from which code will generated You may use the VCG tool quickly and easily produce postscript depictions your syntax trees Your compiler will generate assembly code for the MIPS Generated programs will executed MIPS simulator called spim you don already know about machine architecture and assembly language programming you might start browse the spim document The compiler will implemented four phase Scanner with identifier table Parser with type checking Embellish Parser build Optimize Code Generator The project can implemented either independently pairs Those who chose work pairs will expected perform some local optimization the generated code This will involve building additional phase perform the optimization part this exercise building large software system with reasonably complicated component interactions You will not graded the quality the generated code Correctness the code however very important will make number test files available prior the due date each stage You are encouraged use these test your implementation may execute your projects those and other test files You may also create tests your own there sufficient interest can create class wide collection test cases for all use All students are encouraged talk each other about compiler concepts design alternatives implementation details etc The final product should your own creation you copy other work you will not prepared for the exam and you will not maximize the benefit you get from this course SCHEDULE ACADEMIC HONESTY all assignments you are expected your own work From the Provost office Plagiarism and cheating are serious offenses and may punished failure the exam paper project failure the course and expulsion from the University For more information refer the Academic Dishonesty policy Inside KSU Matt Dwyer dwyer cis ksu edu Last updated Aug 