Date Wed Nov GMT Server NCSA Last modified Fri May GMT Content type text html Content length CIS Software Validation and Verification Spring CIS Software Validation and Verification Spring What New these Web Pages The final exam now online Homework assignment part now online Someone asked for clarification regarding data flow criteria appears mis spoke discussing hint collecting data for assignment part Here the clarification The ALL Paths criteria requires that all paths between all defs and all uses reaches exercised The ALL Uses criteria requires some path between all defs and all uses reaches exercised The ALL Defs criteria requires some path between all defs and some uses reaches exercised summarize for all definitions Criteria NUM USES Paths USES ALL all all ALL Uses all some ALL Defs some some Note that some satisfied one know that some you are having significant technical problems with the course this mean delays receiving tapes receiving blank tapes and variability the audio quality tapes like try assess how wide spread this find that problem for significant number you plan complaining NTU not sure will any good but its worth try send your feedback you have any other comments the way the course being taught please feel free let know will not affect your grade OVERVIEW software systems increase size and complexity the difficulty assuring that they function intended increases rapidly variety approaches have been proposed that have the potential enable development organizations and individual developers produce higher quality software general single technique capable providing incontrovertable proof that software always behaves intended this course will examine different verification and validation approaches that are capable providing with evidence software quality Using combination these techniques can provide high degree confidence the quality the software construct LECTURES Durland Exams held Nichols INSTRUCTOR Prof Matt DwyerPREREQUISITES CIS REQUIREMENTS The course will consist lectures readings homework assignments and examinations The bulk the concepts the course will presented explained and illustrated way extended examples the lectures The readings serve provide more details and depth selected concepts Homework designed develop student abilities apply concepts and synthesize solutions new problems based those concepts Lectures and Readings Lectures and readings function integrated presentation the course material expected that readings will read prior the appropriate lecture Homework There will four homework assignments The assignments will involve applying and extending the concepts presented the lectures and readings For some the homeworks you will required apply specific techniques actual code For these assignments will make samples code available that you can use alternatively you can use piece code that you have developed Homeworks should completed individually not work with any other person Assignments are due the beginning class will deducted for late assignments additional for each day late Off campus students may either email their solutions fax their solutions using Examinations There will comprehensive take home final exam Final grades will assigned based the following weighting homeworks mid term and final READINGS The required readings for this course are selected papers from the literature References you not have access these papers they have been collected and are available from Copy phone number The cost addition the required readings you may find the following texts useful they contain some the material the course They range from general software engineering texts depth treatments issues related particular verification and validation approaches There are number general software engineering text This text does good job with software quaility issues Fundamentals software engineering Ghezzi Jazayeri and Mandrioli Prentice Hall The following two texts cover broad range testing techniques and contain significant practical information for testers Software Testing Techniques Beizer Van Nostrand Reinhold The Craft Software Testing Marick Prentice Hall Representations and algorithms for data flow analysis are covered most compiler books good example Compilers Principles Techniques and Tools Aho Sethi and Ullman Addison Wesley ADDITIONAL RESOURCES Web pages for course linked off home page will include assignments solutions lecture notes and links other validation and verification pages ORGANIZATION SCHEDULE The course broken into the following parts foundations program analysis cover mathematical preliminaries How validation and verification activities relate other software development activities present and discuss variety models that are used represent and reason about the possible behavior program specification intended program behavior How say what program should While there are variety different specification formalisms this course will focus finite state automata specifications static techniques examine the text designs specifications code One can view static techniques kind abstract execution the program This execution produces different kinds output than the normal program execution and that output used drive validation and verification efforts This execution can accomplished variety different substrates will study both manual techniques that use developers perform program analyses automated techniques that algorithmically perform program analyses dynamic techniques involve executing implementation with respect the semantics the language which written Validation and verification efforts are based observing the behaviour the software executes This can include observing normal program output well probing the state the software during different points its execution Well look techniques based both these assertion based analyses involve periodic checking intended behavior during program execution testing involves checking software input output relationships software processes that support verification and validation provide infrastructure which quality assurance activities can organized monitored and controlled software safety life critical systems emerging increasingly important area quality assurance concurrency being used increasingly distributed and parallel software Along with increased performance comes increase the complexity the already difficult problem quality assurance will consider the impact concurrency both static and dynamic analysis approaches dwyer cis ksu edu 