Date Tue Nov GMT Server Apache Content type text html Content length Last modified Mon Nov GMT cis Principle Programming LanguagesCIS Principle Programming Languages Instructor and GTF Textbook and packets Grade policy Exams Course objetives Schedule Announcements Lectures AssignmentsInstructor and GTF Instructor Zena Ariola Room ariola http www uoregon edu ariolaOffice hours appointment GTF Yong Xiao Room xiao Office hours appointment Tutorial hours DES Textbook and Packets Textbook Programming Languages Concepts and Constructs Ravi Sethi Addison Wesley Packets Introduction Standard Lecture Notes Grading Policy Written assignments will account for the grade The midterm will count the final examination Problem sets are solved groups two three and due class one copy per group the day indicated the problem set handout Midterm and Final Exams Midterm Exam Nov Esslinger Final Exam Dec Willamette Hall Course Objectives The main goal this course introduce you the different aspects programming languages including their features type systems programming style and implementation will consider traditional programming languages such and Pascal and more recent languages such and Java You will not become expert programmer the languages taught this class However you will gain the necessary skills understand the impact language features both the implementation and the abstractions they provide For example you will able understand why Java has gained much interest both the academic and industrial arena will cover different programming paradigms Each paradigm provides different way solve problem part the assignments you will required program and Prolog More specifically the topics covered are Compilation Interpretation advantages and disadvantages terms speed execution and memory space Overview the structure compiler Syntax what are the legal expressions Concepts Context free grammars BNF grammars Parse trees and ambiguity Abstract syntax trees Lexical analyzer Parser Imperative programming Cobol Fortran Pascal Ada This the closest model the machine architecture Concepts Side effects Types static and dynamic weak and strong Scope static and dynamic Parameter passing techniques call value call refence call value result call name Aliasing Block structured languages Run time structures Stacks heap Garbage collection Object oriented programming Java Eiffel Support for programming the lage Concepts Abstraction Encapsulation Information hiding Inheritance Subtyping Functional programming Scheme Haskell Miranda Gopher Based mathematics which gives theoretical foundation Concepts Strict non strict functions Higher order functions Currying Lazy eager evaluation Innermost outermost evaluation Type inference Type checking Overloading Coercion Polymorphism Pattern matching Logic programming Prolog Important database query languages Concept Relations functions Facts and Rules Goals Unification Backtracking Cuts time allows will also study the current techniques for specifying the semantics the meaning programming language You need master these techniques you want reason about properties your programs Schedule Introduction Tuesday Introduction Thursday Compilers Interpreter Tuesday Syntactic structure Imperative programming Thursday Control abstraction Data abstraction Tuesday Types Thursday Parameter Passing Techniques Tuesday Storage Management Thursday Scope rules Object oriented programming Tuesday Abstraction Thursday Encapsulation except Tuesday Information hiding Thursday Java Functional programming Tuesday Features Functional languages Thursday Typed language Packet Tuesday Polymorphism Types and exceptions Thursday Untyped language Scheme Tuesday Data same programs Logic programming Tuesday Logic control Thursday Prolog Maintainer this page Yong Xiaoemail xiao uoregon edu 