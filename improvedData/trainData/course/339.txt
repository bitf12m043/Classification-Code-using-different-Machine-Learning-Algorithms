Date Wed Nov GMT Server Apache Content type text html Content length Last modified Wed Oct GMT Spring home pageB Spring Program Transformation and Programming Environments General Information Course Outline Readings Systems Assignments Projects General InformationCourse description This course for students interested advanced program manipulation techniques and supporting tools The course will present methods and techniques program analysis and program transformation techniques and algorithms for programming environments well survey current systems this area Students will implement program analyses and transformations and experiment with programming environments part the course Prerequisites one one and working knowledge Scheme instructor permission Credits Instructor Annie Liu Email liu indiana edu Office Lindley Hall Hours Swain East Office Hours appointment Tentative Course OutlineIntroduction Program development overview goals correctness efficiency productivity methods transformational programming object oriented programming step wise refinement composable software techniques specialization incrementalization data optimization tools compilers language based environments visualization tools tool generators Some simple examples Program analysis overview goals program understanding checking optimization refinement composition modification and reuse styles static dynamic forward backward necessary sufficient methods abstract interpretation dataflow analysis SSA form CDG VFG SESE region PST VDG Slicing type based projection based set based applications dead code analysis redundancy analysis strictness analysis binding time analysis closure analysis update analysis sharing analysis aliasing analysis linearity analysis concurrency analysis time analysis Program transformation overview kinds program synthesis optimization refinement composition modification and reuse basics techniques algebraic simplification fold unfold rewriting program optimization operation driven optimization composition fusion deforestation unrolling list tupling specialization partial evaluation supercompilation incrementalization finite differencing inplace update caching memoization tabulation tupling thining promotion accumulation program refinement data driven optimization representation selection data localizing staging transformation compile time garbage collection program modification and reuse parallelizing programs serializing parallel programs program integration Programming environments techniques overview syntax incremental parsing higher order abstract syntax semantics analysis incremental attribute evaluation extensions attribute grammars higher order composable modular coupled transformation utilities second order pattern matching unification language for complex tree transformation tree rewriting incremental pretty printing program tree database management Program manipulation systems overview catalog compiler construction tools frontend and backend generators attribute grammar based systems programming environment generators program transformation systems specialized utilities examples Cornell Synthesizer Generator Microsoft Reasoning Refine Kestrel KIDS DTRE and Specware NYU APTS Munich CIP CWI ASF SDF Saarbrucken OPTRAN and PROSPECTRA INRIA Mentor and Centaur Berkeley Pan and Ensemble The following topics from the above will covered specially program analysis partial evaluation incrementalization data driven optimization programming environments techniques syntax semantics transformation environments and environments generators Centaur program transformation systems APTS KIDS OPTRAN ReadingsSystemsAssignmentsProjectsliu indiana edu Last updated October 