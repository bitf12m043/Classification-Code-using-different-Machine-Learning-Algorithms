Date Wed Dec GMT Server NCSA Content type text html Last modified Thu Sep GMT Content length Section Lecture Notes Week Lecture Notes Week Topic Introduction computers and programming How use Microsoft Windows and Microsoft FORTRAN the Hewlett Packard Vectra Text Chp Notes Introduction FORTRAN Brief HistoryOne the first high level programming languages circa FORula TRANslator Good for engineering and scientific applications FORTRAN revision the standard and most widespread version FORTRAN revision has additional functionality but not widespread Why learn FORTRAN instead Pascal BASIC Easier write complex formulas and equations Still widely used engineering Lots existing engineering program libraries are written FORTRAN Easy learn similar BASIC How use FORTRAN the Click here Compiling StepsSource Program for Fortran sent compiler Compiler translates Fortran into machine language with couple holes left spits out obj file program may broken into lots segments there may other obj around any rate objs must linked together plus some other things needed fill those holes don worry about what the holes are obj files all read spits out exe file runnable machine language Inside the ComputerInput Keyboard Mouse Output Monitor Printer Inside CPU Central Processing Unit What does computations Memory Where the data the program itself and its data Removable storage Can take things off disk onto memory back Must put things memory order run Memory and Binary the tune Ebony and Ivory just kidding Each cell memory called bit either has charge has charge call charge and charge bits one byte string combo eight and Since each bit can one things bits can one things bits can one things byte lets store different patterns Binary counting Decimal counts Ones place tens Place Hundreds place This because each digit can one things just binary the example above uses powers binary have Ones place two place four place Take for example Decimal BINARY Machine Language Assembly FortranDark Ages Since everything stored and everything written that way For example might stand for add might mean add whatever memory location whatever and store the result memory location note the last three sets digits refer memory locations You can actually add and from memory locations this not quite real example but gives you idea what going Machine code very hard read you saw code like you nuts Esp since add takes arguments move takes arguments etc hard tell which sets numbers stand for commands like add and which stand for memory locations Solution Assembly language ADD Every machine lang statement corresponds one assembly statement and vice versa Problem Takes loooong time write out You also have worry about lots details Programmers noticed that many times there were sequences steps that were repeated quite lot such LOAD LOAD ADD STORE Don worry you won have know this This just show how tedious things were Assembly Language This says take two memory locations and stick their values registers register place where you computations separate from memory explains how and why order compute you have grab values from memory stick them registers add the two registers into third register then store back into memory somewhere else WHEW Instead nice just say SUM TERM TERM This Fortran statement which translated compiled into those assembly instructions you see above You don have worry about where memory SUM TERM and TERM are located the compiler takes care that for you You don have worry about registers again the compiler does that four statements get compacted into one and you don even have deal with binary Copyright copy Modified fromJeff Lampert tick wisc edu Last modified September 