MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Thursday Mar GMT Project ProposalsCS Project ProposalsThorsten von EickenWednesday Mar ProposalsSP related projects Splash benchmarks the Splash benchmark suite consisting parallel applications for shared memory machines developed Stanford Splash the latest version Splash containing several new applications well the original ones The suite divided into two categories kernels and applications Kernels are routines commonly used applications Here sample them Kernels Complex FFT Blocked Decomposition Blocked Sparse Cholesky Factorization Integer Radix Sort Applications Barnes Hut Ocean Simulation Water Simulation with Spatial Data Structure Water Simulation without Spatial Data Structure and others Implement the kernels listed above and one two applications depending the level difficulty Split Your implementation will judged correctness and performance careful explanation the results expected along with detailed timing breakdowns The source code the benchmarks for shared memory machines available the Web You can choose port the existing code Split write your own from scratch once you understand the problem You should also read the paper entitled Splash Programs Characterization and Methodological Considerations published ISCA All these can obtained from the Web This project will expose you parallel programming using state the art languages both shared and distributed memory machines The Splash benchmarks are widely accepted the research community Besides parallel extension that has become very popular over the years You can your project any available platform but suggest the because these languages are currently well supported PVM over Active Messages the PVM Parallel Virtual Machine very popular software package that supports parallel computing networked workstations provides user library with routines pvm send pvm recv for communication between processes PVM communication baed TCP UDP protocols hence only coarse grained parallel applications can get reasonable performance Try improve the performace PVM implementing its major communication routines over Active Messages the and benchmark them against Split well MPI Parallel VMRL renderer the Split Implement parallel renderer for the VRML virtual reality modelling language This would allow very complex VRML documents downloaded and scenes rendered hopefully near real time system such the You would also need way send the rendered image quickly some desktop workstation simple connection works for prototype but what about sending the rendered image back over ATM parallel POVray other raytracer Split Implement parallel POVray other raytracer This similar the above but probably has less real time feel unless you manage VERY quickly POVRay freely available raytracing package which runs wide range UNIX systems try parallelizing aspects say dividing the rendering space between CPUs and implementing system such the parallel file system Implement parallel file system top the regular filesystem each node This most easily done user level library within Split Split benchmark comparison and survey All the high end parallel systems the department can run programs written the Split parallel language The ATM cluster Fast Ethernet cluster and multiprocessor SPARCs The Berkeley and UCSB groups have number nice Split benchmarks would like get understanding for their relative performance all the above systems well how they scale say when running with opposed CPUs Linda over Active Messages the Linda simple only six operations yet powerful extension existing sequential languages that allows parallel execution programs The computing model slightly different from what you been shown far the course Messages and new tasks executed are put into tuple space and they can retrieved from there any process One does not have specify the address sender receiver the tuple space shared between all processes Reception messages based pattern matching Based the simple concept tuple space one can program all kinds synchronization blocking and non blocking communication point point multicast message passing etc The project will implement Linda run time system over Active Messages the extension The work will include understanding Linda model and using fast communication subsystem and threads order get very efficient run time system Net related projects These projects specifically deal with Net our system for low latency user level networking Four implementations Net exist three for ATM cards one for Fast Ethernet these projects you will augment the existing Net system either one these implementations combining several them CUsee over the ATM network over Fast Ethernet Implement and demo high speed version CUSeeMe over the ATM network over Fast Ethernet Requires independence since nobody our group knows how CUSeeMe works The idea here explore methods long range video teleconferencing using the Net approach opposed sending video between two workstations side side with ATM fiber between them how can protocols designed for robust multicast video conferencing alternative CUSeeMe would system such the MBONE using vat some other free video conferencing package such ivs Gateway between Fast Ethernet and ATM using Net Design and build gateway between Fast Ethernet and ATM using Net This can either the raw Net level the level Kernel Endpoint for Net One problem with Net that doesn allow existing applications and kernel facilities easily share the network device with Net The idea implement kernel level Net endpoint where data generated from sockets the kernel sent and received through the endpoint this way you are treating the kernel endpoint kind Ethernet driver say While any communication using the kernel endpoint will doubt slower than user level endpoints the idea allow many applications multiplex one kernel endpoint and for existing socket based apps least run You would not need implement other high level protocols essentially you would replace the low level kernel functions for sending data ATM Ethernet card with routines which read write the kernel endpoint The best platform for this the ATM Fast Ethernet implementation Net Linux This expert project best undertaken someone with Linux kernel hacking experience packet filter SBA ATM adapter Net over Fast Ethernet and ATM currently use simple protocol which not compatible with Implement simple IPv packet filter for either Net for Fast Ethernet ATM that packets are the correct IPv format You may not wish implement all aspects the protocol but that would plus Flow control for Active Messages Fast Ethernet Fast Ethernet poses interesting flow control problems because acks compete with regular packets for bandwidth Design good flow control algorithm for Active Messages that works well shared medium fast ethernet Fast RPC Pick last year Fast RPC project and actually make work Distributed Shared Memory Pick last year DSM project make work and run the Splash benchmarks over Network performance tool Netperf for Net Implement the standard network performance tool Netperf for Net Gang Scheduling for the Net Cluster gang scheduling all processors working single parallel application schedule themselves synchronously that communication and computation phases can coordinated and reduce latency for data exchange This might require some kind interesting modifications the kernel scheduler and some sort clock synchronization that all processes say Split application run the same time across the network machines This expert project best undertaken someone with Linux kernel hacking experience USIT related projects USIT toolkit developed help build parallel and distributed programming environment the ATM cluster Currently there are utility programs set daemons set machines within the cluster and start running split programs and forwarding between your local machine and the cluster Those who will using the cluster run split programs and other application programs may also find the toolkit useful lower level USIT provides both and Tcl interfaces for job control forwarding job scheduling Net channel allocation etc within the cluster These interfaces can used customize particular execution environment your application requires PVM over Net using USIT PVM popular software package that allows heterogeneous network parallel and serial computers appear single concurrent computational resource PVM consists two parts daemon processes that users install machines that use PVM and user library mainly for communication between processes this project you are explore the possibility implementing basic PVM daemon functionalities Net using the interfaces USIT provides and necessary implement additional interfaces for USIT Other Benchmark the Liedtke microkernel system Jochen Liedtke published the paper microkernel construction last SOSP The abstract included below The project will read the paper thoroughly understand the problems and proposed solutions download the described code and benchmark Abstract From software technology point view the microkernel concept superior large integrated kernels the other hand widely believed that microkernel based systems are inherently inefficient and they are not sufficiently flexible Contradictory this belief show and support documentary evidence that inefficiency and inflexibility current microkernels not inherited from the basic idea but mostly from overloading the kernel and from improper implementation Based functional reasons describe some concepts which must implemented microkernel and illustrate their flexibility Then analyze the performance critical points show what performance achievable that the efficiency sufficient with respect macro kernels and why some published contradictory measurements are not evident Furthermore describe some implementation techniques and illustrate why microkernels are inherently not portable although they improve portability the whole system Return Home Page MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Thursday Dec GMT Lecture Notes OnlineCS Lecture Notes Online Lecture notes are provided PostScript Portable Document Format PDF formatted print slides per page landscape mode You can download the free Adobe Acrobat Reader program view print PDF files Windows Macintosh and Unix Sun SGI and AIX NOTE You must follow the instructions provided Adobe for downloading and installing the free Adobe Acrobat Reader The names Adobe PostScript and Acrobat are registered trademarks Adobe Inc addition use the Adobe icons including the PDF icon requires Trademark License Agreement with Adobe Inc most cases the lecture notes are the corrected versions which include any corrections made during the lecture Week Introductory Remarkes Lecture PostScript PDFWeek Distinguished Lecturer Video Series Bjarne Stroustrup the design Mark Linton encapsulation and inheritance Week Basic Review Lecture PostScript PDFLecture PostScript PDFWeek Classes Interfaces and Implementations Lecture PostScript PDFLecture PostScript PDFWeek Inheritance Templates Lecture PostScript PDFLecture PostScript PDFWeek Lecture PostScript PDFLecture PostScript PDFWeek Lecture PostScript PDFLecture PostScript PDFWeek Mid Term Exam Review notes PostScript PDFLecture PostScript PDFWeek Memory Management Garbage Collection Lecture PostScript PDFLecture PostScript PDFWeek Exception Handling and Intro Java Lecture PostScript PDFLecture PostScript PDFWeek Java Network Programming Classes Lecture PostScript PDFJava Socket Classes see java net source code Week Java Interfaces and Threads Java Cloneable Vector Stack Classes see java lang and java util source code listings Lecture Postscript PDFWeek Java Threads and Animation Lecture Postscript PDFNo lecture Thursday Week More Java James Gosling video lecture the development Java Thanksgiving break Week Synchronization Java Review for Final Lecture Postscript PDFFinal Exam Review Postscript Date Tue Jan GMT Server NCSA MIME version Content type text html Last modified Fri Oct GMT Content length CSE Principles Parallel Computing CSE Principles Parallel Computing The Suggestions Research Papers Presented will not just hand the papers for you read but will give you some pointers for you look for more papers the following areas There are several journals and conferences are important through such IEEE Transactions Parallel and Distributed Systems Proceedings ICPP IPPS SPDP etc Please come see and may give you some starting papers Cache Issues Cache Design Cache Coherence Branch Prediction Issues Data Dependency Analysis Distribution and Partitions Loop Transformation Techniques Data Locality for Distributed Shared Memory Systems Task Partitions and Scheduling Multicast Routing Techniques Interconnection Networks Issues Issues Real Time Systems Fault Tolerance Memory DISK Organizations Parallel Programming Languages Survey The Suggestions Term Projects Term projects can done either group two individual One possible project come out some ideas and simulation verify your idea For example you can simulate some routing teachniques scheduling techniques interconnection networks data distributions branch prediction cache coherence etc don want you waste your time please something interest you Revised Edwin Sha Oct Date Tue Nov GMT Server NCSA Content type text html Last modified Tue Jul GMT Content length Family PhotosEyal and Daphna five years ago Tal hiding behind 