MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Wednesday Jun GMT For Sale Things Koichi Kamijo selling June Many stuffs are already sold out but still have some you find something interested send mail The price open negotiation The more you buy the more discount you get Car Sold out Chevolet Lumina Euro Dec miles sports car type ABS cruise control power windows power seat automatic door wine red good shaping With snow shovel car lock and thief proof bar FurnitureFull size Carpet Plastic drawer Sold out eachStationery set Includes many binders post tapes punchers etc whatever you need for studying Garbage bin Large Midium smallx Thompkins county Electrical AppliancesSony double deck radio cassette Sold out color Canon Japanese Word ProcessorBrand new value Telephone answering Sold out Telephone compact Sony alarm clock with radio Iron with stand Sold out Floor lamp Sold out eachTable study lamp eachFan heater Sold out Small clock Sold out Xmas tree KitchenMicrowave Oven Sold out Zojirushi pot Sold out Rice cooker Sold out Spoons Knives Forks Sold out Glasses Source Pan and more Last update June MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Monday Nov GMT Papers Qualitative Reasoning Papers Qualitative Reasoning Overviews Bibliographies Qualitative simulation The basic idea Protocol analysis Methods for tractable simulation Trajectory constraints for QSIM TeQSIM Time scale abstraction Qualitative phase space Comparative analysis Semi quantitative reasoning NSIM QSIM and temporal logic model checking Building qualitative models QPC MISQ Applying qualitative reasoning Monitoring continuous systems MIMIC Diagnosis continuous systems Space Shuttle Reaction Control System Design purpose and teleological reasoning Integrating spatial and dynamic reasoning Heterogeneous control Overviews The book now the definitive presentation the QSIM approach qualitative reasoning The papers supercedes are indicated below Kuipers Qualitative Reasoning Modeling and Simulation with Incomplete Knowledge Cambridge MIT Press The two AIJ papers are from special retrospective issue reflecting the status research this area Kuipers Reasoning with qualitative models Artificial Intelligence Kuipers Qualitative simulation then and now Artificial Intelligence Bibliographies complete bibliography QSIM papers Qualitative Simulation The Basic Idea Kuipers Commonsense reasoning about causality deriving behavior from structure Artificial Intelligence Reprinted Bobrow Qualitative Reasoning about Physical Systems New York North Holland Paperback publication MIT Press Cambridge Kuipers Qualitative Simulation Artificial Intelligence The ftp copy missing five figures Reprinted Weld Kleer Eds Readings Qualitative Reasoning about Physical Systems Los Altos Morgan Kaufmann Superceded book chapters Each these papers was among the top most cited papers the first volumes the Artificial Intelligence Journal hence the two AIJ retrospectives Protocol Analysis Kuipers and Kassirer Causal reasoning medicine analysis protocol Cognitive Science Reprinted Kidd Knowledge Acquisition for Expert Systems New York Plenum Kuipers Moskowitz and Kassirer Critical Decisions Under Uncertainty Representation and Structure Cognitive Science Reprinted Shafer and Pearl Eds Readings Uncertain Reasoning San Mateo Morgan Kaufmann Publishers Methods for Tractable Simulation Kuipers Chiu Dalle Molle Throop Higher order derivative constraints qualitative simulation Artificial Intelligence Superceded book chapter Clancy Daniel and Kuipers Benjamin Behavior abstraction for tractable simulation Proceedings from the Seventh International Workshop Qualitative Reasoning May Describes two techniques for reducing intractable branching qualitative simulations Chatter box abstraction eliminates chatter performing focused envisionment while Behavior Aggregation eliminations event occurrence branching Clancy and Kuipers Model decomposition and simulation Working Papers the Eighth International Workshop Qualitative Reasoning about Physical Systems Nara Japan Describes simulation technique that uses cross between state based representation and history based representation Models are decomposed into components and then each component simulated separately Temporal correlations between variables within different components eliminated thus reducing many irrelevant distinctions within the behavioral description Richard Mallory Bruce Porter and Benjamin Kuipers Comprehending complex behavior graphs through abstraction Working Papers the Tenth International Workshop Qualitative Reasoning Fallen Leaf Lake California Lance Tokuda Managing occurrence branching qualitative simulation Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Trajectory Constraints for QSIM Pierre Fouche Benjamin Kuipers Reasoning about energy qualitative simulation IEEE Transactions Systems Man and Cybernetics Superceded book chapter TeQSIM Papers contact clancy utexas edu giorgio dimi uniud you have any questions Published Note The paper the most comprehensive reference describing the use TeQSIM address specific tasks The manuscript Focusing qualitative simulation using temporal logic extension the paper published TIME This paper provides detailed description the syntax and semantics the temporal logic along with formal description the model checking algorithm with soundness and completeness theorms Giorgio Brajnik and Daniel Clancy Guiding and refining simulation using temporal logic Third International Workshop Temporal Representation and Reasoning TIME Abstract Giorgio Brajnik and Daniel Clancy Temporal constraints trajectories qualitative simulation Working Papers the Tenth International Workshop Qualitative Reasoning Fallen Leaf Lake California Abstract Giorgio Brajnik and Daniel Clancy Temporal constraints trajectories qualitative simulation Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Abstract Manuscripts Giorgio Brajnik and Daniel Clancy Control Hybrid Systems using Qualitative Simulation Submitted for publication International Workshop Hybrid and Real Time Systems HART Abstract Giorgio Brajnik and Daniel Clancy Focusing qualitative simulation using temporal logic Theoretical Foundations Submitted for publication the Annals Mathematics and Artificial Intelligence Abstract Time Scale Abstraction Kuipers Abstraction time scale qualitative simulation Proceedings the National Conference Artificial Intelligence AAAI Los Altos Morgan Kaufman The ftp copy missing two figures Reprinted Weld Kleer Eds Readings Qualitative Reasoning about Physical Systems Los Altos Morgan Kaufmann Superceded book chapter Jeff Rickel and Bruce Porter Automated modeling for answering prediction questions selecting the time scale and system boundary Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Jeff Rickel Automated modeling complex systems answer prediction questions Doctoral dissertation Department Computer Sciences The University Texas Austin Qualitative Phase Space Lee Kuipers Non intersection trajectories qualitative phase space global constraint for qualitative simulation Proceedings the National Conference Artificial Intelligence AAAI Los Altos Morgan Kaufmann Reprinted Weld Kleer Eds Readings Qualitative Reasoning about Physical Systems Los Altos Morgan Kaufmann Superceded book chapter Lee Kuipers qualitative method construct phase portraits Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Superceded book chapter Figure Figure and Figure were not incorporated into the PostScript file for this paper they appear auxiliary files Comparative Analysis Chiu Kuipers Comparative analysis and qualitative integral representations Boi Faltings and Peter Struss Eds Recent Advances Qualitative Physics MIT Press Semi Quantitative Reasoning Kuipers Berleant Using incomplete quantitative knowledge qualitative reasoning Proceedings the National Conference Artificial Intelligence AAAI Los Altos Morgan Kaufman Superceded book chapter Daniel Berleant The use partial quantitative knowledge with qualitative reasoning University Texas Austin Artificial Intelligence Laboratory Technical Report Doctoral dissertation Department Computer Sciences Berleant Kuipers Qualitative numeric simulation with Boi Faltings and Peter Struss Eds Recent Advances Qualitative Physics MIT Press The ftp file missing several figures NSIM and SQSIM Kay Kuipers Numerical behavior envelopes for qualitative simulation Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Kay Ungar Deriving monotonic function envelopes from observations Working Papers the Seventh International Workshop Qualitative Reasoning about Physical Systems Orcas Island Washington Herbert Kay SQsim simulator for imprecise ODE models University Texas Artificial Intelligence Laboratory March Abstract Herbert Kay Refining Imprecise Models and Their Behaviors Doctoral dissertation Department Computer Sciences The University Texas Austin December Abstract QSIM and Temporal Logic Model Checking This body work treats the behavior graph output QSIM temporal model and applies model checking algorithm prove statements temporal logic Kuipers and Shults Reasoning logic about continuous systems Doyle Sandewall and Torasso editors Principles Knowledge Representation and Reasoning Proceedings the Fourth International Conference Morgan Kaufmann San Mateo Abstract Benjamin Shults Toward reformalization QSIM University Texas Artificial Intelligence Laboratory January Abstract Benjamin Shults and Benjamin Kuipers Proving properties continuous systems qualitative simulation and temporal logic Artificial Intelligence Journal Abstract Building Qualitative Models David Franke and Daniel Dvorak Component connection models Model Based Reasoning Workshop IJCAI Detroit Michigan August Superceded book chapter QPC Crawford Farquhar Kuipers QPC compiler from physical models into qualitative differential equations Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Revised version Boi Faltings and Peter Struss Eds Recent Advances Qualitative Physics MIT Press Superceded book chapter Adam Farquhar Automated modeling physical systems the presence incomplete knowledge University Texas Austin Artificial Intelligence Laboratory Technical Report Doctoral dissertation Department Computer Sciences Adam Farquhar qualitative physics compiler Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Adam Farquhar and Giorgio Brajnik semi quantitative physics compiler Working Papers the International Workshop Qualitative Reasoning Falkenhainer Farquhar Bobrow Fikes Forbus Gruber Iwasaki and Kuipers CML Compositional Modeling Language Stanford University Technical Report KSL Jeff Rickel and Bruce Porter Automated modeling for answering prediction questions selecting the time scale and system boundary Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Jeff Rickel Automated modeling complex systems answer prediction questions Doctoral dissertation Department Computer Sciences The University Texas Austin Available technical report MISQ Bradley Richards Ina Kraan and Benjamin Kuipers Automatic abduction qualitative models Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Ramachandran Mooney Kuipers Learning qualitative models for systems with multiple operating regions Working Papers the Eighth International Workshop Qualitative Reasoning about Physical Systems Nara Japan Applying Qualitative Reasoning Monitoring Continuous Systems Charles Perrow Normal Accidents Living With High Risk Technologies New York Basic Books This book motivates the MIMIC approach system monitoring Daniel Dvorak Expert systems for monitoring and control University Texas Austin Artificial Intelligence Laboratory Technical Report Literature review Dvorak Kuipers Model based monitoring dynamic systems Proceedings the Eleventh International Joint Conference Artificial Intelligence IJCAI Los Altos Morgan Kaufman Daniel Dvorak Benjamin Kuipers Process monitoring and diagnosis model based approach IEEE EXPERT June Herbert Kay Monitoring and diagnosis multitank flows using qualitative reasoning Master thesis Department Computer Sciences The University Texas Austin Daniel Dvorak Monitoring and diagnosis continuous dynamic systems using semiquantitative simulation University Texas Austin Artificial Intelligence Laboratory Technical Report Doctoral dissertation Department Computer Sciences This report provides the definitive description the MIMIC monitoring system Diagnosis Continuous Systems David Throop Model Based Diagnosis Complex Continuous Mechanisms Doctoral dissertation Department Computer Sciences University Texas Austin Austin Texas August Hwee Tou Model based multiple fault diagnosis time varying continuous physical devices IEEE Expert December Siddarth Subramanian and Raymond Mooney Multiple fault diagnosis using general qualitative models with fault modes Working Papers the Fifth International Workshop Principles Diagnosis Siddarth Subramanian and Raymond Mooney Qualitative multiple fault diagnosis continuous dynamic systems using behavioral modes Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press The Space Shuttle Reaction Control System RCS The following models are steps toward building qualitative models large scale realistic mechanisms Herbert Kay qualitative model the space shuttle reaction control system University Texas Austin Artificial Intelligence Laboratory Technical Report Takashi Watanabe and Benjamin Kuipers Component connection models reaction control system Manuscript January This document presents qualitative model the Space Shuttle Reaction Control System expressed within the component connection ontology The model based the previous QSIM model developed Herbert Kay Design Purpose and Teleological Reasoning David Franke Representing and acquiring teleological descriptions Model Based Reasoning Workshop IJCAI Detroit Michigan August David Franke Deriving and using descriptions purpose IEEE Expert April David Franke theory teleology Doctoral dissertation Computer Science Department University Texas Austin May Available Integrating Spatial and Dynamic Reasoning David Throop Spatial unification qualitative spatial reasoning about steady state mechanisms University Texas Austin Artificial Intelligence Laboratory Raman Rajagopalan and Benjamin Kuipers Qualitative spatial reasoning about objects motion application physics problem solving Proceedings Tenth IEEE Conference Artificial Intelligence for Applications CAIA San Antonio March Raman Rajagopalan model for integrated qualitative spatial and dynamic reasoning about physical systems Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Raman Rajagopalan Qualitative reasoning about dynamic change the spatial properties physical system Doctoral dissertation Department Computer Sciences The University Texas Austin Available Qualitative Spatial RepresentationRajagopalan model spatial position based extremal points Proceedings ACM Workshop Advances Geographic Information Systems Arlington November Discussion representation for spatial reasoning Rajagopalan shape abstractions for qualitative spatial reasoning Working notes the AAAI Workshop Spatial and Temporal Reasoning AAAI Seattle Further descriptions spatial representation Emphasis comparison with other methods Rajagopalan and Kuipers The Figure Understander system for integrating text and diagram input knowledge base Proceedings Seventh International Conference Industrial and Engineering Applications Artificial Intelligence and Expert Systems IEA AIE Austin May Details implemented system for integrating graphical and text input knowledge base Rajagopalan Integrating text and graphical input knowledge base Working note the AAAI Workshop Integration Natural Language and Vision Processing AAAI Seattle Further extensions work integrating diagrammatic and text input knowledge base Raman Rajagopalan Picture Semantics for Integrating Text and Diagram Input Artificial Intelligence Review Special issue Integration Natural Language and Vision Processing Recent Advances Volume Heterogeneous Control Benjamin Kuipers Karl Astrom The composition heterogeneous control laws Proceedings the American Control Conference Abstract Reprinted Abraham Kandel Gideon Langholz Eds Fuzzy Control Systems CRC Press Reprinted Yager Zadeh Eds Fuzzy Sets Neural Networks and Soft Computing Van Nostrand Reinhold New York Kuipers and Astrom The composition and validation heterogeneous control laws Automatica Abstract home BJK Date Tue Jan GMT Server NCSA Content type text html CAS Operating Systems Home Page CAS Operating Systems Fall Heddaya Homework due Fri Run the command csmail the csa computer This will add you the class mailing list which and hopefully you too will use distribute late breaking homework information and course related tidbits Read and review any paper Operating Systems from the following list publications Your review should one page long with one third being devoted critique the original paper See the reviewing guidelines ACM Transactions Computer Systems Proceedings the ACM Symposium Operating Systems Principles available special issues Operating Systems Review ACM Transactions Programming Languages and Systems ACM Computing Surveys IEEE Transactions Software Engineering IEEE Transactions Computers Proceedings the IEEE International Conference Distributed Computing Systems Tan problem Tan problem Tan problem Created Maintained Abdelsalam Heddaya Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Aug GMT Content length Lecture notes Chapter MAL and Registers Chapter MAL and registers REGISTERS and MAL introduction the subject registers from motivational point view This lecture attempt explain bit about why computers are designed currently the way they are Try remember that speed program execution important goal Desire for increased speed drives the design computer hardware The impediment speed currently transfering data and from memory look SAL instruction add and must all addresses data memory each address bits this instruction requires more than bits each read from memory delivers bits data then takes lot reads before this instruction can completed least for instruction fetch load load store that transactions with memory for instruction How bad the problem Assume that bit complement addition takes time unit read write from memory takes about time units get fetch instruction time units decode time unit load time units load time units add time unit store time units total time time units the time spent doing memory operations what reduce this number transfer more data one time transfer words one time then only takes reads get the instruction There savings loading storing the operands And extra word worth data transferred for each load waste resources this idea would give saving memory transaction modify instructions such that they are smaller This was common machines from more than decade ago Here how works SAL implies what called address machine Each arithmetic type instruction contains operands for sources and for the destination the result reduce the number operands and thereby reduce the number reads for the instruction fetch develop instruction set that uses operands for arithemtic type instructions Called address machine Now instead add will have load puts the value into add allow only operand called address format now the instruction add will accomplished something like load add store facilitate this there implied word storage associated with the ALU All results instructions are placed into this word called ACCUMULATOR the operation the sequence load place the contents address into the accumulator sort like you did move accumulator SAL add implied operation add the contents the accumulator with the operand and place the result back into the accumulator store place the contents the accumulator into the location specified the operand Notice that this address instruction format implies the use variable the accumulator How many memory transactions does take load least for instruction fetch for read add least for instruction fetch for read store least for instruction fetch for write the same for the address machine savings BUT what the operation following the add was something like div then the value for already the accumulator and the code the address machine could load add div store there only extra instruction memory transactions for this whole sequence the address machine transactions for each instr the address machine transactions for each instr REMEMBER this the address machine uses extra word storage that located the CPU the example shows savings memory transactions when value used shorten addresses This restricts where variables can placed First make each address bits instead Then add requires words for instruction fetch Shorten addresses even more make them each bits long Problem that leaves only words data for operand storage use extra move instructions that allow moving data from bit address one these special words Then the add can fit into instruction NOW put couple these ideas together Use storage CPU accumulator allowed use data Its easy design put bunch storage the CPU call them REGISTERS How about them Then restrict arithmetic instructions only use registers operands add becomes something more like load reg load reg add reg reg reg store reg presuming that the values for and can will used again the load operations take relatively less time The MIPS architecture does this has bit registers Arithmetic logical instructions use register values operands set like this where arith logical instr use only registers for operands called LOAD STORE architecture computer that allows operands come from main memory often called MEMORY MEMORY architecture although that term not universal Load store architectures are common today They have the advantages instructions can fixed length and short their design allows easily permits pipelining making load store architectures faster More about pipelining the end the semester MAL discussing some the details the MIPS architecture and how write assembly language MIPS assembly language least MAL looks lot like SAL except that operands are now registers reference register operand use the syntax where the number the register you want Some limitations the use registers Due conventions set the simulator certain registers are used for special purposes wise avoid the use those registers use needed used the assembler the simulator our case don use are used the simulator don use them until you know what they are for and how they are used Used implement the mechanism for calling special procedures that and take care other error conditions like overflow stack pointer you are automatically allocated stack words and the initialized contain the address the empty word the top the stack the start any program some MAL instructions Here are descriptions and samples only some instructions There are far too many able over each one detail Some sample info for all the examples hex address hex contents opt assembly lang aaee word aaee space word word Load Store label load address place the address assigned label into the register example gets the value label load word place the word address label into the register load word place the word address into the register load word place the word address into the register example gets the value aaee label load byte place the byte address label into the least significant byte register and sign extend the value the rest the register load byte place the byte address into the least significant byte register and sign extend the value the rest the register load byte place the byte address into the least significant byte register and sign extend the value the rest the register example little endian machine presuming contains the value gets the value xffffffee label store word write the contents register address label store word write the contents register address store word write the contents register address example the value xffffffee placed into the word memory address Branch all the branch instructions for MAL look just like the ones from SAL purpose Just sure that you use one that exists The only difference worth mentioning that the operands are required registers example beq branchtarget Compare the values registers and the values are the same then load the with the address branchtarget not then nothing and fetch the next instruction target jump target identical effect target but the implementation and execution are different wrt the machine code branch specifies offset added the current value the jump gives many bits address possible and the remaining ones come from the addition Arithmetic Logical Very much like their SAL equivalents except that all the operands are registers exceptions add Here sample MAL program this simple MAL program reads characters figures out which one alphabetically first and prints out register assignments the first character typed the user the second character typed the user temporary holds the value the larger character the address the newline character constant newline character constant data newline byte text start getc get characters getc newline print out newline putc sub figure out which larger bgez secondlarger add printresult secondlarger add printresult putc end done What has been ignored far how fit both opcode and address bit instruction first how many bits are needed for the opcode the number unique patterns given bits the problem boils down deciding how many instructions are necessary and desired for computer arithmetic how many representations logicals shifting branches loads stores there are possibly enumerated here bits should enough That leaves left for bit address specification Oops For load store instruction need register specification also where the data come from That leaves only bits for address specification discussion addressing modes The original goal this discussion was figure out way fit bit addresses into less than bits The discussion going expanded bit talk about the different ways that instruction could specify where its operands are But first some way specify bit address BAD WAY Use more than word specify instruction words the first contains the opcode and other operands the second contains bit address This method defeats the whole purpose Keep the address needed register Then use register specification tell where the address The operand reached using the address within the register Other methods are variations this one specify registers The address obtained adding the contents the registers specify register plus small constant The address obtained adding the contents the register plus the constant Not mentioned the text Specify only constant offset The address calculated adding the constant the value the current Use whatever bits are available specify the least significant portion address The missing most significant bits can taking from the This implies that the operand address located the same portion memory the instruction being executed The MIPS architecture uses exclusively for address specification within load store instruction Address specification for branch instructions uses variation Many computers offer more ways getting operands These methods are called addressing modes load store architectures usually have VERY limited set addressing modes available memory memory architectures often offer LOTS modes This flexibility often forces these machines have variable length instructions Here are some addressing modes These names have come under common usage REMEMBER addressing mode really gives the information where operand its address instruction decides how use the address Register The operand the register Immediate The operand contained within the instruction itself Direct The address the operand contained within the instruction This means that extra bits will need specify complete address Register Direct The address the operand contained within register given This Base Displacement Also called indexed relative The address the sum the contents register plus small constant This Indirect Adds level indirection direct mode address specified within the instruction The contents the address are the address the operand variation might Register Indirect The initial address located register instead the instruction second look some MAL load and store instructions Load Store load word place the word address into the register example presuming contains the value gets the value aaee load byte place the byte address into the least significant byte register and sign extend the value the rest the register example little endian machine presuming contains the value gets the value xffffffee store word write the contents register address example gets the value then the value xffffffee placed into the word memory address MAL programming example SIMULATED MAL program print out the alphabet data str asciiz The alphabet register assignments the ASCII character code printed the ASCII code for the ending character text start str puts add gets ASCII code for add gets ASCII code for while bgt all done putc add while all done putc done Another MAL programming example SIMULATED MAL program print out the user entered integer data prompts str asciiz Enter integer str asciiz The result str error asciiz nInput error detected Quitting newline byte variables int array word array hold integer for printing text start str print prompt puts newline read characters and calculate the integer represented getc get chars beq got int newline char terminates loop bgt int error blt int error sub convert char digit mul int int digit add getc get chars int error str error puts end program got int the integer printed base address array holding the integer running address array element single digit the integer single character the integer print int str puts int array move more digits rem add div bgtz more digits sub bge more chars test for result putc putc print newline more chars add putc sub bge more chars end program putc done 