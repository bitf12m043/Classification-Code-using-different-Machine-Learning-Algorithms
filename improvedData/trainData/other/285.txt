MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Thursday Aug GMT Jason Hickey Papers CornellSome Cornell Papers Jason Hickey Semantics Objects Type Theory Forthcoming Tech Report also submitted POPL PostScript file Here are some formal definitions and theorems for the semantics presented the paper These are just the bare formalizations plan provide guide that makes easier walk the proofs Abstract present semantics object calculi type theory This interpretation serves provide solid mathematical foundation for object oriented programming The calculi consider support self application method selection functional method update and subtyping with method subsumption Our interpretation provides this support without the need for recursive types represent Self and provides new analysis objects where the requirements for subsumption are expressed directly the method types Jason Hickey Formal Objects Type Theory Using Very Dependent Types PostScript file Abstract this paper present extension basic type theory allow uniform construction abstract data types ADTs having many the properties objects including abstraction subtyping and inheritance The extension relies allowing type dependencies for function types range over well founded domain Using the propositions types correspondence abstract data types can identified with logical theories and proofs the theories are the objects that inhabit the corresponding ADT also have the slides from talk PDF slides are better but you don have Acrobat here are PostScript slides John Leary Miriam Leeser Mark Aagard and Jason Hickey Non Restoring Integer Square Root Case Study Design Pricipled Optimization PostScript file Abstract Theorem proving techniques are particularly well suited for reasoning about arithmetic above the bit level and for relating different levels abstraction this paper show how non restoring integer square root algorithm can transformed very efficient hardware implementation The top level Standard function that operates unbounded integers The bottom level structural description the hardware consisting adder subtracter simple combinational logic and some registers Looking the hardware not all obvious what function the circuit implements the top level prove that the algorithm correctly implements the square root function then show series optimizing transformations that refine the top level algorithm into the hardware implementation Each transformation can verified and places the transformations are motivated knowledge about the operands that can guarantee through verification decomposing the verification effort into these transformations can show that the hardware design implements square root have implemented the algorithm hardware both Altera programmable device and full custom CMOS Jason Hickey Formal Abstract Data Types PostScript fileAbstract Current constructive type theories are powerful systems for describing mathematical objects with complex dependencies between types and computational values making them expressive enough encompass large ares mathematics and programming However the body formal knowledge the type theory expands the problem managing mathematical domains and their proofs becomes increasingly significant Though the objects the theory are formal the domains are not this paper show how apply the methods formal data abstraction the organization the mathematical domains the process expand the tools data abstraction include reusability and namespace organization providing environment that can used for defining objects within domain for organizing domains within type theory and for organizing theories within system This environment will require extending the expressivness inductive definitions within the type theory include the dependent characteristics type theoretical domains Note This also contains summary the NuPRL type theory Appendix MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Thursday Nov GMT New Unity This directory contains chapters from manuscript Jay Misra revising the UNITY theory They not present completed work and should viewed such however they present new results and are worth exploring for anyone with interest UNITY These files are for uncommercial redistribution only They may not altered any form without permission from the author Mail comments questions psp request utexas edu The following four chapters are available Safety Progress Composition Closure The file SafetyProgress contains unpublished journal article combining the safety and progress chapters but omitting the exercises This might good place start reading about the revised UNITY theory Date Tue Jan GMT Server NCSA Content type text html Last modified Wed Dec GMT Content length Recent Awards and HonorsRecent Awards and Honors CRA Award for Outstanding Male Undergraduate Amit Sahai ACM Computing Awards areas Honors Awarded FacultyCS Alumni Leading Academic Institutions EECS Admissions Help WebTeam Berkeley Edu Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Oct GMT Content length htmlCS Fall Program due Monday October before Purpose learn how display the MIPS RISC internal representation characters integers and floating point numbers practice using the logical and shift instructions SAL Program description Write SAL program that reads four characters and stores them bit word then prints out the word hexadecimal next reads floating point number then prints out the bit patterns for the fields and and finally reads integer then prints out the bit complement form the integer Sample run Enter characters Char Enter floating point value Enter integer Algorithm Use getc read the four characters where type byte and shift each into bit word you read them Write print procedure that accepts the word input prints the and then prints out eight hexadecimal digits Use get read the floating point number where type float Copy the floating point number integer variable and then print the three fields the floating point number with one space between the fields Note the get instruction when used variable type float automatically stores the variable IEEE single precision FPS format Use get read the integer where type word then print the bits with one space between groups four bits Specific requirements for your program You may assume that you will receive bad data Assume the user types four characters followed return you need read the return and discard Assume the user enters valid floating point number followed return Assume the user next enters valid integer followed return Write and use procedure that prints subset the bits bit word given parameters that specify which bits Use this procedure for parts and the program implementation example this procedure might the bit word contained the value and the subrange bits print out was then the procedure would print the value Note that implied this implementation example little endian numbering bits Handing your program Turn your program the SAL source code running the script handin program sjust once where program the name the file containing your SAL source code printouts will turned The Grader will run your program several times using different test data 