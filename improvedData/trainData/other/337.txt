MIME Version Server CERN Date Sunday Nov GMT Content Type text html Content Length Last Modified Friday Dec GMT MENUS PGG MENUS PGG Mapping Environment for Unstructured and Structured Numerical Parallel Grid Generation Chrisochoides Fox and Joe Thompson Abstract MENUS PGG problem solving environment PSE for developing parallel algorithms that generate structured and unstructured static and adaptive grids meshes required for the implementation scalable parallel partial differential equation PDE solvers based domain decomposition methods Whereas the first generation PSEs for the numerical solution PDEs distributed memory multiprocessor systems are based the data mapping sequentially generated grids and support only the data parallel programming model MENUS PGG generates and maintains grids the processors parallel distributed systems and combines the most valuable aspects the data parallel programming model with the flexibility the task parallel programming model MENUS PGG assumes machine model that consists homogeneous and heterogeneous clusters processors operating distributed address space implemented remote memory modules via message passing through high speed interconnection network The major contribution MENUS PGG should the reduction the pre processing overhead required the data parallel PDE solvers and the efficient maintenance the distributed data structures that support and refinements present preliminary results indicating that the parallel grid generation results substantial reduction the pre processing overhead needed for the solution the data mapping problem MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Wednesday Dec GMT Software PageSoftware DistributionsFollowing list software distributions each entry consists description the distribution and hypertext link the distribution Related Web Pages UTCS General SSGRG Title Page SSGRG Publication PageP Software Distribution GenVoca data structure compiler Written Jeff Thomas Don Batory and Bart Geraci Manuals Distribution set manuals describing the features and syntax Written Don Batory Bart Geraci and Jeff Thomas GNU make Required for Written the Free Software Foundation textual layout editor for specifying GenVoca domain models Written Don Batory Genesis extensible DBMS Written Don Batory Jim Barnett Jay Roy Steve Benz Dreck prototype design rule checker for GenVoca domain models Written Don Batory and Bart Geraci Last modified December Don Batory batory utexas edu MIME Version Server CERN Date Wednesday Jan GMT Content Type text html Content Length Last Modified Tuesday Nov GMT Paul Sivilotti Resume Paul Sivilotti Caltech Pasadena paolo caltech edu http www caltech edu paolo Education Expected June Computer Science California Institute Technology Thesis Topic Correctness Distributed Object Computations Advisor Mani Chandy June Computer Science California Institute Technology Thesis Title Verified Integration Imperative Parallel Programming Paradigms Object Oriented Language April Computing Science Mathematics and Biochemistry Queen University Kingston Ontario Canada Awards IBM Computer Science Fellowship Best Paper Award High Performance Distributed Computing Software NSERC Science and Engineering Fellowship fewer than awarded Canada Prince Wales Prize Hon Mention top graduating student Faculty Arts and Science Medal Computer Science top graduating student Department Computer Science Arts and Science Undergraduate Scholarship contribution university community and academic excellence NSERC Summer Research Fellowship Digital Equipment Canada Award Excellence top junior student Departments Computing Science and Alumni Advisory Award Mel Williamson Foundation Award Dean Honour List years James and Margaret Daley Scholarship Queen Tricolour Scholarship Classes present Classes toward Engineering Management Certificate Industrial Relations Center California Institute Technology Research Interests Distributed object computing Interface and specification languages Formal methods program development Parallel computing Refereed Publications World Wide Distributed System Using Java and the Internet Mani Chandy Adam Rifkin Paolo Sivilotti Jacob Mandelson Matt Richardson Wesley Tanaka and Luke Weisman Proceedings the IEEE International Symposium High Performance Distributed Computing HPDC Syracuse Aug won Best Paper Award Toward High Confidence Distributed Systems with Java Reliable Thread Libraries Paolo Sivilotti and Mani Chandy Proceedings the International Conference Systems Engineering ICSE Las Vegas July Verified Integration Parallel Programming Paradigms Paolo Sivilotti Proceedings the IEEE International Parallel Processing Symposium IPPS Cancun Mexico April Research Notes Composing Processes Using Modified Rely Guarantee Specifications Rajit Manohar and Paolo Sivilotti Technical Report Caltech June Reliable Synchronization Primitives for Java Threads Paolo Sivilotti and Mani Chandy Technical Report Caltech June Tutorial for Paolo Sivilotti and Peter Carlin Technical Report Caltech and CRPC Verified Integration Imperative Parallel Programming Paradigms Object Oriented Language Paolo Sivilotti Master Thesis Technical Report Caltech and CRPC June Work Experience IBM Summer Research Internship Watson Research Center Summer Teaching Assistant California Institute Technology Algorithms Mani Chandy Programming Paradigms Beverly Sanders Information Theory Yaser Abu Mostafa Research Assistant Canadian Communications Research Center Summer References References are available upon request Paul Sivilotti Computer Science Department California Institute Technology Pasadena Date Tue Nov GMT Server NCSA Content type text html Last modified Thu Oct GMT Content length Programming Assignment IIICS Programming Assignment III CPU Scheduling Due October the start class ContentsIntroduction Running the Simulator System OverviewProgram ModificationFilesCodingExperiments Report Grading Handing Introduction program has been written that simulates short term scheduler and allows you experiment with various scheduling policies Your assignment measure and analyze the performance several policies modifying the simulation program necessary Running the Simulator The current version the program simulates Round Robin scheduling but constructed allow easy modification for other scheduling policies The program expects the following command line java Proj data file quantum Proj Name the main class etc Starts verbose mode for debugging Verbose mode causes the simulator print debugging output the screen The more the command line the greater the verbosity Starts trace mode Trace mode causes the simulator maintain record all significant events data file Name the file containing the trace data used the simulation quantum Length the time slice used Round Robin scheduling System OverviewThe Simulator essentially consists Jobs Devices and Schedulers all coordinated single loop code Job customer services process that needs use system resources during its execution Device represents resource the system this simulation the devices available job are the CPU and the disk There also clock device and pseudo device that interrupts whenever new job arrives the system Scheduler coordinates access device queues Jobs that are waiting use device and will choose which job the next access The overall execution the simulator occurs like this Jobs arrive the JobArrival device and are entered into the system job lifetime consists alternating periods using the CPU called burst and performing The Main Loop responsible for moving jobs around the system sends them scheduler takes the next job from scheduler and starts and stops jobs running device The Disk Scheduler and the CPU Scheduler decide which job should the next run their respective devices They also buffer jobs that are waiting run but have not yet been given access The clock device used enable preemption more this later For those who would like more detailed description the system more than necessary this assignment you can either read the comments the code itself click here Program ModificationFor this project you are going focusing almost exclusively the CPU Scheduler object shown above The provided simulator performs Round Robin scheduling You are create separate versions the simulator implement each the CPU scheduling algorithms described below Modify one copy the program simulate the Shortest Job First SJF algorithm described Section the text The next process run the one with the smallest burst Use FCFS break ties Because this simulation you can cheat looking the burst length process when deciding which process run next real system that information not available the scheduler This policy non preemptive Newly arriving processes not affect the currently running process Modify another copy the program implement preemptive version SJF which called Shortest Remaining Time First SRTF this algorithm the currently running process the one with the least time left its current burst For your final version the program modify the SJF algorithm use predicted burst length will call this policy Predicted Shortest Job First PSJF You can predict the burst length using exponential average the measured lengths previous CPU bursts The formula follows atn TnT predicted burst length past measurement actual burst length What the formula says that the predicted value the next burst length will dependent upon both the last measured burst length and the last predicted burst length The weight the previous two measurements have calculating the new prediction contained then they will both contribute equally then only the last measured burst time used predict the next burst time Experiment with different values for this section implement PSJF you will have modify the Job class record little more information You should have four versions the simulation program when finished the original one for SJF one for SRTFand one for PSJF Files The files you will need can found public src They include all the files for the simulator the data file and Makefile Copy all these files into one your directories and type make run the Round Robin version the simulator CodingThe easiest way attack this assignment modify copy the provided Round Robin scheduler RRScheduler java SJFScheduler java Don forget change all occurrences RRScheduler SJFScheduler the copy and the Makefile You should also change the following line the file Sim java your Scheduler used the simulator instead the default Sim java cpuScheduler new RRScheduler becomes cpuScheduler new SJFScheduler The methods RRScheduler which you will have modify for your assignment include boolean add Job timeLeft adds new job wanting service The second parameter the amount CPU time remaining until the job currently using the CPU will next finish the CPU currently idle This method should return true the scheduler would like preempt the current job Job remove returns the job that the scheduler would like run next and removes from the queue boolean reschedule int timeLeft returns true there reason stop the current process and start another called mainLoop clock interrupt and essential implementing preemption returns true the mainLoop will take the current running process off the CPU and return the CPU queue calling add and then ask for another job run calling remove add the timeLeft parameter the amount CPU time remaining the current burst the currently running job job running You may also need look the Job class One useful Job method int nextBurst which returns the burst time remainingExperimentsCompare the performance the four scheduling algorithms Also compare the performance for various values the parameters quantum for and for PSJF Note that quantum very large becomes First Come First Served FCFS and quantum approximates Processor Sharing Compare the behavior and performance each the policies Discover the strengths and weaknesses each them Compare the performance results you observe with the predictions discussed class and the book You must supply quantitative data support your conclusions You should approach this portion the assignment you would approach laboratory assignment physics course Use the scientific method You should have some hypotheses that you confirm reject based behaviors observed during well planned organized experimentation Give careful thought the correct choice parameters for the programs Try few trial runs with various parameters print out the results and home and think about the results These preliminary results should help you decide better parameters for second round trials Remember not the quantity but the quality data that dictates the quality the experiments the program not printing out all the statistics you would like see feel free modify produce better output You may find additional statistics reporting code can help explain some the behavior you observe ReportYou are prepare report describing the results your experiments Again approach this report you would approach physics laboratory experiment report You should carefully describe what experiments you did and what the results showed you about the different scheduling policies want see correlation between the experiments you run and the conclusions you draw You must supply quantitative data support your conclusions The report should not more than three typewritten pages excluding tables graphs etc GradingYou grade will determined follows Report experiments conclusions presentation Implementation correctness style documentation You must work two person groups for this project Handing You should bring your report and all the javafiles you modified with your additions clearly detailed your code separate file class the day the project due You should also create four directories your hand folder one for each your scheduler versions Into each directory you should place copy the files needed run that particular scheduler java files trace file well redirected copy the output from one execution short README file containing the names you and your partner can just placed your hand folder The hand directories for project can found public handin project always points will deducted for code that fails satisfy the minimal criteria for comments and structure specified the hand directions for project Copyright Marvin Solomon All rights reserved 