Date Mon Dec GMT Server NCSA Content type text html Last modified Fri Dec GMT Content length Project Interdependent Particle Systems Interdependent Particle Systems Justin McCune Introduction Particle systems have been used model variety fuzzy objects such water fire grass fireworks clouds smoke and others work that aware the particles within the system interact with each other Instead simulate the realities which they model the designers the particle system use specific starting configurations groups particle systems and introduce torques spirals and other effects the particle system Sometimes simulate waterfalls and other fuzzy objects where collisions are necessary the particles are checked for collision against small number external objects and are bounced off the objects with which they collide Independent particle systems therefore not experience pressure gradients not collide with particles within their own system and only approximate the reality which they represent The results reported within this paper report particle systems that interact with their neighboring particles The motivation behind this research attempt allow the interaction two more particle systems and more produce more realistic model particle systems Section reviews the principles independent particle systems section presents the problems and methods used this research section discusses the results section presents the conclusion and possible extensions while section presents the references Review Independent Particle Systems Particle systems can usually characterized the following properties lifetime velocity color transparency size shape Almost all particles have lifetime velocity and color where the remaining properties are decided upon the modeller Over the lifetime the particle the particle will change some all its attributes the color might fade from white red before dies Velocities particles can increase decrease alter directions due gravity collision with some object The other characteristic particle systems that there are large number particles Water technically comprised billions and billions molecules and particle system likewise represents what models with many many particles though not billions and billions The typical particle system comprised thousands particles where this could range from few thousand hundreds thousands depending upon the resolution needed and the size the desired image Particle systems are used model fuzzy objects such fire water and other dynamic systems that are difficult model with conventional methods mainly due the wide variations color and shape even for just one moment time provide well known example particle system take look the Genesis Effect Star Trek The Wrath Kahn particle system used model first explosion and then the spreading fire around planet The Genesis Effect used thousand particles throughout the course the animation Interdependent Particle Systems interdependent particle system particles can change based the presence number and proximity neighboring particles real systems comprised molecules large densities tend disperse until equilibrium reached Molecules also exchange energy and that energy can directly affect the color the light that the molecule emits reflects With interdependent particle system becomes possible simulate these effects For instance take fire particle system and water particle system and mix parts the systems together the result steam interdependent system fire and water interacting produce steam was the goal and motivation this research The obvious and most difficult problem when dealing with interactive particle system the large number particles determine collision engergy exchange other interactive effects any particle the particle either must search sum the effects all its neihgboring particles The problem most simply and correctly formulated squared complexity With hundred thousand particles however moving and changing squared particles per frame animation will take too long simplification needed make the system develop more quickly and easily justified and arrived when examining real systems all systems are concerned with particle dependency its neighbors usually proportional less than the inverse square the distance between and the neighbor With thousands particles within system likely that much less than hundred particles will actually contribute significantly the motion energy level any particle Thus there but determine what significant contribution the distance where the average particle contribution will less than significant and which particles are within that distance The problem simplified but determine which particles are within the distance without any other information than given the particles themselves would still squared operation Therefore logical introduce into the model the concept bins Space divided into regularly spaced equal volume bins Each particle put into the bin corresponding its location space Thus there are two large lists one list all the particles and the other arranged set bins containing pointers the appropriate particle Ideally each bin would any dimension least the size the distance whereby particle judged possibly have significant contribution determine the contributions the neighbors particle the program would need search only the other particles within the bin that particle and all the particles within the immediately neighboring bins deal with particles located near the boundaries bin Since all particles within the threshold distance are guaranteed within the space searched particle guaranteed modified all significant contributors Though this would work impractical implement due memory limitations The ideal bin size would generally only three four times the size particle However account for all the places particle might move during the progression its life there will large percentage bins that most the time are empty Given this and the fact that there are dimensions which must have bins allocated result very large numbers bins For instance taking hundred bins per each dimension results the need for million bins more bins than particles hundred bins would also inefficient for many parts the particle system where there were large densities particles again the lists searched would the hundreds per particle negating the effectiveness using bins Therefore larger number bins necessary but using more bins would quickly exhaust the resources almost any computer solve this problem must simplify the model even further losing much the accuracy that could obtained with the previous methods Each bin now allowed hold only number particles temperature some other most important data element Instead containing variable size list particles within the bin contains set small number informational elements This results the loss alot useful information and will result rough approximations that lose the accuracy earlier models However interdependent reactions are still possible because there some information available about any particle local region space and its immediately neighboring areas space The problem transformed from one searching through thousands particles one communication and accuracy containing only such simple information spatial relation lost well specific data and most importantly identity Simulation collisions movement and temperature exchange now possible only probabilities and longer deterministic For example determine the collision particle moving through space with another particle must bound the maximum number particles any given region space particle attempting move through bin then collision occurs with probablility equal the number particles within the bin divided the maximum number particles allowed the bin For example the maximum number particles per bin and there are particles the bin that particle attempting move through then there rds chance that particle will collide The communication issue also problem that must resolved the efforts research fire and water combining form steam the appropriate physical model each particle exchanges temperatures and sometimes steam created and sometimes the fire extinguished Since the identity any particle within bin lost particle that moves from bin another bin where should change state and likewise decrement the opposing particles states will not have any specific particle with which interact Therefore some means communicating the change state necessary For example consider water particle moving into bin full fire particles With all the surrounding fire particles the water particle should transform steam But the fire particles should have their temperatures altered well should have some proportion fire particles die account for the energy exchanged The bins therefore must utilized pass messages particles that should die undergo loss energy One set particles choosen perform the transition and issue the appropriate message the other choosen listen for the message and take the appropriate action the fire and water example the water the one which performs the tansition steam and passes the message while the fire particles are the system that reacts the passed messages One possible means message passing and the one utilized this research use the number particles per bin the means message passing Temperature given particles and motion vectors can calculated based these figures differentiate water from fire water given negative count Where obvious that two types particles are present certain bin assumed that fire extinguishes water with certain ratio fire particles water particles the water particles transform they decrement the number particle bins the number fire particles extinguished Before the fire particles move again they note the change and that percentage particles will average die For example take particle moves into bin and after all other fire particles have moved notes that there are particles including itself the bin During the water movement portion the frame water particles move into the same bin and are considered exchange heat and vaporize with the fire particles Say that takes two fire particles vaporize one water particle then fire particles are extinguished while new steam particles are created The final bin count steam counted neutral particle The final position all particles the frame output and processing for the next frame begins Each fire particle searched for those particles that should have died When particle reached any the fire particles the bin notes that there are now particles the bin when their used Thus out the particles must have died The particle picks random number between and and number less than ths number and the particle dies can happen the opposite way well that fire particle moves into bin populated water particles and should extinguish itself well The water particles also need know their state after all water particles have moved that they will also killed off the appropriate situtation byproduct the fact that probabilities are used kill particles that the bin counts are accurate only the average time passes however local error and changes the system based the error could accumulate Therefore necessary recount the number particles any type the end each movement phase This some ways doubles the time required animate any interacting particle system but still linear time and better than squared Thus the steps required interact particle systems with message passing can generalized follows Remove dead particles type from the particle system Move the type particles After all type particles have moved each type particle notes final state Remove dead particles type from the particle system Move the type particles After all type particles have moved each type particle notes final state Results Though the above presented method solves many problems there are few that are more difficult side step particular conservation momentum difficult maintain simulating collision easily done using probabilistic method and closely approximating reality should done through every bin which the particle moves However when collision occurs the only particle that can affected unless message passing again used the source particle This problem encountered during the research can either side stepped ignoring interim bins completely done this research perhaps can have damping factor applied proportionate the number collisions that might have occurred Another difficulty that there are even more parameters that must tweaked into place produce image that approximates the reality and doesn approximate some alterante reality where flames progress upwards very defined bands for instance implementation interdependent fire system was investigated and can seen the results below The fire particle system image was originally created with particle system attempted use particles the provided MPEG The particles are created during frames and after that are created from the particles that have already died The image was rendered using with color map and opacity map The animation took approximately minutes create running RISC processor with memory However has been noticed that due the bin limitations many the particles unused and essentially only slightly more than particles are being used Using only particles due the current initialization sequence the program slightly less full animation produced but comparable the original and only takes minutes create the provided animation particle temperature based the number particles within the same region space while motion vector determined based upon the density particles immediately within its own space well those bins that immediately neighbor the space damping factor applied the motion the plane that produces circular cross section when particles are collided whereas the vertical direction changes motion are based temperature Overall there are parameters including bin sizes that may modified also important note that the bin size selected too large visible artifacts will generated The animation also present MPEG There are some artifacts present the animation the flame that not quite yet sure why they are there the first frame the animation provided top view provided possible see from this top view criss cross pattern that obvious artifact from using the bins and some combination the motion mechanism although unsure why this the case Also the flame tends pulse from one frame the next which something that would preferably not occur unsure what causing the oscillatory motion There another benefit using bins with interdependent particle systems parallelization opposed passing particles and all their associated information across bin boundaries only the information contained the bins need passed This can save given the amount information each particle must pass well the fact that there can good number particles per bin more than times the amount message passing that needs done Thus should possible parallelize the application One other effect should noted independent particle systems groups particle systems can lessened local processing abandoned altogether once sufficient information for given area the output area has been determined there reason use thousand particles represent section the screen only pixels pixels wide interdependent particle systems this not the case The entire process the particle system dependent upon the presence and number its nearest neighbors stopping part the particle system will eventually translate its effects neighboring parts the particle system that are still moving with unknown consequences Thus some the optimizations that are possible for independent systems are not necessarily possible with interdependent particle systems Conclusions This work has demonstrated that interdependent particle system approach feasible and that possible use some the attributes the particle system itself model fuzzy objects model has been proposed allow the interaction two particle systems and could possibly extended more Many aspects this work remain unexplored Future work will finish the investigation the proposed model interact two particle systems result third There are many aspects interdependent particle systems where research could still done For instance investigating the interactions used independent systems achieve the flickering flame adding spirals clustering particles trying simulate these effects adding air particle system the field simulate the convection air Starting configurations that change over time and are not based some random distribution some preset starting configuration but perhaps based preset data volumes would also interesting see the results wall fire some other configuration flames modeled parallel processor References Particle Systems Technique for Modeling Class Fuzzy Objects William Reeves ACM Transactions Graphics Vol Particle Animation and Rendering Using Data Parallel Computation Karl Sims Computer Graphics Vol MIME Version Server CERN Date Friday Jan GMT Content Type text html Content Length Last Modified Wednesday Mar GMT Introduction CODEIntroduction CODECODE TutorialOverview CODE visual parallel programming system can thought framework allowing user compose sequential code into parallel program The fundamental idea that users create parallel programs drawing and annotating graphs graph diagram that consists nodes represented icons CODE and arcs that interconnect the nodes Such diagram shows computation communication structure Nodes represent computations and arcs represent the flow data from one computation another Parallel programs are then created composing nodes into graphs users draw the nodes and then interconnect them with arcs Here the standard way creating program with CODE first the user draws the graph that shows the parallel program communication structure Then the user annotates this graph filling forms that describe properties the nodes and arcs the graph For example the user must specify the sequential computation node performs Finally the user runs the program which CODE translates compiles and executes Simple Example When user first runs CODE empty window appears The graph may then drawn this window CODE graphs can contain several different node types which have different meanings and uses Each different node type represented different icon The most important type node computation node which represents sequential computation These nodes may composed form parallel programs drawing arcs which define the data flow between them The figure below shows complete CODE program that uses only computation nodes and arcs This program integrates function over interval dividing the interval half and integrating over each piece separately The results are added form the final answer The program consists four computation nodes The arcs represent data created one computation and needed another When the program runs first executes fires the computation node called Split Interval which divides the interval half and sends the endpoints the sub intervals each the Integ Half nodes These nodes integrate function over the interval they receive from Split Interval They can run parallel with each other since there are arcs between them The node Sum and Print waits for the results these two integrations and then prints their sum Annotating the Graph Drawing the graph the first part creating CODE program annotating comes next Where the graph defines the parallel structure the program the annotations define aspects the program like what computations are performed under what conditions node may fire data types defined for the program etc Annotations are added filling out each object annotation form The figure below shows the annotation form for the computation node Split Interval Note annotation forms are displayed using the information tool the the upper left hand corner the screen above and clicking the CODE object Notice that the Start Node option selected This means that this node the first one executed when the program begins There only one start node allowed Likewise only one Stop Node allowed and when fires the program execution ends The sequential computation defined this node part the Specification This specification also includes the mapping between data the incoming and outgoing arcs and local data used the computation well conditions under which the node allowed fire will discuss the details specifications the next section home pagespecificationsIntroduction CODE emery utexas edu Last updated August Date Wed Jan GMT Server Apache Content type text html Content length Last modified Mon Apr GMT Cappello PresentationsPresentations This list presentations other than those given conference with published proceedings each item the presentation was given the author whose name emboldened Invited Peter Cappello Unifying Systolic Design with Linear Transformations Spacetime Electrical Engineering Systems Department Seminar University Southern California Los Angeles Feb Invited Peter Cappello Unifying Systolic Design with Linear Transformations Spacetime Office Naval Research Workshop VLSI Architectures for Special purpose Machines Ada Conference Center Catalina Mar Invited Peter Cappello Mapping Gaussian Elimination onto Multiprocessor Architectures Computer Science Department Yale University New Haven Aug Invited Peter Cappello Systolic Design for Digital Signal Processing Symposium the Impact VLSI Signal Processing Communications Research Laboratory McMaster University Hamilton Ontario CANADA Oct Selected Peter Cappello Solving Dense Linear Systems Hypercube Automaton SIAM Conf Parallel Processing for Scientific Computing Norfolk Nov Invited Peter Cappello FIR Filter Tissue Office Naval Research Workshop Ultra Submicron Architectures Pasadena Dec Invited Peter Cappello Systolic Design for Digital Signal Processing IEEE Philadelphia Section Seminar Systolic Parallel Architectures for Signal Processing University Pennsylvania Apr Invited Peter Cappello Languages and Tools for Systolic Computation Office Naval Research Workshop Systolic Algorithms and Architectures Hilton Head Dec Invited Peter Cappello Representing Systolic Computation Dept Electrical Engineering UCLA Nov Peter Cappello New Bijection between Natural Numbers and Rooted Trees SIAM Conf Discrete Mathematics San Francisco June Invited Peter Cappello VLSI layout for Dadda Multiplier Computer Engineering Seminar University Southern California Los Angeles March Peter Cappello and 