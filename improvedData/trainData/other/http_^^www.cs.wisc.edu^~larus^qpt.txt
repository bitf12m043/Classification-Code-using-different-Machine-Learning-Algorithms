Date Tue Nov GMT Server NCSA Content type text html Last modified Tue May GMT Content length QPT QPT Quick Program Profiling and Tracing System QPT exact and efficient program profiler and tracing system rewrites program executable file out inserting code record the execution frequency sequence every basic block straight line sequence instructions control flow edge From this information another program QPT STATS can calculate the execution cost procedures the program Unlike the Unix tools PROF and GPROF QPT records exact execution frequency not statistical sample When tracing program QPT produces trace regeneration program that reads the highly compressed trace file and regenerates full program trace When profiling QPT operates two modes slow mode places counter each basic block program the same manner the MIPS tool PIXIE quick mode QPT places counters infrequently executed subset the edges the program control flow graph This placement can reduce the cost profiling times Since there such thing free lunch quick profiling requires more program analysis and consequently slows QPT and QPT STATS The additional cost instrument program and report results however small and quickly gained back when profiling long running programs Like other systems such pixie QPT can rewrite executable file record the sequence instruction and data references However QPT uses abstract execution reduces the overhead tracing times program untraced execution cost QPT also records number semantics events such loop entry and iteration function entry and exit and memory allocation and deallocation that other systems not identify The original version this program QPT obsolete and has not been maintained for several years that time ran under DEC Ultrix DECStation MIPS processor and Sun SunOS SPARCstation QPT the new version QPT build EEL library for editing executable files EEL currently runs SPARC based machines SunOS and Solaris though other ports progress The machine specific code EEL and QPT collected few files Porting new machine requires couple months effort Documentation The algorithms QPT are described Thomas Ball and James Larus Optimally Profiling and Tracing Programs ACM Transactions Programming Languages and Systems TOPLAS vol July Abstract execution described James Larus Abstract Execution Technique for Efficiently Tracing Programs Software Practices Experience December QPT described James Larus Efficient Program Tracing IEEE Computer May Applications David Wood has develop cache profiler called cprof that uses traces from QPT report the cache misses caused statements program CPROF available part WARTS Obtaining QPT QPT available part WARTS QPT and QPT are distributed with the full source and small amount documentation QPT and QPT are copyrighted and distributed under the terms the WARTS license copy the license available ftp wisc edu ftp pub warts license can obtained contacting the address below James Larus Computer Sciences Department West Dayton Street University Wisconsin Madison larus wisc edu Last modified May James Larus larus wisc edu 