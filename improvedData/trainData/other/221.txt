MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Wednesday Aug GMT The Net Packet FilterThe Net Packet Filter Extension Net over Fast EthernetMasters Engineering ProjectAugust Jonathan Barber barber cornell edu Professor Thorsten von EickenDepartment Computer ScienceCornell University Abstract Net high bandwidth low latency network communication protocol that can deliver parallel computing horsepower network PCs this case the PCs are connected via fast ethernet switch its original implementation computers connected through Net communicated through simple communication scheme The Net Packet Filter acts extension the original implementation giving Net the capability communicate using open standards Overview The job the Net Packet Filter UPF demultiplex coming packets their corresponding Net endpoint destinations designed demultiplex both connection oriented and connection less packets depending the protocol field combinations the case connection oriented packets channel specifies endpoint endpoint connection connection from one process another process connects process then can only communicate with and can only communicate with that channel wants communicate with then must open separate channel the case connection less packets program can open broadcast multicast channel Any other process listening that channel can receive packets sent from Design Goals The Net Packet Filter was designed with two goals mind Above all has fast The ability communicate over open standards useless Net can only normal network data rates The Packet Filter topology has simplistic and easily expandable New filters cannot been written pseudo assembly and interpreted New filters must programmed into the existing system however the packet filter simplistic structure allows for certain degree creativity the part the programmer thereby easing the task the programming itself The subsequent sections this document discuss detail the different components and structure the Net Packet Filter with eye towards demonstrating that the design goals have been met Implementation The current implementation the date this document allows for distinct filter types They are Raw Net the simple communication scheme utilized the original version Net Raw Ethernet Net purely the data link layer TCP and UDP Elementary Components The Net Packet Filter Directed cyclic Graph DAG made two basic components The Cell this data structure that contains twelve bit word entries This the Packet most basic structure The cell used for storing channel information such channel field values such port numbers and addresses and used pointer other cells and hash table Cells can chained together form doubly linked lists For complete details and usage information cells UPF click here The Hash Table provided with hashing function these tables are used spread out Net channels over range HASH SIZE Each table contains HASH SIZE pointers cells These cells already mentioned can chained together linked list The combination cells and hash tables creates hashing data structure with chaining which the way which hash tables are utilized the current implementation UPF Figure Elemantary UPF Components Together cells and hash tables are connected together form directed cyclic graph DAG When packet comes off the ethernet wire each protocol the composite packet header broken down into fields These fields are then compared information stored the cells matches are found follow the appropriate path through the DAG The next section breaks down the current architecture the Net Packet Filter and discusses the protocols currently supports Protocol Hierarchy the Net Packet Filter DAG The current implementation supports protocols two which are open standards The following protocols are broken down has follows Raw Net The modified version Net devtulip backwards compatible with the original implementation Net That packets can demultiplexed Raw Net channels based the following fields Net Code Net Port number Figure Raw Net Ethernet Header These types channels are not part the UPF system the event that Raw Net channel detected the UPF system passed and the packet demultiplexed based strictly the Net port number the ethernet card running promiscuous multicast mode then only the Net Type and Net Port identify endpoint channel These channels are not guaranteed unique Raw Ethernet This protocol similar the Raw Net protocol that strictly data link layer protocol Packets are demultiplexed their corresponding endpoint channel based the following fields Ethernet Source Addr Raw Ethernet Type Figure Raw Ethernet Header The combination these two fields uniquely specify endpoint unless the Source Addr ethernet multicast broadcast address The ethernet type can any bit value provided that not reserved field the ethernet type and reserved type the case where the only open channel consist Raw Net not the DAG Raw Ethernet channels the DAG merely linked list ETH TYPE cells see the Cell Specification Page Figure Raw Ethernet the UPF DAG When Raw Ethernet Packet received fields the ethernet source and raw ethernet type are compared with the corresponding cell values for each element the linked list until match found For the case which large number Raw Ethernet channels are open performance may improved replacing this linked list with hash table TCP Transmission Control Protocol Internet Protocol This composite point point protocol The outer protocol and the inner TCP refer this single filter only both protocols together identify endpoint reality they are separate protocols The combination the following fields uniquely identifies TCP endpoint Ethernet Type Ethernet Protocol Version Protocol Transmission Protocol Protocol specifies TCP Protocol Destination Port TCP Protocol Destination Address Protocol Source Address Protocol Source Port TCP Figure TCP Composite Header Notice that fields from three different protocols uniquely identify channel This corresponds traversal the packet filter DAG UPF designed fast This means that the interests speed want drop packet from contention soon realized that the packet will not demultiplex any endpoint the preceding fields know that the packet not the ethernet type field does not match optimization the ethernet cell always located the head the Ethernet level linked list Since demultiplexing expensive this results just single ethernet type check this point now know the packet type the next level the DAG check the protocol and the version number the protocol defined not TCP UDP this case TCP the version number does not match the filter version number the packet dropped Again this results traversing linked list protocol cells its referred the source code PROTO cells until match isn found Figure the Protocol Level the UPF DAG match found then descend another level into the DAG this point drop the packet the destination port TCP Protocol does not exist the filter Since there can many possible ports perform lookup into hash table The hash table itself connected the PROTO cell corresponding the TCP protocol The hash function defined within the source code the function hash func port Since possible for multiple channels exist the same combination might necessary traverse hash chain CHANNEL HASH cells These cells contain the destionation port number and pointer Channel hash table Figure the TCP Channel Hash Level the UPF DAG The remaining fields Source addr Destination addr and TCP source port uniquely identify TCP channel hash function then used defined the function hash func chan the source code hash into table connected the CHANNEL HASH node Again there can more than one node connected single index the hash table The hash function meant spread out the different channel combinations that chain CHANNEL nodes will not have walked Figure the TCP Channel Level the UPF DAG match found the CHANNEL linked list demultiplex the packet the corresponding endpoint summary demultiplexing TCP packets requires traversing the DAG through protocols Note that the current implementation does not support fragmentation This would natural extension TCP well UDP UDP User Datagram Protocol Traversal the DAG for UDP nearly identical that TCP The difference between the two protocols that UDP can connection less while TCP always connection oriented This means that its possible establish not only unicast channels but multicast and broadcast channels well Traversal the DAG for UDP requires the same seven fields that were used TCP The difference that channel setup time unicast multicast broadcast channel type can selected the user creates unicast channel then traversal the DAG occurs exactly did for TCP except that the transmission protocol now UDP Choosing open multicast channel results creating new level the DAG Graph traversal proceeds did for TCP all the way the CHANNEL node UDP the CHANNEL node contains cast field which set either UNICAST MCAST BCAST the field MCAST then descend level linked list MCAST cells Figure the UDP Mulitcast Level the UPF DAG Each node this linked list corresponding CHANNEL with the same address information but with pointers different channels the event that multicast CHANNEL matched then walk the entire MCAST linked list and demultiplex each MCAST cell the CHANNEL node type BCAST then must demultiplex every active channel this port dest port This results traversal every hash chain for every index the hash table connected the CHANNEL HASH node The packet then demultiplexed every unicast and multicast channel open the port another broadcast channel encountered ignored since broadcast already taking place Multicast channels result demultiplexing many channels This involves copying the entire packet into multiple regions user memory for many multicast channels that are open Broadcast channels result even poorer performance since the packet must demultiplexed every open channel the port general multicast and broadcast channels may useful but they incur severe performance overhead Wild Card Channels Both TCP and UDP composite protocols support wild card channels order demultiplex endpoint the minimal requirements specify that the ethernet type the Version number the transport protocol and destination port must specified The remaining fields destination address source address and the source port can remain specified they are declared WILD during channel creation The combination wild card fields results seven distinct wild card priority levels which are illustrated below Figure Channel Hash Table Priority Levels The combination only WILD source address forms the highest priority while the combination all WILDS creates the lowest priority Wildcard channels will only pick packets there matching channel from the next highest priority level This functionality built into hash func chan Each CHANNEL hash table partitioned into HASH ENTRIES indexed hash buckets During graph traversal packet reception packet cannot demultiplexed via the indexed hash chain then traverse each priority level the corresponding destination port matching wild card channel found UPF demultiplexes that channel and graph traversal ends not then UPF continues searching each next lowest priority level until they are all exhausted which time the packet can dropped Note that UDP Multicast and Broadcast channels are implemented wild card channels Since the channels are definition connection less the source address and source port fields are WILD The down side this setup that matching multicast broadcast channel requires exactly hash misses for the missed index and for the preceding wild card priority levels Net parallel program were rely heavily multicast broadcast this scheme may require alteration boost performance Using UPF with Net Benchmarks and Demonstration Programs You can obtain copy the UPF Net source tree saving this link The UPF code designed run Linux system over Fast Ethernet However should extremely portable any Net system running over Fast Ethernet This version has been tested and bench marked Linux using the Net kernel patch see the Net supporting documentation The source tree contains the following items The source code for the Net Packet Filter Extension dev tulip upf The modified Net device driver dev tulip devtulip for the SMC tulip Fast Ethernet Card User level interface library Net libunet libunet and some UPF user level interface routines for creating channels libunet conversion Program that demonstrates the functionality UPF Net test complex Several bench marking Programs minimum latency pingpong The completions stand for unet eth and for Raw Unet Raw Ethernet and TCP respectively These programs can also found under the test directory The supporting documentation this document can found the directory docs Performance Benchmarks The Net Packet Filter was evaluated using Mhz Pentium and Mhz Pentium connected Fast Ethernet Switch The programs pingpong unet pingpong eth and pingpong were used test the roundtrip times for sending messages using Raw Unet Raw Ethernet and TCP respectively forty byte packets were sent per test The following results were taken from several runs Roundtrip time for Raw Unet message Roundtrip time for Raw Ethernet message Roundtrip time for TCP message Raw Ethernet performed slower than Raw Unet TCP performed slower than Raw Unet and slower than Raw Ethernet Raw Ethernet performance was about expected Traversal the DAG not free and requires some cycles TCP performance little disappointing especially since the channel test was connection oriented and was the only channel open during testing However the significant performance drain could partially attributed the hash lookups implemented with the filter order demultiplex TCP channel packet must traverse through two hash table lookups its current implementation both hashing functions use modulo operator The modulo the hash function taken against the number available hash buckets The use the modulo operator incurs large expense and might explain significant portion TCP performance drain One way the hash functions can improved would replace the modulo operations with alternative similar operation order hash packet into one the available hash buckets Rather than use modulo could logically and the result the hash function with mask corresponding the log base the size the hash table This would perform function similar the modulo operation while enormously reducing the computational expense the operation There are undoubtably numerous optimizations one can make the packet filter enhance performance This left future work How About Adding New Filter UPF Each filter some combination cells and hash tables connected together meeting the second design goal the integration new filter UPF meant modular Each module requires least routines add Protocol routine dynamically add channel this prototype the DAG the filter has not been installed for this channel type then the filter also installed the add Protocol routine fails then the channel creation the point the error must done find Protocol this routine should very fast Its responsible for demultiplexing packets their endpoints deactivate Protocol this routine dynamically removes channel from the DAG and allocates any memory associated with the channel the channel the last channel its protocol then the entire protocol deactivated This routine important for long running processes where channels are created and destroyed based run time conditions Its important that all memory recycled and accounted for This routine not important for short running programs such benchmarks since the upf shutdown routine will activate the entire DAG data structure The current implementation supports different filters Raw Ethernet TCP and UDP For each segmented protocol there are exactly essential routines see the source code That the aforementioned routines exists for every module Actually there only one find Protocol the UPF system upf findchannel However this routine broken into case statements essentially breaking down the task demultiplexing composite headers protocols The designer new filter should feel free define there own cell types necessitated the new filter The designer should feel free modify the actual cell structure will improve the overall packet filter design and can also define new hash functions needed Memory Management All memory allocatation the UPF system chained together off pointer the tulip device structure new cells and hash tables are allocated new wastebucket structure added garbage collecting list wastebuckets Each wastebucket points towards the allocated structure Each structure turn points back the corresponding waste bucket call upf shutdown results traversal each wastebucket each bucket the data structure points allocated Since each structure points its corresponding wastebucket call upf deactivate results proper maintenance the watebucket linked list Other Possible Extensions UPF Througout this document some possible extensions UPF have been mentioned this section will discuss few more The current implementation UPF handles multicast and broadcast channels However order properly join multicast group process needs access multicast Ethernet address resolver The facto way doing this now via IGMP Therefore the addition IGMP filter UPF might good idea group Net processes were need dynamically need create new channels then they would also require way resolve straight ethernet address translations The addition the Address Resolution Protocol ARP filter UPF would also make logical extension general many extensions can made UPF required the needs the Net user Conclusions The attempt create packet filter that can used with Net was successful doing believe that our original design goals were met This however beginning There still lot work that must done developing both Net and the Net Packet Filter Particulary the case UPF performance can improved Improvements the current hashing implementation and tweaks the source code general will probably boost overall perforance the filters Acknowledgments would like thank the following individuals for their advice guidance and suggestions designing and developing UPF Gerry Toll Werner Vogels Anindya Basu Theodore Wong Professor Thorsten von Eicken References Mary Bailey Burra Gopal Michael Pagels Larry Peterson Prasenjit Sarkar PathFinder Pattern Based Packet Classifier Proceedings the First Symposium Operating Systems Design and Implementation Usenix Association November Thorsten von Eicken Anindya Basu Vineet Buch and Wernel Vogels Net User Level Network Interface for Parallel and Distributed Computing Draft for SOSP Cornell University August Dawson Engler Frans Kaashoek DPF Fast Flexible Message Demultiplexing using Dynamic Code Generation Association for Computing Machinery Inc Kamran Husain Tim Parker Linux Unleashed Sams Publishing Indianapolis Chris Maeda Brian Bershad Protocol Service Decomposition for High Performance Networking Carnegie Mellon University Steven McCane and Van Jacobson The BSD Packet Filter new Architecture for User level Packet Capture Lawrence Berkeley Laboratory December Matt Welsh Implementing Loadable Kernel Modules for Linux Loading and unloading kernel modules running system Jobb Journal Matt Welsh Thorsten von Eicken Net Protected User Level Networking Interface Cornell University March Gary Wright Richard Stevens TCP Illustrated Volume Addison Wesley Publishing Company New York Masonobu Yuhura Chris Maeda Brian Bershad Eliot Moss Deultiplexing for Multiple Endpoints and Large Messages Carnegie Mellon University MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Saturday Aug GMT UTCS Neural Nets Archives Archives and Databases Newsgroup and mailing list archives The Connectionists Archive Neural Nets Archive The VISION LIST Archive Comp Vision Archive The Archives Neuron Digest Archive Cognitive Neuroscience Archive Research Area repositories The Neuroprose Archive CMU Artificial Intelligence Repository UCI Machine Learning Repository The Finnish Neural Net Archive Networked Computer Science Technical Reports Library Bibliographies Center for Computational Intelligence BibTeX collection The Collection Computer Science Bibliographies The Connectionists Bibliographies Neural Computation BibTeX database USA Neural Computation BibTeX database Europe Neural Network Bibliographies Univ Arizona WWW Neural Net Archive and Bibliography Indices Unified Computer Science Index Subject Index BioSciences Resources Abstract and Index Databases Library databases Patents Patent Citation Database Back UTCS Neural Networks home page martym utexas edu Date Tue Jan GMT Server Apache Content type text html Content length Last modified Wed Nov GMT EduTech Institute the Georgia Institute TechnologyPeopleThe EduTech InstituteInformationResearch ProjectsPublications ReportsTopical LinksPrograms and EventsNeighborsFunding OpportunitiesJanet Kolodner Director January the EduTech Institute was established the Georgia Institute Technology EduTech serves coordinator and facilitator efforts improve the educational process Georgia Tech Wherever possible EduTech will focus the transfer those improvements into pre college environments People Research ProjectsInformationFunding OpportunitiesStrategic PlanBoard AdvisorsCoursesPrograms and EventsNewsgroup Georgia Tech Publications ReportsTopical Links NeighborsCollege Computing Home Page Cognitive Science Home Page For more information you have suggestions corrections Human contact point Address correspondence Janet Kolodner DirectorThe EduTech InstituteGeorgia Institute TechnologyAtlanta Georgia USA Last Modified Feb Previous EduTech Homepage Date Mon Nov GMT Server NCSA Content type text html Last modified Sun Feb GMT Content length Word Virus This virus has been going around you have Microsoft Word please check your system This info from Tech partners The Concept virus written using WordBasic auto macro which means that can affect both Macintosh and Windows versions Word and Word for Windows The current version harmless but there reason why could not altered harmful anyone who has the virus has the source code Here Microsoft recommendation for how deal with this virus excerpted from their tech note the Microsoft KnowledgeBase Choose the product category Word for Windows and Macintosh and you can type this article number keyword retrieve the entire article HOW REMOVE THE CONCEPT VIRUS Remove the macros the Tools menu click Macro the Macros Available list click All Active Templates Select the macro named AAAZAO Click the Delete button Click Yes when asked you want delete the macro Repeat these steps for the macros named AAAZFS AutoOpen and FileSaveAs NOTE Leave the macro named PayLoad the template Although this macro was installed the prank macro its presence prevents the prank macro from installing itself the future Correct any affected documents you must first complete Step order for this work Open document that has been affected the document dialog box containing the number one appears when you this Select the entire document pressing CTRL clicking Select All the Edit menu Eliminate the document final paragraph mark from the selection pressing SHIFT Left Arrow the Edit menu click Copy the File menu click New Select the template you want use and click the Edit menu click Paste Save the document 