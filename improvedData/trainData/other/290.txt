MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Monday May GMT Course Material Course Material Database Systems and Information Retrieval Department Computer Science Cornell University Spring Class Notes Databases Introduction Entity Relationship Model Relational Model Relational Algebra Relational Calculi SQL Integrity Constraints and Relational Database Design File Structures Indexing and Hashing Query Optimization Crash Recovery Concurrency Control Transaction Processing Information Retrieval Introduction Vector Space Model Term Weighting Indexing Evaluation Relevance Feedback Document Clustering Advances Information Retrieval Homeworks Homework Solution Grading Guide Homework Solution Grading Guide Homework Solution Problem Solution Problem Solution Problem Solution Problem Solution Problem Grading Guide Homework Solution Grading Guide Homework Solution Grading Guide Midterm Solution Grading Guide Midterm Solution Grading Guide MIME Version Server CERN Date Wednesday Jan GMT Content Type text html Content Length Last Modified Monday Jan GMT UTCS Alumni Links UTCS Alumni Links Herb Schwetman Ann Howell Paul Reynolds Jon Webb Shou Hsuan Stephen Huang Lane Foster Harrell Manuel Hermenegildo Tracy LaQuey Parker Chris Walker Raghu Ramakrishnan Lance Hahn Carol Hazlewood Lewis Barnett William Bulko David Creemer Tor Jeremiassen Rustan Leino Wayne Mock Michelle Pozen Ramki Thurimella David Crow Bill Foster Jeff Haynes Dan Higdon Dan Mandelstein Leena Kudva Prabhu Kalpathi Subramanian Shar Zand Karl Branting Ken Calvert Campbell III Anish Arora Dan Dvorak David Goldschlag John Hartman Steve Herrod Travis Hildebrand Devesh Khatu Mark Staskauskas Chuck Walbourn Charlie Wood Sanjoy Baruah Christoph Borst Alexander Chan Steven Drinovsky Tei Wei Kuo Jorge Ruiz Brian Smith Lynn Tanksley Jerrell Watts Foster Fisher Ananda Kar Zhendong Patrick Edy Susilo Indra Tanudjaja you are UTCS graduate and would like have link your home page included here send email including your name year graduation and URL gripe utexas edu Date Tue Jan GMT Server NCSA Last modified Wed Jul GMT Content type text html Content length JoSH Storrs Hall JoSH the Rutgers CAM Project ARPA sponsored effort design cost effective general purpose associative memory architecture moderator sci nanotech and the nanotechnology editor for Extropy consultant subject matter expert computer architecture the Rutgers HPCD Project research interests also include reversible computing for low power architecture josh rutgers edu Date Tue Nov GMT Server NCSA Content type text html Last modified Fri Aug GMT Content length Lecture notes Chapter Some basics Chapter Some basics ADMINISTRATIVE STUFF introduce self goals for course provide basic understanding for future courses introduction computer architecture learn low level details about how computers work hand out policy sheet lab acct forms first assignment academic misconduct policy form brochure text bookstore over policy sheet detail over academic misconduct detail Unix Tutorials log soon Some introductory material basic concept within computer science and engineering Levels Abstraction hierarchy models used for our purposes design programs computers when problem large needs broken down divide and conquer one way introducing hierarchy level and solving the problem each level example design computer transistors available gates flip flops components like registers and adders CPU memory system devices computer system CPU computer system memory stuff components gates transistors TOP DOWN BOTTOM design another example software levels abstraction writing large program lines code TOP DOWN divide into modules design each module separately define procedures functions that accomplish task specify interfaces parameters for the procedures the implementation function independent its interface specification different level the abstraction program design the big picture computer with software running HLL computer Pascal Fortran hardware how get from one the other wanted write nice abstract HLL have stupid computer that only knows how execute machine language what machine language binary sequences interpreted computer instructions not very human readable help the situation introduce assembly language more human readable form machine language uses MNEUMONICS for the instruction type and operands BUT now need something translate assembly lang machine lang ASSEMBLER lastly had program that translated HLL programs assembly language then have made COMPILER does this complete picture HLL compiler assembly assembler machine language language this course deals with the software aspects assembly language assemblers and machine language also deals with the hardware aspects what the computer does execute programs introduction study COMPUTER ARCHITECTURE the interface between hardware and software about COMPUTER ARCHITECTURE the relation between hardware stuff you can touch and software programs code can design computer that has hardware which executes programs any programming language For example computer that directly executes Pascal why don just that From experience the engineering community know that the hardware that executes HLL programs directly are slower than those that execute more simple basic set instructions Usability the machine Not everyone wants Pascal machine ANY high level language can translated into assembly language this class whatever language you are writing programs will look like you have machine that executes those programs directly What will hll SAL MAL TAL assume that you know HLL From that can give you SAL Later the semester you will learn MAL and TAL HLL SAL and MAL are each abstractions Each defines computer architecture TAL happens real manufactured architecture basic computer operation simplified diagram computer system hardware CPU memory CPU controls the running programs executes instructions makes requests the memory memory where programs and program variables are stored handles requests from the CPU STORED PROGRAM COMPUTER concept interaction between CPU and memory execute instruction the CPU must able request things from memory instruction FETCH operand variable load LOAD operand variable store STORE the memory really only needs able operations read fetch load write store where label specifies unique place memory label often identified address read CPU specifies address and read operation memory responds with the contents the address write CPU specifies address data stored and write operation memory responds overwriting the data the address specified for discussion how most computers operate WRT the execution instructions discussion generic assembly language instruction example mult instructions and operands are stored memory before they can used the CPU they must fetched loaded CPU steps involved fetch the instruction questions for later which instruction what address figure out what the instruction DECODE MULT INSTRUCTION this also reveals how many operands there are since the number operands fixed for any given instruction THERE ARE OPERANDS load operand OPERANDS ARE AND the operation specified the instruction MULTIPLY AND TOGETHER store result any RESULT GOES INTO VARIABLE next step suppose want execute multiple instructions like program except for branch instructions execute instructions sequentially the CPU must keep track which instruction executed does this the use extra variable contained within and maintained the CPU called PROGRAM COUNTER the contents the variable the address the next instruction executed modify the above CPU steps fetch the instruction the address given the added step modify the such that contains the address the next instruction execute the same above The added step could come any time after step convenient think step This set steps works fine for all instructions EXCEPT branch instructions branch instructions example beq label fetch instruction address given update decode its BEQ instruction fetch operands and compare operands for equality equal overwrite with address implied operand label The CPU steps involved fetch the instruction update decode load operand the operation specified the instruction store result any notice that this series steps gets repeated constantly make the computer useful all that needed way give the initial value the first instruction program and have way knowing when the program done the can given the starting address another program the cycle steps very important forms the basis for understanding how computer operates The cycle steps termed the INSTRUCTION FETCH EXECUTE CYCLE 