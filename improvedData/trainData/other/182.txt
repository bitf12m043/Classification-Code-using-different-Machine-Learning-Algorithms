MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Thursday Oct GMT Adam FlorenceAdam FlorenceAcademicsGraduate first year student computer science Cornell University professional interests include simulation and numerical analysis Undergraduate received electrical engineering from Virginia Tech Blacksburg Virginia May High School attended the Thomas Jefferson High School for Science and Technology Alexandria Virginia This magnet school pulls students from three counties and allows them pursue challenging curriculum focusing science and technology Back home page Last updated Sept mail with comments corrections MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Wednesday Nov GMT Visit Also Mark Family and Friends Home Pages AnthonyVictorTonyFrancisPaul LeeSebestianPeterPaul Tam Dear friends who have not your faces here plase submit your pictures right now Click here return Mark home page Date Tue Jan GMT Server Stronghold Ben SSL Apache Content type text html Content length Last modified Mon Jan GMT Programming Assignment Rules and GuidelinesCS Programming Assignment Rules and Guidelines This page will give you information about what expect from you for the programming projects Please read carefully before starting the first project Background Although the topic networking the programming projects assume good deal background with Unix You will need solid experience with the programming language and least working knowledge Unix file process management and signals order the programming assigments you are not sure you have the necessary skills please talk one the course staff the first week classes find out you should defer taking until later your curriculum Implementation Rules All projects are coded ANSI you are unsure the differences between ANSI and there are number books available the bookstore ANSI expect good coding style throughout This includes good functional decompostion useful comments and meaningful variable names Function header comments are required Following these rules your advantage out points each assigment constitute style grade see Grading Policies below All the assignments are designed implemented the Leland cluster Sweet Hall Your programs must compile and run both the SPARC Solaris machines epicxx and the DEC OSF machines amyxx will testing your programs both platforms You may develop any platform you like long your program also runs these two platforms times there will ambiguities the assignment specifications multiple ways assignment can implemented engineering class expect you make reasonable design decisions these cases Base your decisions what you know the assignment whole The may give you advice the tradeoffs these decisions but will not make them for you Tools There are several tools the Leland systems that can make your life considerably easier make utility used conditionally recompile your program based the timestamps the source code object files and executable expect that everyone the class will have seen makefile before they are permanent fixture every flavor Unix and most other platforms you don know how use make write makefile learn require makefile submitted with each assignment gdb the GNU debugger gdb interactive source level debugger allows you trace through your code executes and examine program state your program seg faults will show you where Learning use gdb effectively will save you many hours debugging hell compile with gdb simply add the flag the gcc command You can then start gdb with your program with the command gdb progname Type help from the gdb prompt for more information Purify development tool from Pure Software checks your program run time for many common errors Among other things checks for memory leaks references uninitialized illegal addresses and invalid parameters passed system calls use Purify simple preface the command which links your program with purify For example purify gcc myprogram main client netio When you run your program Purify will start itself separate window and show you diagnostics Here sample Makefile which illustrates all the above options Deliverables There are two expected deliverables with each assignment The first the source code your implementation This should include makefile which builds program the name specified the assignment the current directory important adhere this requirement some the assignments are tested shell scripts and must graded hand your makefile wrong you not know how write makefile look the class directory for sample The second deliverable project writeup This file should called README all caps your writeup straight text file README html your writeup HTML The submit program will not accept your assignment unless one these files present and should reside the same directory your source code when you submit This file should contain the following overview the structure your code Any design decisions you made and short justification for them you found ambiguities the assignment itself also list here how they were resolved your implementation Answers any questions the assignment asks Submission All projects will submitted electronically The submit script requires the following true The current directory must contain file called MakefileThe current directory must contain file called either README README htmlThere must least one file with extension there are any additional required files these will listed the assignment specification and the submit script will check for them well these conditions are true the script will submit the required files and all other files with extension the current directory Subdirectories will not submitted Everything needed compile and run your project should the current directory order submit your assignment enter the following command usr class bin submit assn where assn the assignment number Honor Code will enforce adherence the Stanford Honor Code applies programming assignments You may use publicly available code from other sources long the source noted the code aware however that copying code from the Stevens book verbatim dangerous not all the code strictly ANSI You may discuss the projects with your fellow students however you may NOT work together with other students use code written another student your assignment you have any questions about the honor code please ask one the course staff Honor code violations are not laughing matter Stanford and much better ask what might seem like silly question than risk your academic career Grading Policies Each assigment graded from total points All assignments will weighted equally your final grade points the grade will functionality points and will measure how well your assignment meets the specifications given the assignment handout The remaining points grade the style your code specified above While the functionality points may contested you think your code was misgraded the style points are subjective and may not contested rule late assignments will not accepted Only Professor McKeown can grant individual exceptions this rule please not ask the for extensions general extensions will only granted for serious reasons such family medical emergency times there are system problems with the Leland cluster which may prevent you from completing your assignment time these cases extension will generally granted the entire class References and ResourcesUnix Network Programming Stevens the reference choice for programming the Unix sockets API There will also review session before the first assignment due which will provide introduction socket programming TCP Volume The Protocols also Stevens excellent reference the specification and common implementations TCP and some the related protocols Although this book not required course text excellent reference Some the assignments refer chapters this book for additional reading The RFC Request for Comments are set documents which are the absolute reference for Internet standards The RFC are numbered sequentially There RFC web page you can also get the RFC via anonymous FTP Look INDEX rfc for list RFC titles Each student will assigned after signing through the class web page you have question that cannot answered any the class materials the above references you should contact your The will hold office hours the Sweet Hall you are having problems you may want schedule one your programming sessions during these hours Please mail questions leland project guidelines html jimge Exp Date Mon Nov GMT Server NCSA Content type text html Last modified Wed Mar GMT Content length Quiz UNIVERSITY WISCONSIN MADISON Computer Sciences DepartmentCS Spring Bart MillerQuiz Wednesday March Scheduling and Synchronization For each the following statements indicate whether you think probably true probably false Then give brief one sentence reason There not necessarily single correct answer each question your one sentence explanation the most important part your answer Small time slices always improve the average response time system Probably false Small time slices will sometimes improve the average response the system the slice too small the context switching time will start dominate the useful computation time and everything including response time will suffer Monitors are more powerful than semaphores because monitors automatically provide mutual exclusion Probably false While monitors are usually more convenient use they are not more powerful Since you can simulate semaphores with monitors monitors are least powerful semaphores course you know that you can also simulate monitors with semaphores they actually are equal power Process Control Blocks PCBs must stored the operating system kernel where process can access them Probably true PCBs must protected part the memory users processes were allowed access the PCB they could change scheduling priorities and perhaps access other processes memory unintended manor Shortest Job First SJF Shortest Completion Time First SCTF scheduling difficult build real operating system Probably true SCTF scheduling requires knowledge how much time process going take This requires future knowledge You might require user specify the maximum amount time that process could run and kill exceeds this amount then use variant SCTF Last modified Wed Mar CST bart 