MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Thursday Sep GMT World Tae Kwon Association World Tae Kwon Association Cornell Chapter Instructor Mary Starr Wimsatt Dan Fall ScheduleTuesday WSH North RoomWednesday Barton HallFriday Barton Hall For more information call Mary Dan Karl Dan Peter Please also check out our new web pages Other Tae Kwon Clubs the WTKDAMountain View CaliforniaOswego New YorkLiteratureThe Art Tae Kwon Korean Karate Duk Sung Son Robert Clark Black Belt Korean Karate Duk Sung Son Robert Clark Prentice Hall Inc Englewood Cliffs ISBN karl cornell edu MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Monday Dec GMT QSIM UsersQSIM Applications and Extensions This page holds pointers published articles describing applications and extensions QSIM other than what group has done Austin For those papers see our indexed bibliography Highlights QSIM Applications Qualitative Simulation Bibliography Groups try provide citations archival sources but some references are the Workshop local technical reports also try provide email addresses for least one author This list undoubtedly incomplete Last update Please send any additional suggestions citations should include Thanks Ben kuipers utexas edu Highlights QSIM Parallel Hardware significant barrier application QSIM large scale problems the efficiency qualitative simulation Recently group Graz Austria have designed and implemented special purpose parallel hardware architecture for qualitative simulation See their Web page and published papers Reinhold Weiss Marco Platzner Bernhard Rinner Graz Austria Applications QSIM and related systems Gautam Biswas Stefanos Manganaris and Xudong Extending component connection modeling for analyzing complex physical systems IEEE Expert February biswas vuse vanderbilt edu Biswas Krishnamurthy and Basu Applying qualitative reasoning techniques for analysis and evaluation structural design Seventh IEEE Conference Applications Miami Beach Feb biswas vuse vanderbilt edu Capelo Ironi and Tentoni model based system for the classification and analysis materials Intelligent Systems Engineering Materials science rheology liliana supers ian cnr Catino and Ungar model based approach automated hazard identification chemical plants Computers and Chem Engr press ungar central cis upenn edu David Dalle Molle and Edgar Qualitative modeling chemical reaction systems Mavrovouniotis Artificial Intelligence Applications Process Engineering Academic Press dtdallemolle amoco com Oskar Dressler and Hartmut Freitag Prediction sharing across time and contexts AAAI dressler zfe siemens Adam Farquhar and Giorgio Brajnik semi quantitative physics compiler Working Papers the Eighth International Workshop Qualitative Reasoning Modeling system lakes and dams axf ksl stanford edu Yang Gao and Hugh Durrant Whyte Integrating qualitative simulation for numerical data fusion methods Working Papers the Eighth International Workshop Qualitative Reasoning Gazi Ungar and Seider Controller verification using qualitative reasoning ADCHEM Proceedings ungar central cis upenn edu Glass Gruber Roos and Todtli Preliminary evaluation qualitative model based fault detector for central air handling unit Proceedings the IEEE Conference Control Applications Strathclyde University Glasgow August Thomas Gruber and Patrice Gautier Machine generated explanations engineering models compositional modeling approach IJCAI gruber ksl stanford edu Jorgensen and Hangos Grey box modelling for control qualitative models unifying framework Int Adaptive Control and Signal Processing Ironi Stefanelli and Lanzola Qualitative models medical diagnosis Artificial Intelligence Medicine Models iron metabolism liliana supers ian cnr Ironi and Stefanelli framework for building and simulating qualitative models compartmental systems Computer Methods and Programs Biomedicine QCML compartmental models insulin glucose system liliana supers ian cnr Iwasaki Low Model generation and simulation device behavior with continuous and discrete changes Intelligent Systems Engineering Abstract iwasaki ksl stanford edu Kaul Biswas and Bhuva Multi level qualitative reasoning applied CMOS digital circuits Intl Journal Engineering vol biswas vuse vanderbilt edu Kaul Biswas and Bhuva approach multi level mixed mode qualitative simulation CMOS ICs Computers and Electrical Engineering International Journal vol biswas vuse vanderbilt edu Franz Lackinger and Wolfgang Nejdl Diamon model based troubleshooter based qualitative reasoning IEEE Expert February Shorter version IJCAI Karl Lang and James Moore and Andrew Whinston Computational systems for qualitative economics Computational Economics Hwee Tou Model based multiple fault diagnosis time varying continuous physical devices IEEE Expert December Steven LeClair and Frances Abrams Qualitative process automation Proceedings the IEEE Conference Decision and Control Austin Texas December Sharad Saxena and Amy Unruh Diagnosis semiconductor manufacturing equipment and processes IEEE Trans Semiconductor Manufacturing May unruh spdc com Umeda Tomiyama Yoshikawa and Shimomura design methodology for self maintenance machines appear IEEE Expert Special issue Embedded Self maintaining MITA copier Vinson Grantham and Ungar Automatic rebuilding qualitative models for diagnosis IEEE Expert August ungar central cis upenn edu Vinson and Ungar Dynamic process monitoring and fault diagnosis with qualitative models IEEE Trans Systems Man and Cybernetics January ungar central cis upenn edu Advances Qualitative Simulation Fishwick Narayanan Sticklen and Bonarini multimodel approach reasoning and simulation IEEE Trans Systems Man and Cybernetics October Wilfried Grossman and Hannes Werthner stochastic approach qualitative simulation using Markov processes IJCAI Roy Leitch and Qiang Shen Prioritising behaviours qualitative simulation IJCAI rrl cee Marco Platzner Bernhard Rinner Reinhold Weiss distributed computer architecture for qualitative simulation based multi DSP and FPGAs Euromicro Workshop Parallel and Distributed Processing Jan Parallel hardware implementation the QSIM algorithm marco rinner rweiss iti graz Cem Say and Selahattin Kuru Postdiction using qualitative simulation IEEE Trans Systems Man and Cybernetics Cem Say and Selahattin Kuru Qualitative system identification deriving structure from behavior Artificial Intelligence Cem Say and Selahattin Kuru Improved filtering for the QSIM algorithm IEEE Trans Pattern Analysis and Machine Intelligence September Cem Say and Melih Doyuran The representative power quantity spaces and correspondences Bozsahin Halici Oflazer Yalabik Eds Third Turkish Symposium Artificial Intelligence Neural Networks TAINN III Middle East Technical University Ankara Shen and Leitch extending the quantity space qualitative reasoning Artificial Intelligence Engineering rrl cee Shen and Leitch Fuzzy qualitative simulation IEEE Transactions Systems Man and Cybernetics rrl cee Hiroshi Tanaka and Shusaku Tsumoto Qualitative reasoning temporally hierarchical system based infinitesimal analysis Working Papers the Eighth International Workshop Qualitative Reasoning Daniel Weld Comparative Analysis Artificial Intelligence Daniel Weld Exaggeration Artificial Intelligence weld washington edu Bibliography Applications Robert Milne and Louise Trave Massuyes Application oriented qualitative reasoning Working Papers the Seventh International Workshop Qualitative Reasoning rmilne cix compulink louise laas Qualitative Reasoning Generally Email discussion group qphysics aist nara Subscriptions qphysics request aist nara Stanford Knowledge Systems Laboratory Toyoaki Nishida Division Nara Institute Science and Technology Japan Ken Forbus Institute for Learning Sciences Northwestern University Reinhold Weiss Marco Platzner Bernhard Rinner parallel hardware implementation QSIM Graz Austria Lyle Ungar University Pennsylvania home BJK Date Tue Jan GMT Server NCSA Content type text html CLA Introduction Computer Science Home Page CLA Introduction Computer Science Fall Schedule All section references are the textbook Book Kelley and Pohl Third Edition Goals methods overview entire course relation other courses Structure computer Memory unit central processing unit input output unit More course organization Assignment accessible through the home page due Friday Sept Analysis the program Section pages Statements for control flow statement else statement while statement Section pages Use flowcharts design programs Statements for control flow More while statement introduce for statement Nesting while loops and for loops Example program with nested for loops print the multiplication table Comments keywords constants variables Sections Program examples powers program page and print random numbers program page Precedence and associativity operators Sections Program examples from Chapter pages and Statements for control flow More statement and else statement Section more while statement Section more for statement Section Program example from Chapter page Statements for control flow More for statement Section introduce goto break continue and switch statements Section Sections Function definitions Sections function prototypes Section program example from the book Section Function definitions Local and global variables Formal and actual parameters Function invocation Section Scoping rules Section Function definitions again Local and global variables again Recursion Section class Monday Schedule Mid term test One dimensional arrays integer arrays char arrays Section Two and three dimensional arrays Section Pointers Section Call reference Setion relationship between arrays and pointers Section bubble sort Section Pointer airthmetic Setion arrays function arguments Section strings Section The use include and define Sections Macro definitions Section type defiitions Section the operators and Section the assert macro Section Strings and string handling functions the standard library Sections and More examples functions handling arrays and pointers linear search and binary search More examples using the type qualifier const Section Functions arguments Section Functions arguments again Section Structures accessing members structure initialization structures Section Enumeration types Section More structures Section Unions Section More structures and unions Section Bit fields Section application for structure union and enumeration types Stacks Section Structures and list processing Section More structures and list processing Section Assaf Kfoury Created Modified Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Aug GMT Content length Lecture notes Chapter Data Representation Chapter representations ALL ABOUT INTEGER REPRESENTATION Computers operate binary values result being built from transistors there are different binary representations for integers possible qualifications positive numbers only positive and negative numbers ease human readability speed computer operations there are commonly known not common integer reprentations All have been used various times for various reasons unsigned sign magnitude one complement two complement biased not commonly known virtually all modern computers operate based complement representation why hardware faster hardware simpler UNSIGNED the standard binary encoding already given only positive values range for bits example bits values binary decimal hex binary decimal hex SIGN MAGNITUDE human readable way getting both positive and negative integers The that does arithmetic sign magnitude integers not fast and more complex than the that does arithmetic comp and comp integers use bit integer represent the sign the integer let sign bit positive negative the rest the integer magnitude uses same encoding unsigned integers example bits get the additive inverse number just flip not invert complement negate the sign bit range where the number bits bits because the sign bit there are representations for This problem for hardware the computer must all calculations such that they come out correctly and the same whichever representation used ONE COMPLEMENT historically important and use this representation get complement integers Now nobody builds machines that are based comp integers the past early computers built Semour Cray while CDC were based comp integers positive integers use the same representation unsigned etc negation finding additive inverse done taking bitwise complement the positive representation COMPLEMENT INVERT NOT FLIP NEGATE logical operation done single bit the complement the complement take complement each bit that don add take away any bits EXAMPLES this must negative number find out which find the additive inverse sight must things notice any negative number will have the MSB there are representations for and TWO COMPLEMENT variation complement that does not have representations for This makes the hardware that does arithmetic faster than for the other representations bit example bit pattern comp comp the negative values are all slid down one eliminating the extra zero representation how get integer comp representation positive values are the same for sign mag and comp they will have the MSB but NOT sign bit positive just write down the value before negative take the positive value take the comp comp add comp get the additive inverse comp integer take the comp add add without really knowing how add start LSB for each bit working right left while the bit change when encountered change and stop EXAMPLE what decimal value does the two complement represent must negative number since the most significant bit Therefore find the additive inverse comp after taking the complement comp Therefore additive inverse must LITTLE BIT ADDING see how really this the next chapter but here brief overview carry sum carry out sum its really just like for decimal which binary sum and carry the sum and carry BIASED REPRESENTATION integer representation that skews the bit patterns look just like unsigned but actually represent negative numbers examples given bits BIAS values TRUE VALUE represented add the bias unsigned value the bit pattern biased representation will going the other way suppose were given biased representation unsigned represents subtract out the bias TRUE VALUE represented this representation allows operations the biased numbers the same for unsigned integers but actually represents both positive and negative values choosing bias the bias chosen most often based the number bits available for representing integer get approx equal distribution true values above and below the bias should SIGN EXTENSION how change integer with smaller number bits into the same integer same representation with larger number bits this must done lot arithmetic units best over representation unsigned xxxxx xxxxx copy the original integer into the LSBs and put elsewhere sign magnitude sxxxx xxxx copy the original integer magnitude into the LSBs put the original sign into the MSB and put elsewhere and complement called SIGN EXTENSION copy the original integer into the LSBs take the MSB original integer and copy elsewhere example OVERFLOW sometimes value cannot represented the limited number bits allowed Examples unsigned bits would require least bits sign mag bits would require least bits when value cannot represented the number bits allowed say that overflow has occurred Overflow occurs when doing arithmetic operations example bit unsigned representation would require bits represent the value unsigned rep CHARACTER REPRESENTATION everything represented computer represented binary sequences common non integer needed represented characters use standard encodings binary sequences repreesent characters REMEMEBER bit patterns NOT imply representation devices work with bit quantities standard code ASCII American Standard for Computer Information Interchange defines what character represented each sequence examples hex decimal represents hex decimal represents Different bit patterns are used for each different character that needs represented The code has some nice properties the bit patterns are compared pretending they represent integers then suppose the user types result integer the steps for read translate read translate integer read translate integer the algorithm integer while there are more characters get character digit ALGORITHM integer character string the steps for figure out how many characters there are div gives translate and print out mod gives div gives translate and print out mod gives div gives translate and print out mod gives you done REPRESENTATION FLOATING POINT NUMBERS computers represent real values form similar that scientific notation There are standards which define what the representation means that across computers there will consistancy Note that this not the only way represent floating point numbers just the IEEE standard way doing Here what the representation one bit representing the sign the number bit biased integer representing the exponent unsigned integer the true value represented where bias for single precision numbers the emphasis this class bias Now what does all this mean all represent fields within representation Each just bunch bits just sign bit for positive for negative exponent field The field biased representation the true exponent represented bias The radix for the number ALWAYS Note Computers that did not use this representation like those built before the standard did not always use radix Example some IBM machines had radix the mantissa somewhat modified form There are bits available for the mantissa turns out that numbers are always stored their normal form then the leading bit the one the left MSB always why store all gets put back into the number giving bits precision for the mantissa for any calculation but only have store bits This MSB called the HIDDEN BIT example put the decimal number into the standard single precision representation first step get binary representation for this get binary reps for the stuff the left and right the decimal point separately can gotten using the algorithm now this whole pattern repeats binary representation for Putting the halves back together again second step normalize the binary representation make look like scientific notation third step the true exponent For the standard form needs biased form bit unsigned representation this bit pattern used for the standard form fourth step the mantissa stored the stuff the right the radix point the normal form need bits put all together and include the correct sign bit the values are often given hex here Some extra details Since floating point numbers are always stored normal form how represent What does the number represent take the bit patterns and represent the value What numbers cannot represented because this Other special values infinity infinity xff NaN Not Number either xff and anything but all zeros 