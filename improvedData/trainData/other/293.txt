MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Wednesday Aug GMT Running Allegro How Load and Run Allegro Common LISP These instructions pertain the installation the University Texas but except for the file paths should also applicable other installations Setup Allegro Common LISP available both the IBM machines running AIX and the Sun machines running Solaris The setup for both machines exactly the same you want run LISP from the UNIX shell type acl The binary the directory lusr bin However the best way run LISP subprocess Emacs this you need make some changes your emacs file and your LISP initialization file clinit Setting your UNIX environmentPut lusr bin your path variable Setting the emacs file Add the following lines the file the way stands for Franz Incorporated setq load path cons lusr lib franz acl home emacs load path autoload common lisp site init setq common lisp image name acl Setting the clinit file the end the file place the line start emacs lisp interface The documentation claims that the emacs lisp interface starts automatically but find that doesn Starting LISP the command common lispRunning Allegro Common LISP The ACL shell accepts set commands For example loads file Here list ACL commands Also the Allegro Emacs Lisp interface defines set Emacs commands manipulate files and program components Type ctrl LISP mode buffer list the available commands Algernon home This page was created byMicheal Hewett Date Tue Jan GMT Server NCSA Content type text html Instructions Request Grade Report Boston University CLA Computer Science DeptCLA Computer ArchitectureInstructions Request Grade Report You could request report your grade sending empty Email message Prof Azer Bestavros with the Subject line containing the sentence getgrade shown below Azer Bestavros Attchmnt Subject getgrade Message Text Upon sending Email message specified above you will receive within minutes grade report with your grade all homeworks graded far well the minimum maximum and average grade for the class This document has been prepared Professor Azer Bestavrosbest edu Created October Updated October Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Aug GMT Content length Lecture notes Chapter Exception Handling Chapter Exception Handling EXCEPTION HANDLERS The trouble with programmed that both wastes CPU resources and has potential for incorrect operation What really want Since most devices are slow have devices signal the CPU when they have change status The devices tell the CPU that they are ready order this need Hardware wires from devices the CPU way for special software invoked when the device signals the wire The modern solution bundles the software deal with these signals interrupts and other situations into EXCEPTION HANDLER Effectively part the EXCEPTIONS interrupts initiated outside the instruction stream arrive asynchronously specific time examples device status change device error condition thermal override shutdown internal error detection when should the interrupt dealt with soon possible traps occur due something instruction stream arrive synchronously while instruction executing good test program was run the trap would occur precisely the same place the code examples unaligned address error arithmetic overflow syscall when should the trap dealt with right now The user program cannot continue until whatever caused the trap dealt with exception handling the mechanism for dealing with exceptions simple its implementation can get complex The implementation varies among computers manufactures situation user program running executing and device generates interrupt request mechanism respond the hardware temporarily suspends the user program and instead runs code called EXCEPTION HANDLER After the handler finished doing whatever needs the hardware returns control the user program limitations exception handler since being invoked potentially the middle user program the handler must take extra care not change the state the user program can change register values can change the stack how can anything all The key this answer that any portion the state that does change must also restore before returning the user program The handler often uses the system stack temporarily store register values WHEN handle interrupt possiblilities right now Note that this could the middle instruction order this the hardware must able know where the instruction its execution and able take where left off This very difficult But has been done simpler forms few machines Example arbitrary memory memory copy wait until the currently executing instruction finishes then handle THIS THE METHOD CHOICE The instruction fetch execute cycle must expanded handle pending interrupts instruction fetch update decode operand load operation store results some terms interrupt request the activation hardware somewhere that signals the initial request for interrupt pending interrupt interrupt that hasn been handled yet but needs kernel the exception handler most minds when people think kernel they think critical portions operating system The exception handler critical portion operating system handler the code the exception handler MIPS exception handling mechanism hardware does the following sets state giving cause exception Cause register coprocessor register bit register bits bits specify the type the exception called the ExcCode Page text gives the mapping encodings causes examples Interrupt load from illegal address syscall instruction arithmetic overflow changes kernel mode saving the previous mode hardware stack levels deep The mode saved the Status register coprocessor register defined the processor architecture are modes user the mode that user programs run under certain instructions are not available kernel the operating system mode Allows the retain control over vital system aspects All instructions are available disables further interrupts saves current coprocessor register called Exception Program counter Gives return address user program Where return when done handling the exception jumps hardwired address This where the exception handler code Then the code within the exception handler run does the following save some registers system stack The handler needs use registers too may not change clobber register contents the user program saves them stack memory Figure out exception type ExcCode mfc get Cause register andi Mask out all but ExcCode use ExcCode combination with JUMP TABLE jump the correct location within the exception handler handle the exception whatever restore registers saved atomically done step not restore previous kernel user mode from Status register reenable interrupts jump back user program using EPC about Jump Tables clever mechanism for doing something like CASE SWITCH statement jump one many locations keep table addresses case case and case JumpTable word case word case word case sll case number shifted left bits need word offset into table not byte JumpTable load address into jump address contained case code for case here case code for case here case code for case here Note that the cases don have any specific order Addressing mode label Effective address gotten label label doesn fit into bit displacement field load store instruction MAL TAL synthesis this must something like label add then use addressing mode load store instruction some advanced topics PRIORITIES problem Multiple interrupt requests can arrive simultaneously Which one should get handled first possible solutions FCFS the first one arrive gets handled first difficulty This might allow malicious recalcitrant device program gain control the processor difficulty There must hardware that maintains ordering pending exceptions prioritize all exceptions the one with the highest priority gets handled first This common method for solving the problem Priorities for various exceptions are assigned either the manufacturer system manager through software The priorities are normally set when machine booted the started difficulty Exceptions with the same priority must still handled some order Example same priority exceptions might all keyboard interrupts Consider machine with many terminals hooked The instruction fetch execute cycle becomes any interrupts with higher priority than whatever currently running pending fetch decode operands operation result NOTE This implies that there some hardware notion the priority for whatever running user program keyboard interrupts clock interrupt etc What should get given the highest priority clock power failure thermal shutdown arithmetic overflow keyboard device ready priorities are matter which most urgent and therefore cannot wait and how long takes process the interrupt clock urgent and takes little processing maybe only variable increment power failure very urgent but takes lot processing because the machine will stopped overflow urgent the program which caused because cannot continue keyboard urgent because don want lose second key press before the first handled story what can happen interrupt priorities set wrong REENTRANT EXCEPTION HANDLERS The best solution combines priorities with exception handler that can itself interrupted There are many details get right make this possible The instruction fetch execute cycle remains the same the beginning EVERY instruction even those within the exception handler check made there are pending interrupts Only those with higher priorities than whatever currently running will processed The exception handler must modified that can interrupted Its own state must saved safely Within the handler disable interrupts momentarily order save important state that cannot get clobbered EPC current priority level maybe registers and Question where these things get saved enable interrupts for higher priorities than current level the priority level checking done hardware then all interrupts can enabled This invocation the exception handler eventually finishes The instruction fetch execute cycle must expanded handle pending interrupts instruction fetch update decode operand load operation store results 