MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Saturday Oct GMT Sean LandisSean Landis Waterview Heights Ithaca ext landis clarityconnect comObjectiveBe technical contributor developing object oriented distributed software also very interested computer graphics image databases and image processing EducationGraduate May Cornell UniversityIthaca NYMasters Engineering Computer Science GPADecember University UtahSalt Lake City UtahBachelor Science Computer Science GPA majorProfessional experienceMarch DateIsis Distributed Systems Inc Ithaca NYSoftware Engineer IVOrbix Isis team project leader Responsible for key technical contributions planning resource and vendor management release management and performance evaluations July Feb Isis Distributed Systems Inc Ithaca NYSoftware Engineer IIIAs member Orbix Isis development team participated all facets development for two releases Responsible for port Windows Responsible for documentation and training June June Unisys CorporationSalt Lake City UtahSenior Software EngineerLead engineer for Software Manager distributed software management application Responsible for analysis design implementation and documentation Assisted planning and staffing Representative POSIX Software Administration April June Unisys CorporationSalt Lake City UtahSoftware EngineerDeveloped The Unisys UNIX Self supporting System customizable monitoring and analysis tool Performed all phases the product life cycle including training Developed and taught UNIX Performance Tuning Seminar Short term Achievement Award Group Achievement Award Unit Achievement Award Corporate Achievement AwardAug April Unisys CorporationSalt Lake City UtahAssociate Software EngineerCustomer support for UNIX SVR master slave multiprocessor machine Resolved customer problems plant and site Created UNIX support tools package and training class for customer support engineers Short term Achievement AwardOct March Olympus SoftwareSalt Lake City UtahProgrammer AnalystResponsibilities included porting UltraCalc spreadsheet various UNIX platforms release management and completing graphing package Summers VariousStudent cooperative work PublicationsCORBA with fault tolerance with Ruth Stento Object Magazine Nov Dec Building Reliable Distributed Systems with CORBA with Silvano Maffeis printed Theory and Practice Object Systems Summary skillsCORBA Orbix Object Oriented Development UNIX development tools WIN Programming Visual and MFC Software Engineering Project Management Perl ClearCase CVS Microsoft Office FrameMaker TCP HTML Graphics Programming Image Processing Machine Vision Current projectsMasters ProjectA based graphics rendering system Wireframe and solid display modes Phong shading object oriented design vertex polygon surface object data model MSVC Windows Topics Computer GraphicsA content based image retrieval system for interior design Database wallpaper patterns retrievable color histogram pattern Image feature extraction analysis and indexing Object oriented design allowed for easy extensibility Machine PerceptionUse computer vision techniques measure the quality children coloring book artwork The system evaluates sample colorings and draws conclusions about the nature the author work Advanced DatabasesExplore indexing methods for image databases Utilize image features create possibly multidimensional indexing structures This project planned for the current semester See http www cornell edu Info People sean html for more information ReferencesReferences and salary history available upon request MIME Version Server CERN Date Wednesday Jan GMT Content Type text html Content Length Last Modified Wednesday Jan GMT Computer Sciences CalendarComputer Sciences Calendar Form Send Item CalendarHow Send Items Calendar EMail Date Tue Jan GMT Server NCSA Last modified Wed Oct GMT Content type text html Content length CPS Assignment FALL CPS FALL Assignment Due Monday Oct Last Date Turn Monday Nov points your cps directory create directory called assign using the mkdir command Change into the assign directory order this assignment you need copy some files using the following command don forget the trailing period dot rodger cps assign This command will copy files into your directory for you use you type you should see the following files Makefile ladder ladder ladderq QueueAr QueueAr and template For this assignment you using database English five letter words from the Stanford GraphBase knuth dat list compiled Don Knuth This list has about words There smaller file data work with also called words dat your ladder directory create link these data files typing rodger data knuth dat knuth dat rodger data words dat words dat Then you can access these files without specifying long path name for the files For the programming problem that follows you should use the style rules discussed class which includes meaningful variable names indentation and comments pre and postconditions the top the file and for each function Also include your name date course and purpose comment the top the program Problem Word Ladder Turning Stone into Money The input the program the name word file The user should then prompted for two words the same length characters The output sequence words which consecutive words share all but one letter starting with the first word and ending with the last One letter can changed another letter only the resulting symbols form valid word For example turn stone into money one possible ladder replace replace etc stone shone shine chine chins coins corns cores cones coney money All these words can found the Knuth file and dictionary The user will continue enter words and word ladders searched for until either the words entered NOT letters length Assignment Part You are write program ladderq that uses file letter words find the shortest ladder from one word another using process outlined below You must develop class this the class Ladder has been started for you but you will need add more member functions both public and private Your program should Read and store the words from file specified the user Prompt the user enter two five letter words and continue prompt for each pair words output shortest ladder from the first word the second one the words not length your program should halt sample run ladderq Enter filename words dat Enter two letter words length end smart brain Here the ladder smart start stark stack slack black blank bland brand braid brain Enter two letter words length end angel devil There path from angel devil Enter two letter words length end more The file knuth dat has extraneous information Ignore lines that begin with and only process the first characters other lines Knuth asks that the file not altered hence these restrictions Code read this file included the member function LoadWords already written for you use Algorithm find the shortest ladder you should use the templated Queue class provided QueueAr the modified Queue class from the Weiss book First store all the words from the file vector type Wnode this done for you LoadWords struct Wnode string word Wnode prev this assumes the use the class string from CPstring You can use some other kind string you want ladder found putting the starting word rather pointer the queue then putting all words letter away from this word the queue then putting all words letters away the queue then all words letters away etc each word taken off the queue the last target word found the process can stop there may other words the queue but they ignored Word isn actually stored the queue pointer struct containing stored The other field the struct pointer the word that one letter away from and that caused put the queue the word predecessor For example house then pointers structs containing mouse louse douse horse and are enqueued with each struct pointing house since this word preceeded the others and caused them enqueued The first word doesn have predecessor field cannot NULL since this used for another purpose easy fix make the pointer self referential points the struct itself and this will need checked when printing ladders More Details The first word entered the user looked the list words and pointer the struct containing the word enqueued For extra credit your program should able handle first word even the word NOT the list words all other words the ladder except perhaps for the last must the list words Put pointer the struct containing the word onto the queue queue Wnode pointers Then repeat the dequeue enqueue process below Dequeue element pointer Find all words one letter apart from the dequeued word one these the target word you done one the words one apart from the target word you done you can stop early Otherwise enqueue each the words found hasn been queued before you can use the prev pointer fields Wnode determine word has been enqueued before initially all prev fields should set NULL this helps determine word has been enqueued before This means each word enqueued most once When the target word derived you need print out the ladder from the first word the target word The prev pointer the Wnode stores information that will allow the ladder recreated you may need use recursion vector since the ladder will backwards but should printed properly Alternatively you can store the words array vector and print them out reverse without using recursion but using loop over the vector Ladder Member Functions You must implement the functions described below You find useful implement other member functions Sometimes the functions should private This the case when member function helper function for other member functions but shouldn called the user Making helper function private ensures that only other member functions can access the helper function but client programs cannot Clear sets all prev fields NULL FindLadder tries find ladder between two words that are parameters the function FindLadder returns boolean value true ladder found and false otherwise Pass the strings this function const reference parameters PrintLadder prints the word ladder Private data may needed store the last node the ladder the prev field the last node can used access all other ladder nodes the first node the ladder has self referential pointer You probably find useful write function IsOneApart that used determine two strings are one letter apart this count the letters that are equal this one less than the total number letters the words the words are one apart This function does NOT need member function has two strings parameters const reference and returns true the strings are one letter apart You can just define this function ladder and use there You probably want debugging code member functions verify what going you build helping debugging member functions into your class you save time the long run since the member functions can used help debug code You may want write separate function find word the vector words pointers words read You can write this code inline rather than making function out but the function can useful debugging and developing advisable that you test out each function you write make sure works correctly order would very helpful create small data file with about words containing small ladder size for testing Using Templates use the templated Queue class you need use file called template Template code needs seen the compiler this end all and files are included separate file template This file illustrated below include QueueAr include QueueAr include ladder template class Queue you want several kinds queues just put another definition the template file Once the template file compiled template you only need relink not recompile every time you make change ladder This will make your recompiles much faster Extra Credit pts Write new version ladderq called ladXtra This program should process the words that only good matches are tried when ladders are found The preprocessing step will take long time but word ladders will found very quickly The idea that for each word all words one letter away are determined and stored somehow when the words are loaded When looking for candidate words enqueue only words that are one letter away these are already known are checked for previous use This saves searching through the entire list words and checking whether each one letter away Submitting Program When your programs compile and produce the correct output create README file please use all capital letters Include your name the date and estimate how long you worked the assignment the README file You must also include list names all those people students prof tas tutor with whom you consulted the assignment See the rules for collaboration the CPS syllabus submit your programs electronically type leave off ladXtra you didn the extra credit submit assign README ladderq ladder ladder template ladXtra You should receive message telling you that the program was submitted correctly doesn work try typing rodger bin submit place submit above You can submit typing make submit make submitX you did the extra credit program the correct README file the directory from which you submit You can always edit the Makefile command submit submitX add change filenames Date Mon Nov GMT Server NCSA Content type text html Last modified Mon Aug GMT Content length Numerical Functional Analysis class notes last change jan Class Notes chapter list relevant books chapter Linear Algebra sep chapter Advanced Calculus nov chapter III Normed linear spaces nov chapter The continuous dual jan chapter Baire category and consequences chapter Convexity chapter VII Inner product spaces chapter VIII Compact perturbations the identity chapter The spectrum linear map chapter Linearization and Newton method index 