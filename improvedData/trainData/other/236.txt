MIME Version Server CERN Date Monday Nov GMT Content Type text html Content Length Last Modified Monday Sep GMT Mesh GenerationGuaranteed Quality Mesh GenerationPaul Chew work mesh generation has been motivated the finite element method widely used technique obtain approximate solutions partial differential equations The first step this method divide the given problem region into simply shaped elements creating mesh number algorithms have been developed automate this process but most these algorithms not provide guarantee about the quality the resulting mesh for instance element may cross region boundary there may some flat triangles leading poor error bounds have developed efficient techniques for producing meshes guaranteed quality for problems the plane and for curved surfaces the elements produced are all triangles that are close equilateral shape all region boundaries are respected and the user can control the element density producing small elements interesting regions and large elements elsewhere working extend this technique full three dimensional problems producing tetrahedral meshes Example Mesh Example Surface Mesh The Mesher Action postscript animation the mesher work The colors represent grades for the various triangles red implies bad shape yellow implies too large blue implies boundary too long and green implies all right Interactive Meshing Demo Mesh polygonal shape your own choosing The input for this currently very slow the whole demo still being modified Some References Paul Chew Guaranteed Quality Mesh Generation for Curved Surfaces Proceedings the Ninth Symposium Computational Geometry ACM Press Paul Chew Guaranteed Quality Triangular Meshes Department Computer Science Tech Report Cornell University MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Friday May GMT Self Organization Orientation Maps Lateral Connections and Dynamic Receptive Fields the Primary Visual Cortex Next IntroductionUp Lateral Interactions the Cortex Structure and Function Self Organization Orientation Maps Lateral Connections and Dynamic Receptive Fields the Primary Visual CortexJoseph Sirosh Risto Miikkulainen and James BednarDepartment Computer SciencesThe University Texas Austin Austin sirosh risto jbednar utexas eduAbstract Through massively parallel computational simulations studied how large network simple neural elements the LISSOM model could develop functional organization similar that the primary visual cortex was found that starting from tabula rasa state the afferent and lateral connections the network self organized cooperatively and simultaneously through common Hebbian mechanism and produced receptive fields RFs orientation maps and patterns lateral connections that follow the receptive field organization Second hypothesized that similar self organizing mechanisms continue operating the adult cortex maintaining continuously adapting dynamic equilibrium with the input and tested this hypothesis the self organized model When the equilibrium was perturbed retinal scotoma RFs expanded size reversible fashion matching recent neurobiological observations the cat and psychophysical experiments the human Third possible functional role for the lateral connections the cortex was verified the model The lateral connections learned correlations the network activity and processing retinal input filtered out redundancies and established sparse coding the input The conclusion that the lateral connections the cortex could act negative filter that allows the cortex efficiently process the massive amounts visual information presented the environment Introduction The Receptive Field LISSOM LISSOM model Self Organization Dynamic Receptive Fields Functional Role the Self Organized Structures Conclusion Acknowledgements References Next IntroductionUp Lateral Interactions the Cortex Structure and Function About this document Date Wed Jan GMT Server Apache Content type text html Content length Last modified Wed Mar GMT Visualizing Complex Hypermedia Networks through Multiple Hierarchical ViewsVisualizing Complex Hypermedia Networks through Multiple Hierarchical Views Sougata Mukherjea James Foley Scott Hudson Graphics Visualization Usability Center College Computing Georgia Institute Technology mail sougata gatech edu foley gatech edu hudson gatech edu ABSTRACT Our work concerns visualizing the information space hypermedia systems using multiple hierarchical views Although overview diagrams are useful for helping the user navigate hypermedia system for any real world system they become too complicated and large really useful This because these diagrams represent complex network structures which are very difficult visualize and comprehend the other hand effective visualizations hierarchies have been developed Our strategy provide the user with different hierarchies each giving different perspective the underlying information space help the user better comprehend the information propose algorithm based content and structural analysis form hierarchies from hypermedia networks The algorithm automatic but can guided the user The multiple hierarchies can visualized various ways give examples the implementation the algorithm two hypermedia systems KEYWORDS Hypermedia Overview Diagrams Information Visualization Hierarchization INTRODUCTION Overview diagrams are one the best tools for orientation and navigation hypermedia documents presenting map the underlying information space they allow the users see where they are what other information available and how access the other information However for any real world hypermedia system with many nodes and links the overview diagrams represent large complex network structures They are generally shown graphs and comprehending such large complex graphs extremely difficult The layout graphs also very difficult problem Other attempts visualize networks such Semnet have not been very successful Parunak notes that The insight for hypermedia that hyperbase structured set distinguishable hierarchies will offer navigational and other cognitive benefits that equally complex system undifferentiated links does not even the union all the hierarchies not itself hierarchical Neuwirth also observed that the ability view knowledge from different perspectives important Thus different hierarchies each which gives different perspective the underlying information can formed the user would able comprehend the information better should also noted that unlike networks some very effective ways visualizing hierarchies have been developed Examples are Treemaps and Cone Trees This paper proposes algorithm for forming hierarchies from hypermedia graphs uses both structural and content analysis identify the hierarchies The structural analysis looks the structure the graph while the content analysis looks the contents the nodes Note that the content analysis assumes database oriented hypermedia system where the nodes are described with attributes Although our algorithm automatic forming the best possible hierarchy representing the graph the user can guide the process that hierarchies giving different perspectives the underlying information can formed These hierarchies can visualized different ways Section presents our hierarchization process Section shows the implementation the algorithm the Navigational View Builder system are building for visualizing the information space Hypermedia systems This section discusses the application the algorithm demo automobile database and section the World Wide Web Section discusses how the hierarchies can transformed other forms data organizations Section talks about the related work while section the conclusion THE HIERARCHIZATION PROCESSNew Data Structure For our hierarchization process use data structure which call the pre tree pre tree intermediate between graph and tree has node called the root which does not have any parent node However unlike real tree all its descendants need not trees themselves they may any arbitrary graph These descendants thus form list graphs and are called branches However there one restriction nodes from different branches cannot have links between them example pre tree shown Figure Note that pre tree another data structure like multi trees not complex graph but not simple tree Also note that although the term pre tree has not been used before this data structure has long history top down clustering techniques Top down clustering would often halted when new divisions were not auspicious leaving final structure which essentially pre tree FIGURE example pre tree has root node which does not have any parent The descendants the root node are graphs However none these graphs have any links between them Our hierarchization algorithm tries identify the best pre tree represent the given graph The final tree formed calling the algorithm recursively for the branches Hierarchization Algorithm The algorithm tries identify suitable pre tree from given graph Thus root node identified and the other nodes are partitioned into branches This root node forms the root the final hierarchy The algorithm recursively called for each the branches and the trees formed these recursive calls become children the root the final hierarchy The recursion stops branch has very few nodes the required depth the final tree has been reached may also happen that for certain branches suitable pre trees can formed these cases the nodes the branches become children the parent the branch This case generally occurs for branches with very few nodes For identifying potential pre trees both content and structural analysis are used Content analysis For content analysis for each attribute the nodes the graph are partitioned into branches based the attribute values Content based Clustering The clustering algorithm explained too many too few branches are formed the attribute not suitable for forming pre tree Otherwise new pre tree formed with these branches The root the pre tree cluster representing all the nodes the graph Structural analysis pre tree formed for nodes the graph which can reach all other nodes These nodes are designated the roots the pre trees The branches are the branches the spanning tree formed doing breadth first search from the designated root node detailed analysis omitted for the purpose brevity The algorithm explained with examples the next section Both content and structural analysis can identify several potential pre trees metric used rank these pre trees The metric consists the following submetrics Information lost the formation the pre tree When the nodes are partitioned for forming the branches all links joining nodes different branches are removed Thus valuable information lost and submetric calculates the ratio the number links remaining the branches the total number links the original graph rank the pre trees order the least amount information lost Treeness the branches Since our overall objective form trees advantageous the branches the pre tree are already close trees all the branches only consisted trees there would total links where the total number nodes the branches and the number connected components Thus submetric which calculates the ratio where the total number links indication the treeness the branches Goodness the root For structural pre tree the goodness the root determined the sum the distances the shortest path from the root all other nodes good root will reach all other nodes following only few links that the resulting tree not very deep deep tree not desirable since will force the user follow long and tedious path reach some information For content analysis the goodness the root determined the relevance the attribute For example for automobile database the manufacturer the cars more relevant attribute than the number doors the cars Each submetric returns number between and The overall metric calculated weighted sum the submetrics where the weight determined the relative importance the submetrics The Role the User default the entire process would automatically forming the best hierarchical form for the original graph However the user can guide the process both during the translation the graph tree and during the visualization the tree Translation phase The users can control the various variables that are used the translation process For example they can control the variable which specifies the maximum possible depth the tree the recursion stops when this depth reached The user can control the relative importance the various submetrics the overall metric that used rank given pre tree For example the user can specify that the goodness root not useful criteria for judging pre trees The user can also assign different weights different link types influence the submetric calculating the amount information lost The algorithm generally selects the best possible pre tree each level However the user can choose the pre tree instead The user shown the possible pre trees that can selected ranked the metric and the user can choose one them The user can specify what level the hierarchy the pre trees would chosen choosing different pre trees during different runnings the algorithm different hierarchies giving different perspectives the data can formed Visualization phase Besides tree the hierarchy can also visualized Cone Trees Treemaps Table Contents book which formed listing the nodes the order depth first search Different visual attributes can bound information attributes the views This extension the work reported IMPLEMENTATION The algorithm has been implemented the Navigational View Builder system for forming overview diagrams hypermedia systems Figure represents overview diagram automobile database There are lot interconnected nodes showing for example textual information about the cars images the cars advertisements and audio previous buyers comments There are also links other cars with similar price and other models the same manufacturer From this complex network hierarchy can formed automatically The top level root this tree and its children are shown the left hand screen Figure this case the attribute Price was used form the initial partitioning and the root represents cluster for all the nodes FIGURE overview diagram automobile database The diagram very difficult comprehend FIGURE The left hand screen shows the default tree formed for the automobile database The top level partitioning the attribute Price The right hand screen shows the tree formed the top level partitioning done the attribute Country The user can form different hierarchies selecting other pre trees For example the user wanted select the pre tree the initial level the dialog box shown Figure pops the user wants partition based the attribute Country the tree shown the right hand screen Figure formed this figure some the children represents clusters for countries For example the node labeled Japan represents all the Japanese cars and its children are shown the left hand screen Figure Here the partitioning done the attribute Manufacturer For some other countries the nodes the cluster formed tree these cases the roots the tree were identified structural analysis and they became the children the overall root Thus for Sweden Saab Info the root the tree for all nodes related Swedish cars Its children are shown the right hand screen Figure FIGURE each level various pre trees can used metric ranks these pre trees default the pre tree with the best metric selected However the user can select others using the above menu FIGURE Examples Content and Structural analysis for forming pre trees The left hand screen represents the nodes for Japan The root cluster representing all Japanese cars The nodes are partitioned the attribute Manufacturer The right hand screen for Swedish cars These nodes form tree with the node Saab Info the root Figure shows Tree view this hierarchy this view the colors the nodes represent various countries and the colors the links represent link types Various zooming and filtering operations that are mentioned are possible for this tree Moreover smooth animation used that the view changes are not abrupt and allow the user see the changes easily Note that the implementation done using Motif and Open Inventor FIGURE tree View hierarchy the automobile database Initial partitioning the attribute Country Node colors represent different countries and the link colors different link types Forming Hierarchies the World Wide Web Let now look example from perhaps the most popular hypermedia system the World Wide Web For input the Navigational View Builder information was automatically extracted from the WWW about the various files their authors their links other files and other information parsing the HTML documents using the method described Figure shows unstructured overview diagram the WWW pages about the research activities the Graphics Visualization Usability GVU Center Georgia Tech URL http www gatech edu gvu gvutop html Obviously this information very complicated FIGURE overview diagram the World Wide Web pages about the research activities GVU indicates clearly why traditional overview diagrams are useless for real world hypermedia systems The left hand screen Figure shows the top level the hierarchy automatically created for the data the system The file research html which lists the various research activities the GVU Center the root has branches the major research area well gvutop html file containing general information about GVU The right hand side Figure shows view section this hierarchy where the nodes are listed table content book FIGURE The left hand screen shows the top level the default hierarchy formed for the GVU WWW pages research html the root and the major research areas are shown The right hand screen shows book view portion this hierarchy showing research Software Visualization major drawback the World Wide Web that very few useful semantic attributes are defined for the pages create some other meaningful hierarchies attributes like the topic the page whether research page personal page etc were inserted manually Efforts are underway incorporate metadata into WWW and hopefully the near future can extract all useful information from the WWW automatically The left hand screen Figure represents treemap view hierarchy formed when the initial partitioning done the topic the page The colors are used represent the kind users who created the pages Green used represent Phd students and the color plate indicates that the Phd students are the primary authors the pages FIGURE The left hand scree shows Treemap view hierarchy the GVU WWW pages Initial partitioning the attribute Topic Colors represent different types authors The selected node visdebug html The corresponding WWW page shown the right Multiple hierarchies each giving different perspective the underlying information space can formed user selects node one view its positions the other views are also highlighted Thus these views help the user comprehending the data should also noted that the user can directly the corresponding WWW page for the selected node Thus the Treemap view the node visdebug html highlighted The corresponding WWW page shown the right hand screen Figure GENERATING OTHER VIEWS Once hierarchy formed from the original graph structure the hierarchy can transformed other data organizations well Visualizations can formed for these data organizations also For example the original partitioning for forming the hierarchy was done quantitative attribute linear structure sorted that attribute can formed from the subtrees the root node Figure represents perspective wall view linear arrangement the GVU WWW pages sorted the last modification times the files From the hierarchy whose initial partitioning was the attribute last modified time the files were divided into partitions based the time when they were last modified These partitions were arranged walls Only some walls are the focus given time The user can easily control the walls which are focus through scrollbar Similarly for the automobile database Perspective Wall view can formed where the cars are sorted the attribute Price FIGURE Perspective Wall view showing linear arrangement the files based the last modification time The different walls show files which were last modified different time frames Only some walls are the focus given time Other views can also generated For example tabular view showing information like average price mileage etc for various car models and also such useful statistics for different manufacturers the cars can formed depth first traversal the hierarchical structure whose partitionings are done the attributes Manufacturer and Car Model RELATED WORK Our structural analysis similar that described for identifying hierarchies from hypermedia structures Although using just structural analysis identify hierarchies works for hypertext systems with simpler underlying structures identifying meaningful hierarchies structural analysis alone difficult for real world systems Content analysis also essential evident from the paper describes method linearize complex hyper networked nodes facilitate browsing using book metaphor However this work also uses structural analysis only This paper also related systems that deal with graphical presentation information automatically semi automatically Examples include APT and SAGE However our information domain different from these systems these systems deal with highly structured information The views that want develop are also different The previous systems generally produced bar diagrams scatter plots and such graph views CONCLUSION One the best ways comprehend large complicated information structure form multiple simpler structures each highlighting different aspects the original structure Our work tries use this philosophy make complex hypermedia system understandable the user believe that forming various effective views the underlying space would allow the user better understand the complex information give examples the hierarchization process from two complicated hypermedia systems illustrate our point These examples show that our algorithm was able extract meaningful hierarchies which gave better insights into the complex information spaces Future work planned along the following directions Visualizing Larger Databases Although detailed complexity analysis beyond the scope this paper can shown that the major bottleneck the algorithm the structural analysis identify roots uses algorithm identify roots the other hand use algorithm identify roots calling the breadth first search for each node Although the worst case average and our algorithm will perform better For the WWW database with about nodes and links our algorithm took about seconds SGI reality engine Although this acceptable will face problems for larger databases are investigating ways enhance the performance improving the efficiency the code and using probabilistic algorithms identify roots Moreover even cone trees and treemaps are not able visualize larger databases effectively New visualization techniques are needed Usability Studies limitation our system that evaluation how useful our views really are have been done far plan serious usability studies the near future These studies may give new insights that will help improve our system ACKNOWLEDGEMENT This work supported grants from Digital Equipment Corporation Bell South Enterprises Inc and Emory University System Health Care Atlanta Georgia part the Hypermedia Interface for Multimedia Databases project would also like thank the reviewers this paper for their useful comments REFERENCES Battista Eades Tamassia and Tollis Algorithms for Drawing Graphs Annotated Bibliography Technical report Brown University June Botafogo Rivlin and Shneiderman Structural Analysis Hypertexts Identifying Hierarchies and Useful Metrics ACM Transactions Office Information Systems Fairchild Poltrok and Furnas Semnet Three dimensional Graphic Representations Large Knowledge Bases Guindon editor Cognitive Science and its Applications for Human Computer Interaction Lawrence Erlbaum Furnas and Zacks Multitrees Enriching and Reusing Hierarchical Structures Proceedings the ACM SIGCHI Conference Human Factors Computing Systems pages Boston April Hartigan Clustering Algorithms John Wiley and Sons Ichimura and Matsushita Another Dimension Hypermedia Access Proceedings Hypertext Conference pages Seattle November Johnson and Shneiderman Treemaps Space filling Approach the Visualization Hierarchical Information Proceedings IEEE Visualization Conference pages San Diego October MacKinlay Automating the Design Graphical Presentation Relational Information ACM Transactions Graphics April Mackinlay Card and Robertson Perspective Wall Detail and Context Smoothly Integrated Proceedings the ACM SIGCHI Conference Human Factors Computing Systems pages New Orleans April Mukherjea and Foley Navigational View Builder Tool for Building Navigational Views Information Spaces ACM SIGCHI Conference Companion pages Boston April Mukherjea Foley and Hudson Interactive Clustering for Navigating Hypermedia Systems Proceedings the ACM European Conference Hypermedia Technology pages Edinburgh Scotland September Neuwirth Kauffer Chimera and Terilyn The Notes Program Hypertext Application for Writing from Source Texts Proceedings Hypertext Conference pages Chapel Hill November Parunak Hypermedia Topologies and User Navigation Proceedings Hypertext Conference pages Pittsburgh November Pitkow and Bharat WEBVIZ Tool for World Wide Web Access Log Visualization Proceedings the First International World Wide Web Conference Geneva Switzerland May Robertson Mackinlay and Card Cone Trees Animated Visualizations Hierarchical Information Proceedings the ACM SIGCHI Conference Human Factors Computing Systems pages New Orleans April Roth Kolojejchick Mattis and Goldstein Interactive Graphic Design Using Automatic Presentation Knowledge Proceedings the ACM SIGCHI Conference Human Factors Computing Systems pages Boston April Utting and Yankelovich Context and Orientation Hypermedia Networks ACM Transactions Office Information Systems Wernecke The Inventor Mentor Programming Object Oriented Graphics with Open Inventor Addison Wesley Publishing Company Date Mon Nov GMT Server NCSA Content type text html Last modified Sun Sep GMT Content length SyllabusCS Syllabus This page will expanded revised during the first few weeks Thank you for your patience Exams each Quizzes equally weighted Programs probably equally weighted Approximate Timetable this will give you rough idea the pace and ordering the topics covered You are responsible for any adjustments made class Late Policy Your paper copy the program must handed the beginning class the day due The electronic copy will not used determine the handin time Make sure that the paper copy matches the electronic one doesn then will probably consider the electronic copy late submission Programs will generally due Tuesday this case you may hand program days late and there will deduction for each late day Thursday submissions paper copy must handed the beginning class Wednesday and Friday submissions paper copy must handed directly during office hours 