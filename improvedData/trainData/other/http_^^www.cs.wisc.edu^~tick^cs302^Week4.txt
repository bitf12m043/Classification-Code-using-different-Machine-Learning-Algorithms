Date Wed Dec GMT Server NCSA Content type text html Last modified Fri Sep GMT Content length Section Lecture Notes Week Lecture Notes Week Topic User defined functions and subroutines Input and output arguments Text Chp Notes User Defined FunctionsFORTRAN has pre defined built mathematical functions SQRT SIN NINT Functions are small independent program modules that compute commonly used values Highly reusable Out SQRT Functions take one more input values called arguments produce single output value called the result COS MOD Function Arguments Result COS cosine MOD remainder Functions simplify break down larger problem into series smaller problems called top down design User Defined FunctionsCan define your own functions and use them your program Resemble mini programs Very similar structure Function Header Argument Declarations Local Variable Declarations Main Executable Section RETURN END Example compute the area circle REAL FUNCTION AREAC RADIUS Computes the area circle with radius RADIUS Declare RADIUS argument REAL RADIUS Declare local variables constants REAL PARAMETER Compute result AREAC RADIUS RETURN END Calling User Defined FunctionsUser defined functions are written after the main program PROGRAM TEST Main program REAL TWRAD TWAREA AREAC PRINT Enter radius tower READ TWRAD PRINT Area AREAC TWRAD STOP END User defined Functions REAL FUNCTION AREAC RADIUS RETURN END User defined functions are called from the main program just like any other function part arithmetic expression User defined functions can called from inside other functions Exception functions cannot call themselves called recursion Important Function type must declared like variable the main program wherever called from REAL AREAC Function HeaderThe function header specifies the name the function the type value returns and the name and number input arguments functype FUNCTION funcname arguments REAL FUNCTION AREAC RADIUS INTEGER FUNCTION MOD DIVID DIVIS Can also have zero arguments but unusual INTEGER FUNCTION FOO Only the argument names are listed the function header Argument DeclarationsThe type the arguments specified immediately after the function header but before any local variables Declare arguments just like declaring variables REAL RADIUS INTEGER DIVID DIVIS Also called dummy arguments Actual ArgumentsThe value the dummy arguments are initialized the corresponding values the function call called the actual arguments AREAC PRINT AREAC STOP END REAL FUNCTION AREAC RADIUS RETURN END Actual Argument Dummy Argument RADIUS RADIUS Number and type actual arguments must correspond number and type dummy arguments Specified same order Actual arguments may variables literals expressions Local VariablesAs with the main program user defined functions may need store intermediate results variables Variables declared within function are called local variables because they can only used locally within the function Important Variables declared another function the main program cannot used within function not assign argument variables within function called side effects INTEGER FUNCTION FACT INTEGER INTEGER COUNT TEMP Right TEMP COUNT TEMP TEMP COUNT END FACT TEMP Wrong COUNT COUNT END FACT Function ResultThe purpose function compute and return result The result function the last value assigned the function name using normal assignment statement funcname value INTEGER FUNCTION FACT FACT TEMP RETURN END RETURN StatementThe RETURN statement exits the function and resumes execution the main program wherever was called from Normally the last statement function before the END END StatementAlways the last statement function Specifies the end the function definition Order ExecutionProgram executes all the statements from program header END PROGRAM FOO END statement branches execute different sections code BAR THEN ELSE loop goes back and executes code BAR When call function jumps down and execute all the function statements Return back the main program RETURN PRINT FACT Main Function STOP END REAL FUNCTION FACT SubroutinesFunctions return single value usually number and implement some mathematical function INTEGER FUNCTION FACT Computes the factorial Subroutines can return any number values and can perform any sort operation SUBROUTINE GRAPH MIN MAX POWER Print graph POWER from MIN MAX Subroutines also take one more input values arguments but may may not return any results MIN MAX GRAPH POWER User Defined SubroutinesSubroutines resemble functions Subroutine Header Argument Declarations Local Variable Declarations Main Executable Section RETURN END Note Subroutine header does not return value Example split REAL number into its whole and fractional parts SUBROUTINE BREAK WHOLE FRAC Break real number into its whole and fractional parts Declare arguments REAL FRAC INTEGER WHOLE WHOLE INT FRAC REAL INT RETURN END Calling SubroutinesSubroutines are written with functions after the main program Subroutines are explicitly called from the main program using the CALL statement CALL GRAPH CALL BREAK IPART FPART Subroutines can called from inside other subroutines functions but recursion Subroutine HeaderThe subroutine header specifies the name the subroutine and the name and number arguments SUBROUTINE subname arguments SUBROUTINE GRAPH MIN MAX POWER SUBROUTINE BREAK WHOLE FRAC Can also have zero arguments not unusual SUBROUTINE MENU Argument DeclarationsAs with functions the type the arguments specified immediately after the subroutine header Local VariablesAs with functions subroutines may need store intermediate results variables Local variables can only used locally within the subroutine Subroutine ResultsSome subroutines not return any values GRAPH just draws graph the screen Other subroutines return one more values BREAK takes one input value and returns two output values result returned the main program when the arguments are assigned inside the subroutine Arguments pass values both into the subroutine well out MIN MAX GRAPH POWER Out WHOLE BREAK FRAC Note Unlike functions the subroutine name not assigned value Input ArgumentsInput arguments pass values into the subroutine just like functions Input arguments should not assigned with functions the actual arguments the subroutine call may literals variables expressions CALL GRAPH CALL BREAK Output ArgumentsOutput arguments pass values back out the main program Similar function results except multiple values can passed Unlike input arguments output arguments must assigned new value pass back out VERY IMPORTANT The actual arguments the subroutine call must always variables These variables are assigned inside the subroutine hence the new values get passed back out the main program CALL BREAK IPART FPART PRINT IPART FPART STOP END SUBROUTINE BREAK WHOLE FRAC WHOLE INT FRAC REAL WHOLE RETURN END When the dummy arguments WHOLE and FRAC are assigned the actual arguments IPART and FPART are assigned too Actual and dummy argument names not need have the same name Output arguments only pass values out The original values IPART and FPART any are ignored Input Output ArgumentsSome arguments can pass values both into and out the subroutine Called input output arguments SUBROUTINE SORT NUM NUM Sorts two numbers that NUM Copyright copy Modified fromGareth Bestor bestor wisc edu Last modified September 