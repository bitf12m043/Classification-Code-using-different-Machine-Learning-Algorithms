Date Tue Nov GMT Server NCSA Content type text html Last modified Mon Aug GMT Content length EEL Executable Editing Library EEL Executable Editing Library EEL Executable Editing Library new library that hides much the complexity and system specific detail editing executables EEL provides abstractions that allow tool analyze and modify executable programs without being concerned with particular instruction sets executable file formats consequences deleting existing code and adding foreign code EEL greatly simplifies the construction program measurement protection translation and debugging tools EEL differs from other systems two major ways can edit fully linked executables not just object files and emphasizes portability across wide range systems Why Edit Executables Executable editing widely used for three purposes emulation observation and optimization edited executable can emulate features that hardware does not provide For example the Wisconsin Wind Tunnel architecture simulator drives distributed discrete event simulation parallel computer from the logical cycle times processors directly executing parallel program The underlying hardware SPARC processor Thinking Machines does not provide cycle counter efficient mechanism for interleaving computation and simulation The Wind Tunnel system edits programs that they update cycle timer and return control timer expirations Similarly one version the Blizzard distributed shared memory system edits programs insert fine grain access tests before shared loads and stores These tests permit data sharing cache block granularity which reduces the false sharing incurred page granularity distributed shared memory systems the limit editing can replace entire program with instructions for different architecture Translation used both migrate legacy code new architectures and run binaries other systems Another use executable editing program observation Profiling and tracing tools such MIPS pixie qpt edit executables record execution frequencies trace memory references These tools are widely used study program system behavior and computer architecture More recently tool based EEL Active Memory dramatically lowered the cost cache simulation slowdown inserting cache miss tests before program memory references rather than post processing address trace Finally executable editing has also been used for global register allocation and program optimization Unlike most compilers which operate single file editing can manipulate entire program which permits perform interprocedural analysis rather than stopping procedure boundaries How EEL Helps EEL provides five major abstractions class hierarchies that allow tool examine and modify executable executable routine CFG instruction and snippet executable contains code and data from either object library executable file tool opens executable examines and modifies its contents and writes edited version executable primarily contains routines the second abstraction but also contains non executable data tool can examine and modify routines any order and place them and new routines the edited executable any order EEL represents routine body with two further abstractions control flow graphs CFGs and instructions CFG directed graph whose nodes are basic blocks single entry single exit straight line code sequences and whose edges represent control flow between blocks EEL provides extensive control flow and data flow analysis for CFGs Blocks contain sequence instructions each which machine independent description machine instruction tool edits CFG deleting instructions adding code snippets blocks and edges snippet encapsulates machine specific foreign code and provides context dependent register allocation EEL modifies calls branch and jumps ensure that control flows correctly the edited program Details EEL currently works for SPARC processors running SunOS Solaris Ports other systems are progress EEL distributed part the Wisconsin Architectural Research Toolset WARTS WARTS available without charge for university researchers and available other researchers for modest research donation Tools Built with EEL QPT Quick Profiling and Tracing System Instrumenting the Solaris kernel Darrin West and Kiran Panesar Automatic Incremental State Saving PADS For More Information Click here for slides talk EEL overview paper for EEL appeared the ACM SIGPLAN PLDI Conference June Another paper demonstrating that simple instruction scheduling can hide the cost program instrumentation and that rescheduling legacy code for superscalar processors can significantly improve performance Related Work and ATOM project DEC WRL now Digital products Etch tool for editing Win executables James Larus Computer Sciences Department University Wisconsin West Dayton Street Madison larus wisc edu Last modified Sat Jun James Larus larus wisc edu 