MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Saturday May GMT CUCS General Information General Information Home Page Academic Information Other Servers About the Department General Information Disclaimers ContactsPeople the DepartmentFaculty Researchers Students StaffDirectory ListingActivities Assoc UndergraduatesCUCS Hockey Annual ReportCS Department Home Page MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Wednesday Oct GMT Zen Timer CodeZen Timer Code have implemented class library that uses undocumented feature the Intel Pentium processor very precisely time your executable code for purposes profiling Information about this feature and other undocumented Pentium features available here Simultaneous timing any number routines supported well suspending and resuming the timing any point during the timed interval This code was inspired Michael Abrash excellent book Zen Code Optimization code works accessing bit register the Intel Pentium processor that incremented every clock cycle MHZ Pentium this gives clock resolution nanoseconds one cycle and maximum time interval about years This code keeps track the minimum maximum and average time intervals for the pieces code that you are profiling addition possible specify dribble file that will record every interval time measured This code has been implemented and tested Pentium running Linux with gcc and the GNU assembler version cygnus linux use this code you must patch your assembler with the supplied patch file Click here download copy the Zen timer code Click here download copy the patch file for the GNU assembler Click here download test program that makes use the timer code also developed two useful utilities for use with the Zen Timer The first converts time dribble file into ascii human readable version Click here download the time ascii code The second converts time dribble file into ascii histogram file suitable for use with spreadsheet for example click here download the time histo code important note accounting for the overhead caused the timer itself The zen timer introduces some overhead into every timed interval virtue having execute few instructions the profiling attempt account for this overhead have defined some macros the file zentimer that have overhead values that work for system have however found that there are number different factors that can affect the overhead introduced running the timer particular suggest that you not use windows while using the timer seems add particularly unpredictable overheads the timing results Also different disks different system board can cause these overheads change You should try running the timer your system with small test program and see you get average interval cycles not adjust the overhead macros zentimer until you Last updated Mark Johnstone Any suggestions comments welcome Department Computer Sciences Austin Click send mail Mark Johnstone Date Tue Jan GMT Server NCSA Content type text html Last modified Thu Aug GMT Content length Software Evolution Lab Projects for Undergraduate and Graduate StudentsSoftware Evolution Lab Projects for Undergraduate and Graduate Students have variety projects software engineering and compilers for both undergraduates CSE and graduates CSE Some these projects could also serve the basis for Master thesis For more depth information about these projects you may wish look lab research page which provides information about current research projects and recent papers Beneficial Background Compilers Classes such CSE CSE Beneficial Skills Proficiency with Common Lisp Tcl programming languages proficiency with lex flex yacc bison compiler tools Examples Smaller ProjectsEnhancement star diagram CAWK programming tools read and print source code with comments and related constructs Most programming tools cannot handle comments because they are stripped out the lexer Design and implementation object oriented star diagram planning tool for Java Improve the performance the tree drawing algorithm our star diagram tool The current implementation probably slow because run the interpreted Tcl environment Redesign parts large system gcc using our star diagram tool and CAWK Develop program metric scripts using CAWK tool Add transformational capability the star diagram planning tool Design and implementation pseudo syntactic pattern matching tool See the CAWK paper for examples related tools wgg ucsd edu August Date Mon Nov GMT Server NCSA Content type text html Last modified Wed Feb GMT Content length Quiz UNIVERSITY WISCONSIN MADISON Computer Sciences DepartmentCS Spring Bart MillerQuiz Wednesday February Concurrent and Cooperating Processes For the following two example programs you are describe what will the output when each program run there more than one possible output describe all the possibilities Here are some general important facts Each program made two concurrent processes You don know what order they will run nor you know when the dispatcher will switch between processes The initialization code setting the initial values for the shared variables completed before either the two processes run All the variables and are shared between the two processes Every time variable referenced appears expression read from memory Every time variable set appears the lefthand size assignment operator written memory Reading and writing single words ints atomic Problem Initialization int Process while nothing cout Process cout Describe the output here The while loop keeps executing until Process has chance set This called spinning busy waiting Problem Initialization int int Process while nothing cout Process cout Describe the output here The output will either badc bacd The difference depends whether the dispatcher switches processes between first time set and the time that set Last modified Wed Feb CST bart 