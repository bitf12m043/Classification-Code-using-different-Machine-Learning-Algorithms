Date Wed Dec GMT Server NCSA Content type text html Last modified Fri Sep GMT Content length Section Lecture Notes Week Part Lecture Notes Week Part Topic Repetition and loops END WHILE END and CONTINUE statement Text Chp Notes Repetition and LoopsConditional execution allows you optionally execute different sections code Repetition looping allows you execute the same section code several times Example Add numbers entered one per line SUM READ NUM SUM SUM NUM READ NUM SUM SUM NUM READ NUM SUM SUM NUM PRINT The total sum SUM more simply SUM execute the following times READ NUM SUM SUM NUM PRINT The total sum SUM Repetition more efficient and flexible CONTINUE Statement FORTRAN execute one more statements use the CONTINUE statement label count start end inc statements execute label CONTINUE CTR READ NUM SUM SUM NUM CONTINUE inc defaults not specified CTR Use negative value for inc count down CTR count must INTEGER REAL variable How Loops Workcount initialized start before the first iteration After each iteration count incremented inc The loop terminates when count end Note not The start end and inc may literals variables expressions MAX CTR MAX SQRT Normally use INTEGER values for start end and inc end start inc Number iterations inc start end the loop isn executed all MIN CTR MIN What start end inc are changed inside the loop MIN MAX CTR MIN MAX MAX CTR PRINT spam CONTINUE The start end inc are evaluated only once the beginning Only their initial values are important LabelsThe label the line number the CONTINUE statement indicate the end the loop Every statement the CONTINUE executed CTR CONTINUE The label written columns though The and CONTINUE statements start column you have multiple loops then keep the labels ascending order and use multiples for the different numbers FOO CONTINUE BAR CONTINUE Conditional LoopsDO statement executes the same statements pre determined number times What don know the number iterations ahead time SUM READ NUM the following until NUM equals SUM SUM NUM READ NUM PRINT The total sum SUM WHILE Statement FORTRAN Tests condition each iteration the condition TRUE then execute the loop WHILE condition statements execute END WHILE NUM SUM SUM NUM READ NUM END The condition logical expression just like statement Can write CONTINUE loop WHILE loop COUNT MIN MAX PRINT COUNT CONTINUE the functionally the same COUNT MIN WHILE COUNT MAX PRINT COUNT COUNT COUNT END The condition must contain variable who value changed inside the loop Otherwise the condition always remains TRUE infinite loop Right WHILE NUM PRINT NUM READ NUM END Wrong WHILE NUM PRINT NUM SUM SUM NUM END FORTRAN WHILE LoopThe WHILE statement not standard FORTRAN and may not available all compilers But sometimes cannot use the FORTRAN CONTINUE loop implement the equivalent WHILE loop FORTRAN can use statement and GOTO statement WHILE NUM END can written NUM THEN GOTO END The GOTO statement jumps resume executing the statement the specified label WARNING Never use GOTO statements anywhere your program except you have strict FORTRAN compiler and then only implement WHILE loops SECOND WARNING Anyone caught using GOTO statements this class will automatically receive mark zero for that assignment Just say GOTOs Nested LoopsJust statements can nested inside each other can CONTINUE and WHILE loops FACT COUNT FACT FACT COUNT CONTINUE PRINT FACT CONTINUE The outer loop executed times Inner loop executed number times depending the current value Nested loops must use different counter variables Inner loop CONTINUE statement comes before the outer loop CONTINUE statement IndentingAs with statement indent all executed statements additional spaces FORTRAN LoopsRepitition and loops are vital for any programming languages useful Standard FORTRAN only has the CONTINUE loop FORTRAN provides more powerful looping mechanisms aside the WHILE loop also supported many non standard FORTRAN compilers such Microsoft FORTRAN END Loop FORTRAN Same the FORTRAN CONTINUE loop but without the CONTINUE statement and label The end the loop indicated the END statement ADD READ NUM SUM SUM NUM CONTINUE the same ADD READ NUM SUM SUM NUM END The END can nested like other loops The counter must INTEGER variable Important Always use the END loop instead the CONTINUE loop this class also supported Microsoft FORTRAN EXIT and CYCLE Statement FORTRAN The EXIT statement aborts the loop prematurely jumping the next statement after the end the loop ADD READ NUM Abort negative number entered NUM EXIT SUM SUM NUM END PRINT SUM The CYCLE statement skips the rest the loop and resumes the loop the next iteration ADD READ NUM Ignore negative numbers NUM CYCLE SUM SUM NUM END PRINT SUM END Loop without Parameters FORTRAN The counter start end and inc the END loop are actually all optional The loop terminated instead using the EXIT statement READ NUM SUM SUM NUM Stop when the user enters NUM EXIT END PRINT SUM Warning The EXIT statement must executed eventually otherwise you have infinite loop Which Loop Use Use the END FORTRAN instead the CONTINUE FORTRAN possible Use the WHILE END FORTRAN instead the THEN GOTO FORTRAN unless you have strict FORTRAN compiler Use the WHILE END instead the EXIT END whenever possible Don use EXIT CYCLE unless you have You not not need either for any assignment this class Copyright copy Modified fromGareth Bestor bestor wisc edu Last modified September 