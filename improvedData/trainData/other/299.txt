MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Friday May GMT Roll Dice Solve the Same Birthday PuzzleCompute Probabilities Rolling Matching Dice Java applet below popular puzzle asks How many randomly selected people you need gather order have better than percent chance that two them have the same birthday you make the simplifying and not really true assumption that each person birthday equally likely any day the year but never February independently any other person birthday then this puzzle equivalent asking how many sided dice you must roll order have least chance rolling pair two dice showing the same number The answer turns out surprisingly low lot lower than you actually found people all with different birthdays then course the chance that the next person would have the same birthday one them greater than but fact chances are that you found match long before you collected that many people The Java applet below provides way find the answer this puzzle well many other related puzzles Given the number sides each your dice the number dice you will roll and some limit the number dice that may show any one number after you roll you can press the recalculate button next the probability see the probability that you will able roll all sided dice without generating any matching set more than dice Alternatively you can press the recalculate button next the number dice find out how many dice you need roll order have sufficiently low probability not rolling too many matching numbers For example solve the traditional birthday puzzle select sides most match and percent probability and recalculate the number dice The applet will then tell you that you roll these dice you have only probability having more than die showing any given number that you have chance have least one pair find out how many people you need have better chance have three people with the same birthday change the largest set matches set the probability and recalculate the number dice The text window below the buttons shows some more the results the calculations with slightly greater precision you like you can press Display Probability Distribution make the applet dump its entire internal database counting all the ways you can roll the dice without having too many dice the same Remember all probabilities are given scale percent Beware you set problem that much too hard for example set number sides maximum matches and probability now you asking collect enough people sure that them will share birthday you may find the calculation takes too long runs out memory Meanwhile while runs the applet may freeze your browser Also beware that due the fact that the number the probability field rounded off each time displayed sometimes downward and the rounded value used figure how many dice you should roll repeated recalculation the number dice may result rolling more and more dice get lower and lower probabilities the displayed probability not exactly the number you want enter your desired value rounding your browser has the Java capability you should see the dice rolling control panel here instead this message Last updated April The probability calculations now use slightly faster algorithm David Karr karr cornell edu MIME Version Server CERN Date Friday Nov GMT Content Type text html Content Length Last Modified Thursday Nov GMT Intelligent Robotics ResearchUT Intelligent Robotics Research Spatial reasoning and intelligent robotics based the Spatial Semantic Hierarchy has been focus for research the Qualitative Reasoning group Most our work has concentrated mobile robot exploration and mapping previously unknown environments have used number different simulated robots and are now working with several types physical robots have recently been exploring new methods for real time active vision primarily but not exclusively motivated the navigational needs mobile robot Work heterogeneous control our approach fuzzy control supporting validation via qualitative simulation also relevant the robotics research Robotics Researchers Ben Kuipers kuipers utexas edu Spencer Bishop sbishop utexas edu Rob Browning osiris utexas edu Cliff Chaput chaput utexas edu Bill Gribble grib utexas edu Wan Yik Lee wylee utexas edu Emilio Remolina eremolin utexas edu Indexed Bibliography The Spatial Semantic Hierarchy The TOUR Model Learning from Uninterpreted Sensors and Effectors High Speed Motion Control Swan Neck Highly Redundant Manipulators Mobile Robot Experiments Active Vision The Spatial Semantic Hierarchy Kuipers hierarchy qualitative representations for space Working Papers the Tenth International Workshop Qualitative Reasoning Fallen Leaf Lake California Abstract Kuipers Froom Lee Pierce The semantic hierarchy robot learning Connell and Mahadevan Eds Robot Learning Kluwer Academic Publishers pages Kuipers Byun robot exploration and mapping strategy based semantic hierarchy spatial representations Journal Robotics and Autonomous Systems Reprinted Walter Van Velde Towards Learning Robots Bradford MIT Press Kuipers Byun robust qualitative method for spatial learning unknown environments Proceedings the National Conference Artificial Intelligence AAAI Los Altos Morgan Kaufman The TOUR Model Kuipers and Levitt Navigation and mapping large scale space Magazine vol Summer Reprinted Advances Spatial Reasoning Volume shing Chen Norwood Ablex Publishing Kuipers The cognitive map Could have been any other way Pick and Acredolo Eds Spatial Orientation Theory Research and Application New York Plenum Press pages Kuipers The Map the Head metaphor Environment and Behavior Kuipers representing common sense knowledge Findler Associative Networks The Representation and Use Knowledge Computers New York Academic Press pages Kuipers Commonsense knowledge space learning from experience Proceedings the Sixth International Joint Conference Artificial Intelligence IJCAI Tokyo Japan August Reprinted Advances Spatial Reasoning Volume shing Chen Norwood Ablex Publishing Kuipers Modeling spatial knowledge Cognitive Science Reprinted Advances Spatial Reasoning Volume shing Chen Norwood Ablex Publishing The version the file currently available missing the two figures fix soon possible There Word version the paper that includes the figures but much longer file and fails display reasonably ghostview though seems print correctly Kuipers Representing Knowledge Large Scale Space Doctoral dissertation Mathematics Department Massachusetts Institute Technology Cambridge Massachusetts June Published Technical Report Artificial Intelligence Laboratory Learning from Uninterpreted Sensors and Effectors David Pierce and Benjamin Kuipers Map learning with uninterpreted sensors and effectors Artificial Intelligence Journal Abstract David Pierce Map Learning with Uninterpreted Sensors and Effectors Doctoral dissertation Department Computer Sciences The University Texas Austin May Pierce and Kuipers Learning explore and build maps Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press David Pierce Learning turn and travel actions with uninterpreted sensorimotor apparatus Proceedings the IEEE International Conference Robotics and Automation Los Alamitos IEEE Computer Society Press David Pierce and Kuipers Learning hill climbing functions strategy for generating behaviors mobile robot Meyer and Wilson Eds From Animals Animats Proceedings the International Conference Simulation Adaptive Behavior Cambridge MIT Press Bradford Books Benjamin Kuipers The Map Learning Critter University Texas Austin Artificial Intelligence Laboratory December High Speed Motion Control Richard Froom High Speed Navigation with Approximate Maps Doctoral dissertation Department Computer Sciences The University Texas Austin Richard Froom Approximate maps for high speed control mobile robot Mobile Robots VII Proceedings SPIE the International Society for Optical Engineering Boston November Richard Froom Acquiring effective knowledge environment geometry for minimum time control mobile robot Proceedings the IEEE International Symposium Intelligent Control pages Arlington August Swan Neck Highly Redundant Manipulators Motion planning for the Swan Neck manipulator Akira Hayashi and Benjamin Kuipers continuous approach robot motion planning with many degrees freedom Proceedings the IEEE International Conference Intelligent Robots and Systems IROS Akira Hayashi Kuipers Path planning for highly redundant manipulators using continuous curvature model Proceedings the National Conference Artificial Intelligence AAAI AAAI MIT Press Akira Hayashi Geometrical Motion Planning for Highly Redundant Manipulators Using Continuous Manipulator Model Doctoral dissertation Department Computer Sciences University Texas Austin Austin Texas May Available Mobile Robot Experiments Wan Yik Lee Guide Programming Spot Mobile Robot the University Texas Austin Artificial Intelligence Laboratory The University Texas Austin Laboratory Technical Report June Wan Yik Lee Programming Spot Lisp with SpotLisp Package Artificial Intelligence Laboratory The University Texas Austin Laboratory Technical Report June Active Vision William Gribble Slow visual search fast changing world Proceedings the IEEE Symposium Computer Vision ISCV home BJK Date Tue Jan GMT Server NCSA Content type text html Concepts Programming Languages Suggested Topoics for Term Projects CLA Concepts Programming Languages Fall Assignment Due Wednesday Chapter page Problems Chapter give the bit floating point representation the SparcStation for the following numbers Please group the bits the bytes for easer reading the power Chapter Problems Date Tue Nov GMT Server NCSA Content type text html Last modified Fri Aug GMT Content length Lecture notes Chapter SAL Chapter SAL ABOUT SAL MOTIVATION for SAL hiding the details MAL MIPS asm lang purpose SAL code will look more like HLL code make student transition easier Introducing one more level abstraction order postpone discussion several topics HLL SAL assembly machine code each HLL statement maps into MORE SAL instructions each SAL instruction maps into MORE MAL instructions for this course there actually one more layer that students will given HLL SAL MAL TAL MIPS RISC machine code SAL subset the functionality most high level languages records structures formal arrays see chapter for their implementation What required programming language declarations arithmetic operations conditional execution then else looping control structures communication user write statement About SAL one instruction declaration per line comments are anything line following comments may not span lines DECLARATIONS they give information about how much memory space needed they assign name the memory space SAL has basic types integer float real character can build other types out these for example boolean really integer with only defined values Pascal var variablename type type variablename SAL variablename type value type word integer byte character float real floating point value optional gives the variable initial value examples flag word counter word variable word float uservalue byte letter byte other useful rules one declaration per line default initial value DIRECTIVES way give information the assembler all directives start with period examples byte word float data identifies the start the declaration section there can more than data section program text identifies where instructions are there can more than text section program asciiz string places string into memory and null terminates the string ascii new string places string into memory WITHOUT null termination ARITHMETIC operations SAL Pascal move add sub mul div div rem mod NOTES the operation result depends the type the variables cannot increase the number operands and can IMMEDIATES examples move count mult product mult mult add sum addend NOTE there are other instructions that implement boolean functions but don cover them yet CONDITIONAL EXECUTION sometimes instruction set instructions should executed and sometimes they shouldn HLL simplest form Always discouraged Pascal then else conditional condition then statement else statement then else condition statement else statement SAL ifs and gotos SAL Pascal label goto label bltz label then goto label blez label then goto label beqz label then goto label bnez label then goto label beq label then goto label bne label then goto label blt label then goto label ble label then goto label EXAMPLE Pascal then else count Structured loops can built out and GOTO test and branch EXAMPLES while loop example Pascal while count begin mod count count count end BAD STYLE Pascal while count count count SAL while blez count endwhile rem count sub count count while endwhile next program instruction goes here repeat loop example Pascal statement until expression TRUE repeat then until statement while expression TRUE when expression FALSE exit loop while SAL repeat bge secondif add secondif ble until sub until bne repeat while loop example Pascal while count COMMUNICATION WITH THE USER operations SAL Pascal put write get readln puts string write string SAL doesn have any oddities about testing for eoln eof carriage return just another character read written get has the most irregularities get intvariable places first integer variable finds into intvariable then throws away the rest the line the first value read does not match the type requested then the value placed variable intvariable get charvariable placed the first character variable has into charvariable EXAMPLES INPUT abc fgh SAL CODE get int int PROGRAM EXAMPLE this simple program adds integers and prints their sum and products data prompt asciiz Enter integer prompt asciiz Enter second integer linefeed byte msg asciiz The sum msg asciiz and msg asciiz msg asciiz The product int word int word sum word product word text get the integers from user puts prompt get int put linefeed puts prompt get int put linefeed calculate the sum and products add sum int int mul product int int print out the sum and products puts msg put int puts msg put int puts msg put sum put linefeed puts msg put int puts msg put int puts msg put product put linefeed done Another simple SAL example program SAL program print out multiplication table data start word entered user finish word entered user word loop induction variable word loop induction variable product word prompt asciiz Enter starting value prompt asciiz Enter ending value newline byte symbol byte equals byte space byte text start puts prompt get user input get start puts prompt get finish move start for bgt finish all done nested for loop print out move start the table nested bgt finish next iter mul product print one line table put put space put symbol put space put put space put equals put space put product put newline add nested next iter add put newline for all done done PROCEDURES SAL has rudimentary method for procedure call and return There mechanism for parameter passing function return values procedure parts call SAL procedure call procname execute procedure procname code for procedure goes here return the hard part could branch had label for the return place procname rtn more code here procname procedure code here rtn This does not work just jumps different place the code cannot called from more than one location Needed ADDRESS return Convenient SAL instruction var label stands for Load Address Operation the address implied label placed into var NOTE var must declared integer word Notice difference between address and contents the address label address contents The SAL instruction changes the table above label address contents For procedure call and return save return address before branching the procedure procname ret rtn procname rtn more code here procname procedure code here procname ret THIS STILL DOESN WORK branches label procname ret But procname ret variable Can branch variable solve the problem there special form the instruction used just for procedure return var parentheses identify the special form branches the contents var not var itself the complete call return code procname ret rtn procname rtn more code here procname ret rtn procname rtn more code here procname procedure code here procname ret 