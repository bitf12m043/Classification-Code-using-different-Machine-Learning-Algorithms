Date Mon Dec GMT Server NCSA Content type text html Last modified Wed Feb GMT Content length dynamics Using forces animate objects Introduction There are several good reasons why you may want compute motion objects based forces rather than attempt kinematic description object motion often easier write expression for the forces object differential equation than directly describe the motion Dynamic systems based forces evolve automatically than the motion physically correct given the correct equations This automatic behavior relieves the animator attention lots boring detail For chaotic systems impossible write kinematic description Background The basis many particle systems description the acceleration the particles the accelerations are given then the system called second order because two integrations must done get the positions example consider mass the end spring sliding frictionless horizontal table the force the mass given where the force the spring constant and the length the spring The negative sign appears because the force from spring pulls the opposite direction the spring extension Since where the acceleration Now given the acceleration and know initial velocity and position can find the position the mass any later time the case this linear spring can integrate the acceleration directly find that the position sinusoidal function time The constant will determine the frequency the sinusoidal function while the initial position and velocity will determine the amplitude and phase The position given this simple case the solution available one could code kinematic solution that just plug time into the sin function but notice that the description the system differential form more compact and straightforward Also changed the force more realistic stiff spring model such could not directly integrate but would forced use numerical methods The next section will consider how perform the integration Numerical integration Solving dynamic system means figuring out how move the system forward time from some set initial conditions compute the positions function time For instance you might want trace the trajectory ball after fired from cannon general direct analytical solutions the differential equations governing system are hard impossible will outline some techniques for solving system simple but perhaps not optimal numerical methods disclaimer difficult construct general numerical schemes that work for various physical systems What follows specific approach which works for some systems Consider the barest introduction the topic numerical introduction Much more detail may obtained many other books will consider three specific second order systems Three body gravitation Water waves Billards impact system For each system will first introduce the physics the force law then the scheme integrate the force law produce the time dependent positions will start with integration scheme which will used only for intrducing the notion numerical integration While useful look should almost never used for actual work The Euler integration algorithm Let state again that this algorithm while easy understand inefficient that should only used whem programming effort dominates throughput want start with differential equation and show how integrate numerically Start with the differential equation want solve this equation stepping time discretely forward small steps small still needs defined One discrete approximation this equation where the and refer two time steps sufficiently close together that the differences approximate the derivitive Rearranging this equation yields which gives explicit form for stepping the system from time time This form thus way step dynamic system forward time given initial state The inefficiency this method occurs because the assumption constant across the entire time step accurate the time step has very short compared the natural time constants the system The Verlet integration algorithm much better alogrithm can derived averaging slopes across the small time interval integration One such formulation called the velocity form the Verlet algorithm This algorithm most useful for second order systems where the force object specified and the position desired function time Since the accelerations are specified one integration must done calculate the velocity and second done calculate the position The Verlet scheme first updates the position then use the old and new position information update the velocity Where are the accelerations calculated from force law describing the system and which are usually function position Note that calculated from the just completed calculation for Evaluating both these equations advances the system one time step start the solution velocity and position have known Choosing delta requires some care Generally you can start with time step which around the fastest time constant the system The two Verlet equations can vector equations the motion dimensional Now are ready consider some specific physical systems Gravitation and the three body problem The accleration due gravitating mass where strength contant the mass the object pulling you and the distance between you and Since and are actually vectors must derive form this equation which useful dimensions will use here need equations for the and components the acceleration Assuming body one located and body two located and that want the acceleration body one Where theta the angle measured from the axis the vector pointing toward body one from body two Converting Cartesian form the acceleration body one where the vectors The calculation procedure for each time step compute the acceleration based the positions time new set positions using the Verlet method the acceleration time based the newly computed positions new velocity from the Verlet method using the acclerations times and For the gravitational animation given the beginning this page three masses were simulated The accleration each mass was determined the vector sum the accelerations caused each the other two bodies Water Waves The water wave solver presented here based the derivation Kass and Miller for the case shallow water low amplitude non breaking waves The form the resulting equation motion for the waves looks like the classical linear wave equation with propagation velocity proportional the depth the water where the height the water surface and the depth that where the vertical position the containing vessel ocean bottom The costant poroportional the force gravity This partial differential equation can discretized many ways will use method which stable enough acceptable for computer graphics First note that the partial with respect time the acceleration small surface element water that the right side the equation can put discrete form can apply the Verlet method grid bodies each representing small chunk water solve this equation numerically need discretize both space two dimensional grid and time The discrete spatial approximation that the second derivitives time are were and are the grid indices the and directions and the time index Note that the edges the array the discrete partial derivitives depend values outside the array These boundary conditions need specified for solution One easy boundary condition corresponding transport across the coundary copy the value the edge the array whenever value outside the array needed seems that the solution more stable the minimum depth the water limited about the average value rather than letting zero the depth time given get the surface motion first assign initial height and vertical velocity each grid point then each time step compute the acceleration based the water heights time new set positions using the Verlet method for each the acceleration time based the newly computed heights new velocity from the Verlet method for each Ensure conservation volume the total volume adjusting the average water height constant That sum all the heights over the whole grid then correct the sum equal the initial sum adding small increment each grid location These steps are repeated generate moving waves Disclaimer While this integration method seems give visually reasonable results should not used for analytical simulations without careful validation The wave equation notoriously hard integrate using explicit techniques like the one described here Billards billards hard ball system different than the other two systems just described because the forces between balls are zero until they touch and become very large the balls try pass through each other This means that there large impulsive force just when the balls meet and other times The Verlet integration scheme will fail badly this system because the accelerations are large for short time and thus not smooth enough average What will step the billards system forward time calculate the total change velocity from collision without worrying exactly how forces change the velocity The method described here less exact version that described The method described the paper steps time uneven intervals and thus unsuitable for animation modification steps time uniformly the expense exact collision dynamics The change velocity during impact can derived for frictionless balls equal mass noting that the the impact force must act direction parallel the line connecting the centers the two impacting balls The change velocity must parallel the connecting line also with the velocity component parallel the line having its sign reversed the collision and the velocity component perpendicular the line unchanged Projecting the initial velocity onto the line connecting the centers negating the result and resolving back into and velocity components gives the velocity change and are the indices the colliding balls define then delta for ball given the following where the right most term represents the projection the velocity onto the line and the other term converts the projection back coordinates The calculation procedure for each time step compute the delta based the positions the balls new set positions using walls are present detect collisions and modify velocities The time step needs small enough that the balls not penetrate each other too much during one time step References Introduction Computer Simulation Methods Part Harvey Gould and Jan Tobochnik Addison Wesley Rapid Stable Fluid dynamics for Computer Graphics Micheal Kass and Gavin Miller Computer Graphics Vol Aug Numerical Recipes William Press Saul Teukolsky William Vetterling and Brian Flannery Cambrige edition Studies Molecular Dynamics General Method Alder and Wainwright Journal Chemical Physics Vol Aug Physics for students science and engineering Part Robert Resnick and David Halliday Wiley Comments about Theory Center online documents are welcome and may sent doc comments cornell edu Last modified Land Copyright Statement MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Thursday Nov GMT Honors and Professional Activities Honors and Professional Activities Best Austin Award Austin Chronicle category best argument for tenure Fellow the American Association for Artificial Intelligence Current Prize Automatic Theorem Proving the American Mathematical Society with Strother Moore Member the Editorial Board the Kluwer Academic Series Automated Reasoning since Member the Editorial Board the Journal Logic and Computation Oxford Keynote Address North American Conference Logic Programming Keynote Address Tenth Conference Automated Deduction Skolem Lecture University Oslo Member the Editorial Board the Journal Automated Reasoning since General Chairman Conference Lisp and Functional Programming Member the Editorial Board the Journal Symbolic Computation John McCarthy Prize for Program Verification with Strother Moore IBM Chaire Internationale Informatique Universite Liege Belgium lectures Member the Editorial Board the Journal Artificial Intelligence NASA Fellowship Mathematics Department University Texas Austin Phi Beta Kappa Junior Fellow University Texas Valedictorian King High School Kingsville Texas Date Tue Jan GMT Server Apache Content type text html Content length Last modified Fri Nov GMT Background the Cognitive Systems LabBACKGROUND the Cognitive Systems Laboratory CSL was established faculty from the Departments Computer Science and Industrial Engineering perform research knowledge acquisition knowledge representation expert systems knowledge based systems high productivity development environments human factors simulation and software engineering The CSL Directed Newton Ellis Professor Industrial Engineering and Dick Simmons Professor Computer Science The CSL has performed research for General Dynamics Fort Worth Texaco Houston IBM Austin IBM Westlake Southwestern Bell Telephone Company Dallas and the State Texas Advance Technology Program The CSL seeks encourage top Texas and students pursue research careers addition many the most qualified international students participate research projects within the CSL Also research liaison has been established between the CSL and the Center for Artificial Intelligence ITESM Monterrey Mexico establish acollaborative projects between researchers Texas and Mexico assist top minority students joint projects are planned between the CSL and the Computer Science Department Prarie View University Historically Black College and University HBCU Recently the CSL lab has changed focus are now called the Software Process Improvement Laboratory SPI Lab The focus now aid software engineering projects help visualize software projects This page maintained Douglas Keegan Last updated 