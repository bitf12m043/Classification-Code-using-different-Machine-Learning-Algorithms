MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Thursday Oct GMT Faculty Research InterestsFaculty Research Interests The following are the research interests each the faculty members the Computer Science Department Cornell find out more about any the faculty follow the link his her Annual Report and Personal home pages Kenneth Birman Annual Report Distributed computing fault tolerance high performance communication Bard Bloom Annual Report Semantics programming languages distributed algorithms Claire Cardie Annual Report and Personal Natural language processing machine learning artificial intelligence Thomas Coleman Annual Report Numerical optimization parallel computation Robert Constable Annual Report Theory computation programming logics automated reasoning Bruce Randall Donald Annual Report and Personal Robotics artificial intelligence computational geometry microelectronmechanical systems Donald Greenberg Annual Report Computer graphics computer aided design David Gries Annual Report and Personal Programming methodology programming languages compiler construction Juris Hartmanis Annual Report Theory computation computational complexity Thomas Henzinger Annual Report and Personal Theory concurrent and real time systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report and Personal Computer vision computational geometry digital video Dexter Kozen Annual Report and Personal Theory computation computational complexity analysis algorithms program logics and semantics Paul Pedersen Annual Report Symbolic and algebraic computation and algorithms UCLA Fall Keshav Pingali Annual Report Software for parallel systems compilers Monika Rauch Annual Report and Personal Algorithms data structures graph theory Ronitt Rubinfeld Annual Report Theory computation randomized algorithms computational complexity Gerard Salton Annual Report Information retrieval language and text processing information technology Fred Schneider Annual Report Concurrent programming fault tolerance distributed systems real time systems Alberto Segre Annual Report Artificial intelligence machine learning Iowa Fall Brian Smith Annual Report and Personal Distributed multimedia systems image processing user interfaces information technology Devika Subramanian Annual Report Artificial intelligence machine learning information technology Tim Teitelbaum Annual Report Programming languages systems environments Carlo Tomasi Annual Report Computer vision visual motion interpretation Stanford Spring Sam Toueg Annual Report and Personal Distributed computing fault tolerance real time Lloyd Trefethen Annual Report and Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report and Personal Numerical analysis Thorsten von Eicken Annual Report and Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Ramin Zabih Annual Report and Personal Computer vision multimedia information technology robotics Return Annual Report Home Page Departmental Home Page you have questions comments please contact www cornell edu Last modified March Denise Moore denise cornell edu MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Tuesday Jan GMT Multicast Topics Classes Page for net Homework Page for Network Protocol Implemetation Page for Objected Oriented Design and Programming Newsgroup net Discussion Discussion Spring Course Schedule Click Return Home Page Welcome comments luxue utexas edu Date Wed Jan GMT Server NCSA Content type text html Last modified Wed Jul GMT Content length Fail Aware Clock Synchronization Fail Aware Clock Synchronization Abstract Internal clock synchronization requires that any point time the deviation between any two correct clocks bounded priori given constant Due network partitions unbounded message transmission and process scheduling delays internal clock synchronization impossible implement asynchronous systems address this problem proposing new kind clock synchronization that implementable asynchronous systems with local hardware clocks fail aware clock synchronization The specification that new service derived using the general concept fail awareness this concept allows transform the specification synchronous service into fail aware service such that becomes implementable asynchronous systems illustrate the usage fail aware clock synchronization show how can used solve the highly available fail aware leader election problem The specification fail aware clock synchronization requires that each time server maintains synchronization indicator for any time and any two time servers and the two synchronization indicators and are true then the deviation between and clock time bounded priori given constant and time server which can communicate with majority time servers timely manner and which timely does not suffer performance failures has set its synchronization indicator true show how fail aware clock synchronization can efficiently implemented timed asynchronous systems These systems are characterized precise notion what means that process message timely unbounded message transmission and process scheduling delays and each process has access local hardware clock with drift rate within some given bounds The proposed protocol implement fail aware clock synchronization based the protocols described Each process synchronizes its clock round based fashion Only when succeeds read the synchronized clocks their synchronization indicators are true majority processes within some given reading error the end round can keep its synchronization indicator true for the next round Otherwise synchronization indicator automatically switched false Home WWW Alert Redirection response from server not handled this client Date Sun Aug GMT Server Apache Location http www wisc edu austin talk interview Connection close Content Type text html Moved PermanentlyMoved Permanently The document has moved here 