Date Mon Nov GMT Server NCSA Content type text html Last modified Mon Sep GMT Content length Section Lecture Notes Week Lecture Notes Week Topic Program structure Constants and variables Arithmetic expressions The assignment statement Built functions Unformatted input and output Errors Text Chp Notes Fortran Line StructureFORTRAN programs are composed lines with one statement per line Each line has four sections Column the comment field Columns the line label Column the continuation marker Columns the actual Fortran statement label statement Comment FieldComments are indicated having column Comments take the whole line Everything the line ignored the compiler Comments explain what your program code doing plain English Compute the total cost from the unit cost and quantity ordered TOTCST UNTCST QUANTY Continuation MarkerIf statement too long fit the columns then can split over two more lines Put column indicate that the line continuation the previous line Display the total cost PRINT The total cost TOTCST dollars FORTRAN StatementsAll your FORTRAN statements must start least column helpful hint change your tab setting characters not write any FORTRAN statements starting columns Right TOTCST UNTCST QUANTY Wrong TOTCST UNTCST QUANTY Anything past column ignored the compiler your lines are too long then split them over two lines with continuation marker FORTRAN Program StructureAll FORTRAN programs have the same overall structure Program HeaderVariable DeclarationsMain Executable SectionSTOPENDProgram HeaderGives the name the program PROGRAM ENCIPH STOPTells the program stop running and return DOS ENDTells the compiler that this the last statement the program and should stop compiling FORTRAN VariablesVariable NamesVariables store important values that your program will use hold intermediate results TOTCST UNTCST QUANTY Variable names must start with letter contain only uppercase letters digits and longer than six characters Right TOTCST QUANTY INDEX Wrong TotalCost Not Variable TypesYou must explicitly specify the type each variable what sort value will store The most common variable types are REAL real number with decimal point and fractional part INTEGER positive negative integer number decimal places CHARACTER one more characters word name Variable DeclarationsSpecify the variable type followed the variable name REAL TOTCST UNTCST INTEGER QUANTY INTEGER INDEX For character variables you must also specify the maximum length the character string optional just one character long CHARACTER NAME CHARACTER CHAR WARNING you don explicitly specify the type each variable then will declared default type according the Rule see You must always explicitly declare every variable ConstantsIf the value variable known when you write the program and never changes then turn into constant with the PARAMETER statement REAL PARAMETER variable turned into constant cannot assigned new value later The PARAMETER statement immediately follows the variable declaration Assignment StatementTo store value variable you have declared use the assignment statement variablename expression The variable always the left hand side the assignment statement Right TOTCST UNTCST Wrong UNTCST TOTCST The variable being assigned can also part the expression the right hand side COUNT COUNT First the whole expression evaluated get the result then the result stored the variable The assignment statement does not mean variable equals expression but rather variable gets assigned the value expression This subtle but important difference Arithmetic ExpressionsAritmetic OperatorsFORTRAN supports all the standard mathematical operators multiplication division addition subtraction and also exponential written Example translate the following quadratic equation into FORTRAN written Operator PrecedenceOperators are evaluated order their precedence several operators have the same precedence then they are evaluated left right First exponental Second multiplication and division Last addition and subtraction over ride the default precedence use parenthesis Right Wrong EXCEPTION Consecutive exponents are evaluated right left Example can written Arithmetic FunctionsFORTRAN has many built arithmetic functions see and Appendix SQRT square root SIN sine root COS cosine TAN tangent EXP ALOG natural logarithm ALOG logarithm base NINT round REAL number nearest INTEGERFunctions can used any arithmetic expression EXP TAN SQRT The arguments function can either values variables even arithmetic expressions and are enclosed parentheses Some functions have more than one argument separated commas MOD Type MatchingThe type expression should match the type the variable the result going stored integer variable integer expression real variable real expression the types mismatch then the expression automatically converted match the type the variable truncating any decimal places necessary REAL INTEGER For all the operators both the operands are type INTEGER then the result also type INTEGER either operand type REAL then the result type REAL WARNING With division both the operands are type INTEGER then the result automatically truncated INTEGER also IMPORTANT Always check the argument and return types for functions you know whether not your results will truncated REAL NumbersREAL numbers can written either decimal scientific notation decimal scientific default REAL numbers are printed decimal notation Rounding ErrorsNumbers are stored inside the computer binary format powers base base Most fractions cannot represented precisely binary instead the closest approximimation base stored Therefore most REAL numbers are not stored precisely any computer does not equal IMPORTANT Always use INTEGER values and variables whenever possible because these are stored precisely Only use REAL values you absolutely have CHARACTER StringsTo assign value CHARACTER variable must either another CHARACTER variable string enclosed single apostrophes CHARACTER NAME NAME NAME John Doe NAME NAME The apostrophes are not stored the variable store apostrophe inside and string type two apostrophes NAME John dog John dog the string shorter than the variable then then variable padded with blanks denoted NAME John Doe John Doe the string longer than the variable then the excess characters are ignored the string truncated NAME John Doesnt John Doesn Input and OutputUnformatted OutputTo display results the screen use the PRINT statement PRINT TOTCST print multiple items the same line separate them commas PRINT plus equals You can print values variables arithmetic expressions CHARACTER strings The next PRINT statement prints the next line not the end the previous one Always prompt the user before asking him her type something Otherwise when they run your program they will not know that the computer waiting for them enter value PRINT Please enter the cost the item READ UNTCST Unformatted InputTo read data entered the keyboard the user use the READ statement READ UNTCST You always read variable you are specifying where the value stored You never read expressions literal values The user must press the ENTER RETURN key when she has finished entering line data the keyboard ENTERTo read multiple values entered the same line specify several variable separate commas READ DAY MONTH YEAR the user enters multiple values the same line she does not separate them commas but uses spaces instead ENTERThe values the user types must entered the same order and the same type the variables the READ statement Reading CHARACTER StringsWhen reading CHARACTER strings from the keyboard the user must surround them apostrophes Gareth Bestor ENTERThis may undesirable and can avoided using formatted input which will discuss later see Program for example Types ErrorsSyntax Error compile time problem Computer has idea how translate part your program Misspelling words starting the first line with PROBLAM instead PROGRAM for example using keywords such REAL variable name nonsense characters lines are common examples Semantic Error compile time problem Lines can translated individually but doesn make sense with regard the entire program For example typing IMPLICIT NONE and then trying use variable name not delcared yet Run Time Error run time problem Everything translates fine but when running there are certain steps the computer itself cannot Saying for example legal statement but the computer cannot divide will compile but fail running when the program reached this point Line position Error can any type error none Occurs when line rules not obeyed Can result many things example had READ nauseum and the was the column rest the line would ignored and you still have legal statement not reading may cause problem later the program though the was the column however then only the would ignored and you have syntax error READ cannot end with comma Logical Error occurs run time sort Nothing wrong with the program but not doing what you wanted The computer doing just what told but you written the program incorrectly The hardest and most annoying correct and why important have the algorithm correct your head and paper before you start typing Copyright copy Modified from Gareth Bestor bestor wisc edu Last modified September 