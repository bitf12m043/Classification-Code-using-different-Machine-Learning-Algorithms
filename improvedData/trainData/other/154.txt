MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Monday May GMT Project Report Net Kernel EndpointCS HIGH PERFORMANCE COMPUTER ARCHITECTUREFinal Project Kernel Endpoint for NetMarch May Ankit Patel and Gerry Toll apatel cornell edu gtoll cornell edu Project Description Kernel Endpoint for Net One drawback Net that doesn allow existing applications and kernel facilities TCP easily share the underlying network hardware with Net based user level applications There are least two ways that this problem can solved One idea implement the required services through library user level functions that use Net the transport mechanism Another approach actually construct endpoint inside the kernel and allow access the network hardware via the Net device driver decided the latter because the long run should provide more flexibility than the library based implementation Once the kernel endpoint place any type data can transmitted across the network regardless protocol Additionally may even able communicate with non Net hosts careful about using compatible header formats Our idea take advantage the virtual network interface provided the Net driver and treat real network card inside the kernel While any communication using the kernel endpoint will doubt slower than user level endpoints the idea allow many applications multiplex one kernel endpoint and for existing socket based apps least run The idea not implement other high level protocols but essentially replace the low level kernel functions for sending data ATM Ethernet card with routines which read write the kernel endpoint Project milestones March Project Proposal have met with Matt Welsh get better idea what this project will involve believe that the best platform for this project will running Linux using Fast Ethernet hardware Ideally the abstraction provided Net should allow our code also work across the ATM hardware but whether this proves true remains seen and beyond the scope this project time permits this would natural extension our work our understanding that the basic idea this project provide the ability for the kernel access the Net interface via the already written Net driver will therefore writing code bridge the gap between and the Net device driver Our understanding through diagrams look the Network ArchitecturesApril Checkpoint Meeting Setup hardware Two pentium PCs are interconnected through Fast Ethernet using null modem Setup software Linux well Net software loaded the machines the Kernel code has been compiled The Net pingpong application has been tested run properly however sometimes CRC errors are received which are possibly due absence Fast Ethernet Hub and also the expected latency not obtained With this basic setup have divided the project into two basic parts that each can concentrate one them kendpt lib kernel level implementation devtulip and libunet kendpt dev pseudo ethernet driver that implemented using kendpt lib Major issues decided solved Issue create kernel level endpoint driver that can accept ICMP etc datagrams and passes them the Net driver which then handles their transmission and receipt Issue make one the Net endpoints behave the Kernel Endpoint this requires changes made the Net code force the Kernel Endpoint the kernel space This issue requires thorough understanding the Net architecture and driver code Issue solve the problem when does the kernel endpoint receive the packets from Net and hand the the receiving end The kernel code needs scanned find the right place for this changes Also efficient method other needs implemented Issue Net requires that channel created between two communicating hosts before they can exchange data need devise efficient mechanism for activating and deactivating channels needed Additionally need able map these channels their corresponding addresses large network can maintain channel per host but the overhead activating channel probably too substantial for activate and deactivate once for every transmitted packet Solutions for the above issues April Getting into the code Wanna hackers Here the kernel code and the Net code man hack Issue The kernel uses generic device structure represent all network devices can construct new device struct and trick the kernel into believing that talking real network card need large portion the functionality provided libunet but since the kernel can use its current form have rewrite what need that will work inside the kernel and add the module order get all the stuff need tulip ioctl and tulip devs will have made global inside the kernel Issue April process while kernel mode can still access user space memory through macros get memcpy fromfs put and memcpy tofs verify area used write protection allowed kernel mode for checking the area safe write The Kernel Endpoint works only the kernel space and hence the above functions are not called while creating and deleting endpoints and channels Issue April Net uses polling the receiving end From Net need pick the packets and pass the April considered polling cpu time wasting and signals are not useful kernels The IPC methods are useful only for communication between two processes the problem still remains April tried implementing wake wait queue upcall function pass the buffer and sleep wait queue April However turned out that sleep wake mechanism also not required Simply upcall when packet received Almost time waste Efficiency Increase April But stuck problem again devtulip uses its own device structure have look through the higher level code think that the layers above need not worry about network devices more problems April Hey there can still further increase efficiency Can pick the incoming packets directly from the rings into the instead passing them the endpoints bypass the endpoint and handover the data directly the consulted Matt Welsh who wishes use our modified code later for further extensions Net Sure can But need our code portable for the ATM plus later Matt plans provide interface which would let user processes multiplex via the kernel endpoint without the its more flexible the interface looks just like Net Conclusion use the endpoint Thus the only extra overhead involved copying the buffer once Issue Hey need leave something for the next class May Poster Presentation Project Status Well the semester over with whether done not the project over with Unfortunately ran into too many difficulties and never finished The majority the code written and all the major issues seem resolved Expected Overhead and Future Extensions Thanks lot our Instructor Thorsten von Eicken for providing with the opportunity and hardware work this project and Matt Welsh for maintaining his patience while explaining and explaining the Net driver internals well providing with guidance throughout this project Additional thanks out Alan Cox Michael Johnson and the linux kernel mailing list for their assistance solving our Linux namei problems Related Links For information Net Net Home Page For information Linux Linux Documentation Project All information related TCP maintained Ohio State their online list Internet RFC MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Wednesday Sep GMT GNU ManualsGNU ManualsLast updated All GNU manauls are available PostScript PDF Portable Document Format Most manuals range from printed pages recommend you view them under Ghostview for PostScript Adobe Acrobat Reader for PDF and selectively print those sections you need You can order bound manuals from the Free Software Foundation The Emacs manual and includes fold out reference card GNU Emacs also described Reilly Nutshell book available from your favorite bookstore Bookstop Borders Barnes Noble etc The GNU Debugger Reference Card useful thing print off pages landscape mode and carry with you You can order nice fold out card for from FSF GNU Emacs Manual PostScript only pages GNU Library libg Manual PostScript PDF GNU Stream Library Manual Postscript only pages GNU Make Manual PostScript PDF Intro Make Chapter GNU Make manual PostScript only GNU Debugger gdb Manual PostScript PDF Gdb Reference Card PostScript PDF There manual for RCS but have generated postscript versions the man pages landscape mode that you can print off and use for quick reference rcsintro introduction RCS commands rcs change RCS file attributesq check RCS revisions check out RCS revisions rcsclean clean working files rcsdiff compare two revisions RCS file rlog print log messages about RCS files Date Tue Jan GMT Server NCSA Content type text html Last modified Thu Dec GMT Content length Keck Center for Computational BiologyUpdated December The Keck Center for Computational Biology Houston Texas offers advanced training computational biology the graduate and postdoctoral level and special programs for undergraduates and Houston high school students through its three partner institutions Baylor College Medicine Rice University and the University Houston Science and engineering are the process being transformed the power new computing technologies Our goal train new kind scientist one poised seize the advantages national computational prowess solving important problems biology Our training program emphasizes algorithm development computation and visualization the areas biology biochemistry and biophysics The research groups involved the Keck Center for Computational Biology are the forefronts their respective areas and their laboratories are outstanding settings provide outstanding research environment Financial Supporters the Keck Center Associated Centers Institutes Research AreasPrincipal Faculty and Trainee ParticipantsResearch Training ProgramFellowship Application InformationUndergraduates learn about our summer undergraduate research training program Apply now Center ActivitiesWeb Resources for Computational Biologists you would like more information about the Keck Center and its programs including application questions suggestions concerning these web pages please contact Marc Archambault Executive Director Keck Center for Computational Biology Houston Texas march bioc rice edu Marc Archambault march bioc rice edu Date Mon Nov GMT Server NCSA Content type text html Last modified Mon Jul GMT Content length AppletsAppletsNervousText you were using Java enabled browser you would see dancing text instead this paragraph Scribble you were using Java enabled browser you would see scribble pad instead this paragraph 