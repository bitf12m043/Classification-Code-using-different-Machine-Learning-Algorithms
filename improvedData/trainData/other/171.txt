MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Friday Oct GMT Program Home PageCornell Computer Science Program Welcome the Cornell Department Computer Science program home page Pre Application you are interested applying the program please fill out this pre application and email phd cornell edu Application Guide The Guide gives you complete information our department PhD application process hardcopy this Guide what will sent you along with the application itself and other information after you have completed the Pre Application process Requirements The requirements for the Computer Science are listed here Questions you have any questions that can answered the above please contact Becky Personius Upson becky cornell edu becky cornell edu September MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Monday Aug GMT This practice form Welcome the Order List Please give the answers the following questions Your name Your address What you want order Pizza Burger Fried Chicken Big Mac Others Any drinks Coffee Hot Tea Cocacola Seven Orange Juice Other things Shirt Jeans Wool Sweater Sweatshirt Socks Cotton Sweater Rugby Shirt Leather Jacket Boots Running Shoes Windbreaker Vest Cape How would you like pay Choose any one the following Cash Check Credit card Mastercard Visa American Express Thanks for your order Any comments think Date Wed Jan GMT Server NCSA Content type text html Last modified Tue Dec GMT Content length Hierarchical JPEGHierarchical Coding investigate the effectiveness hierarchical coding layered coding for congestion control ATM Networks have implemented the sequential DCT based hierarchical mode JPEG using the existing baseline JPEG code from the Independent JPEG group Below short tutorial the hierarchical mode JPEG The JPEG Still Image Compression Standard OverviewThe Hierarchical Mode the JPEG StandardDifference between Progressive Mode and Hierarchical ModeReferencesThe JPEG Still Image Compression Standard Overview The JPEG Joint Photographic Experts Group standard was developed under the auspices ISO ISO JPEG Draft International Standard and CCITT CCITT Recommendation and supports both lossy and lossless compression The lossy methods are based the Discrete Cosine Transform DCT The standard specifies four modes operation sequential lossless progressive and hierarchical encoding The progressive and hierarchical modes allow for decompression partially received signal Even though this standard was developed with still images mind also used for video transmission providing intraframe compression only often referred motion JPEG Intraframe compression provides much lower compression ratios for video than combined intra and interframe compressio frames Sequential encoding probably the most common mode for most applications involves encoding each image component single left right top bottom scan The most widely used mode JPEG the baseline mode which subset the sequential encoding based the Discrete Cosine Transform DCT the baseline encoding algorithm each component the source image divided into pixels non overlapping blocks The pixel values each such block are first level shifted from unsigned signed integers and then input the forward DCT The resulting DCT coefficient values can regarded the relative amount spatial frequencies contained the input image The coefficient measure the average value the image pixels The next step quantize the DCT coefficients The purpose this step achieve further compression quantizing high frequency components with larger step size more coarsely This because high spatial frequencies require less detailed coding This step discards visually unimportant information and thus makes the approach lossy These quantized coefficients are then entropy encoded with the coefficients being treated specially Since the coefficients are measure the average value the pixels the block they are expected show less variation within the same component and therefore are differentially encoded The quantized coefficients are ordered zigzag sequence starting from the top left corner and traversing the nearest cells first This ordering puts the low frequency coefficients before the high frequency ones and thus facilitates entropy coding The coefficients are first run length encoded and then coded using Huffman arithmetic coding The output from the entropy encoder the output the JPEG encoder The JPEG decoder simply reverses this process using entropy decoder dequantizer and the inverse DCT reconstruct the image The Hierarchical Mode the JPEG Standard The hierarchical encoding mode JPEG HJPEG encodes image multiple resolutions each differing from its adjacent level factor two the horizontal vertical directions both The image first bandsplit the basis spatial frequency and subsampled the desired number multiples two either both dimensions For sequential DCT based HJPEG this new reduced size image called frame JPEG terminology encoded using the sequential mode described previously Then the encoded reduced size image decoded interpolated and upsampled two horizontally and vertically This upsampled image then used prediction the original image this resolution and the difference image computed The difference image called differential frame then encoded using the sequential mode Finally the last two steps are repeated until the original image full resolution has been encoded Difference between Progressive Mode and Hierarchical Mode the progressive mode the DCT coefficients blocks are encoded multiple scans Like the hierarchical mode the progressive mode requires image sized buffer for storing the coefficients between quantizer and the entropy coder Two procedures spectral selection and successive approximation are defined for encoding the quantized coefficients the buffer Spectral selection encodes specified band coefficients each scan Successive approximation encodes the most significant bits the first scan and then the less significant bits each subsequent scan The hierarchical mode described previously provides progressive presentation with increasing spatial resolution between progressive stages The image quality extremely low bit rates reported superior any other modes JPEG including the progressive mode Both the progressive and the hierarchical mode allow the progression image from coarse refined However the multiple resolutions the hierarchical mode provide edge over the progressive mode the following two cases Heterogeneous end user devices When user has low resolution display device maximum resolution for that device always possible without receiving unnecessary data for higher resolution the hierarchical mode used Both the required bandwidth and the transmission time are reduced for lower resolution display device the case the progressive mode user can still see the progression image however the total transmission time fixed for the full resolution Therefore the progressive mode does not attend various user devices efficiently The extended use network bandwidth and transmission time progressed the full resolution completely incurs unnecessary cost the devices have lower resolutions than the coded image Multimedia data storage Thumbnail images are feasible the hierarchical mode However the separation image layer for storing different storage device not justified the progressive mode since progression full resolution may necessary regardless image sizes Note also that the hierarchical mode can use other modes JPEG for the progression Thus even finer granularity the progression possible the progressive mode used instead sequential mode the other hand the progressive mode JPEG does not have any overhead bit rate over the sequential mode JPEG whereas the hierarchical mode does References Wallace The JPEG Still Picture Compression Standard Communications the ACM July Han and Polyzos Networking Applications Hierarchical JPEG IEEE International Phoenix Conference Computers and Communications IPCCC Phoenix March Plaintext Abstract PostScript pages also Technical Report Dept Computer Science and Engineering University California San Diego Jolla May Pennebaker and Mitchell JPEG Still Image Data Compression Standard Van Nostrand Reinhold Last updated December Top Back Home Page Date Mon Nov GMT Server NCSA Content type text html Last modified Tue Feb GMT Content length Problem Set UNIVERSITY WISCONSIN MADISON Computer Sciences DepartmentCS Spring Bart MillerProblem Set Problem You have been hired the Wisconsin Department Transportation computerize traffic control way intersection pictured below The east west street one way westbound The north south street two way The rules for this intersection are Each car process arriving the intersection will call procedure Enter inDir outDir where inDir and outDir are parameters whose value one the defined constants NORTH SOUTH EAST WEST The parameter inDir the direction that you enter the intersection and outDir the direction that you will leave the intersection This procedure returns only when safe proceed through the intersection After leaving the intersection the car process must call procedure Leave outDir where outDir defined the same above Cars can proceed straight make legal turns turns are illegal cars are waiting from both the north and east directions they should proceed the same time they can safely cars are waiting from both the north and east directions and they cannot both safely proceed the same time they must alternate this prevents starvation The east west street has single lane The north south street has two lanes one either direction You are write the code for the Enter and Leave procedures You can assume that you are supplied with already written procedure called DriveThroughTheIntersection You have idea how long this procedure takes execute You should write three versions the program For all three these programs you should use the The first program will written using semaphores the synchronization mechanism Assume that car each process You are define the global variables including semaphores that are used and how they are initialized You are then write the code that the cars will use The second program will written using monitors Use with monitor classes have done lecture Again assume that each car process You are first describe the monitor that will used the cars For each monitor you should describe the data maintained the monitor and the initial values You should also describe the procedures within each monitor that are used for synchronization Last describe the code that the cars use call the monitors etc properly synchronized The procedures Enter and Leave will probably not monitor else rule will difficult obey Enter and Leave will probably call procedures within monitor monitors The third program will written using messages Assume that have processes communicating via messages The processes not have any shared memory Each mail box has unique name which character string like bart HiThere You will have three communications primitives Send Receive and CreateMailBox The send operation looks like Send const char mailBoxName const char contents The mailBoxName string naming the destination mail box and you might want use names such waitQueue trafficCop The contents are anything you want send the message The send operation does not block and will assume that there are error cases like unknown mail box handled After send you know that the message queued the mail box The receive operation looks like Receive const char mailBoxName char contents The mailBoxName string naming the mail box The receive operation blocks until message gets delivered message already available message arrives after the receiver has blocked then the receive returns When the receive returns the contents gets filled with the contents that were sent with the message The create operation looks like CreateMailBox const char mailBoxName The mailBoxName string naming the newly created mail box Mail box names must unique You are design the code that will executed each process with the first two programs assume that each car process You may also create any extra processes that you find useful Problem You are given system that has binary semaphores That you can declare variables with the class binSem and you can perform the constructor and BinP and BinV methods these variables Using these binary semaphores you are implement general semaphores this system You will define new class called genSem and write the code for the constructor and GenP and GenV methods Problem important aspect multiprocessing using multiple processes concurrently compute single problem With this mind write program that uses four processes multiply two matrices and and store the result the matrix The heart your program will procedure called MatrixMult row column that multiples row row times column column and stores row column Assume the matrices are memory global all the processes What any synchronization mechanisms primitives you need for your solution Why Last modified Fri Feb CST bart 