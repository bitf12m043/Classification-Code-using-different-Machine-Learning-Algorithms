MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Saturday Jun GMT IncrementalizationIncrementalization General Systematic Approach Efficiency ImprovementObjectives are engaged ambitious effort derive incremental programs automatically semi automatically from non incremental programs written standard programming languages This approach contrasts with earlier approaches that aimed incrementally evaluate non incremental programs essence every program computes fixed point iteration expressed recursive functions loops This why loop optimizations are important loop body can regarded program parameterized induction variable that incremented each iteration change operation Efficient iterative computation relies effective use state computing the result each iteration using stored results previous iterations This why strength reduction and related techniques are crucial for performance Given program and input change operation program that computes efficiently using the result the previous computation called incremental version under Sometimes information other than the result needs maintained and used for efficient incremental computation call function that computes such information extended version Thus the goal computing loops efficiently corresponds constructing extended version program and deriving incremental version the extended version under input change operation general incremental computation aims solve problem sequence inputs that differ only slightly from one another making use the previously computed output computing new output instead computing the new output from scratch Incremental computation fundamental issue relevant throughout computer software optimizing compilers transformational program development and interactive systems Results Thus far have partitioned the problem deriving incremental programs into three subproblems Exploiting the result the return value Caching exploiting and maintaining intermediate results values computed the middle computing Discovering computing exploiting and maintaining auxiliary information information not computed all that can inexpensively maintained summarize here the essence our methods Systematic Derivation Incremental Programs gave general systematic transformational approach for deriving incremental version program under input change The basic idea identify the computation those subcomputations that are also performed the computation and whose values can retrieved from the cached result The computation symbolically transformed avoid performing these subcomputations replacing them with corresponding retrievals This efficient way computing captured the definition Caching Intermediate Results for Program Improvement gave method called cache and prune for statically transforming programs cache all intermediate results useful for incremental computation The basic idea extend the program program bar that returns all intermediate results incrementalize the program bar under obtain incremental version bar bar using our method for III analyze the dependencies bar then prune the extended program bar program hat that returns only the useful intermediate results and prune the program bar obtain program hat that incrementally maintains only the useful intermediate results Discovering Auxiliary Information for Incremental Computation proposed approach for finding auxiliary information Auxiliary information definition useful information about that not computed Where then can one find The key insight this approach Consider candidate auxiliary information for all intermediate computations incremental version that depend only such incremental version can obtained using some techniques developed for solving and use techniques developed for solving and instead just that the candidate auxiliary information includes auxiliary information useful for efficiently maintaining the intermediate results How can one discover which pieces candidate auxiliary information are useful and how they can used proposed Extend with all candidate auxiliary information then apply some techniques used our methods for and obtain extended version and incremental extended version that together compute exploit and maintain only useful intermediate results and useful auxiliary information Thus the one hand one can regard the method for extension method for the other hand one can regard method for aids for solving Similarly the one hand one can regard the method for extension methods for and the other hand one can regard methods for and aids for solving The modular components complement one another form comprehensive principled approach for incremental computation and therefore also for efficient iterative computation generally Although the entire approach seems complex each module step simple CACHET Interactive Incremental Attribution Based Program Transformation System For Deriving Incremental Programs describe our prototype implementation these ideas Annie Liu yanhong cornell edu Last updated Date Mon Jan GMT Server NCSA Content type text html Department English The Department English part the College Liberal Arts The University Texas Austin offers programs leading the and degrees Check What New and Good regularly for the latest happenings GeneralHighlights Academic Calendar Departmental Newsletter Graduate ProgramHighlights Introduction Selected Faculty Publications Undergraduate ProgramHighlights Advising Office Major Requirements Honors Program Special ProgramsHighlights Shakespeare Winedale Oxford Summer Program Writing Contests CoursesHighlights Spring Undergraduate Courses Fall Graduate Courses Lecture Hall FacilitiesHighlights Undergraduate Writing Center Computer Writing and Research Lab PeopleHighlights Faculty Office Hours English WorldThis the visit this page since November October English Department College Liberal Arts Austin Comments englweb www dla utexas edu About the photo above Date Tue Jan GMT Server NCSA Content type text html Last modified Fri Dec GMT Content length Computer Science Department Faculty Guests Research Staff PhD Candidates Masters Candidates Masters Candidates Information Systems Alumni Instructor Office Hours Last revised csweb nyu eduCS Dept NYU GSAS CIMS Date Mon Nov GMT Server NCSA Content type text html Last modified Sat Jun GMT Content length Minor Netscape Hacks Making Netscape neat tricksNote think this only works Mozilla Try replacing the string jwz with gid your netscape binary Then reload this page and watch the animation when the page loads The animation the thing the upper right corner that does stuff when data being transferred and whatnot Use binary editor change the strings the executable program Emacs works fine you have try binary overwrite mode help avoid typing too many characters Enjoy watching the compass spin round and round This reminds joke What red and green and goes round and round frog the blender Hmmmm you look jwz homepage the animation still becomes the compass even with Netscape There must way make this work for normal pages but probably more complicated than changing ascii string the binary Pull out those debuggers folks 