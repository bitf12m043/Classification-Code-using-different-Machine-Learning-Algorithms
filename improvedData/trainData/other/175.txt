MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Sunday Dec GMT Research Interests the Faculty and Senior ResearchersResearch Interests the Faculty and Senior Researchers The following are the research interests each the faculty members the Computer Science Department Cornell find out more about any the faculty follow the link his her Annual Report and Personal home pages Kenneth Birman Annual Report Distributed computing fault tolerance high performance communication Claire Cardie Annual Report and Personal Natural language processing machine learning artificial intelligence Paul Chew Annual Report Geometric algorithms mesh generation Thomas Coleman Annual Report and Personal Numerical optimization parallel computation Robert Constable Annual Report Theory computation programming logics automated reasoning Bruce Randall Donald Annual Report and Personal Robotics artificial intelligence computational geometry microelectro mechanical systems Donald Greenberg Annual Report Computer graphics computer aided design David Gries Annual Report and Personal Programming methodology programming languages compiler construction logic Joe Halpern Personal Reasoning about knowledge and uncertainty qualitative reasoning fault tolerant distributing computing belief revision logic game theory Juris Hartmanis Annual Report Theory computation computational complexity Monika Rauch Henzinger Annual Report and Personal Algorithms data structures graph theory Thomas Henzinger Annual Report and Personal Theory concurrent and real time systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report and Personal Computer vision computational geometry digital video Jon Kleinberg Personal Algorithms combinatorial optimization computational geometry computational biology Srinivasan Keshav Personal Computer networking telecommunication distributed computing Dexter Kozen Annual Report and Personal Theory computation computational complexity analysis algorithms program logics and semantics Dean Krafft Annual Report and Personal Digital libraries information access Bruce Land Annual Report and Personal Computer graphics Yuying Annual Report Scientific computation numerical optimization Gregory Morrisett Personal Programming languages distributed systems runtime systems concurrency Keshav Pingali Annual Report Software for parallel systems compilers Robbert van Renesse Annual Report Distributed computing fault tolerance distributed multimedia systems Ronitt Rubinfeld Annual Report and Personal Theory computation randomized algorithms computational complexity Fred Schneider Annual Report Concurrent programming fault tolerance distributed systems real time systems Praveen Seshadri Personal Database systems Brian Smith Annual Report and Personal Distributed multimedia systems image processing user interfaces information technology Eva Tardos Personal Theory algorithms complexity theory Tim Teitelbaum Annual Report and Personal Programming languages systems environments Sam Toueg Annual Report and Personal Distributed computing fault tolerance real time systems Lloyd Trefethen Annual Report and Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report and Personal Numerical analysis Thorsten von Eicken Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Samuel Weber Personal Semantics programming languages distributed algorithms Ramin Zabih Annual Report and Personal Computer vision multimedia information technology robotics Richard Zippel Annual Report Symbolic mathematics scientific software Return Annual Report Home Page Departmental Home Page you have questions comments please contact www cornell edu Last modified December Denise Moore denise cornell edu MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Tuesday Aug GMT Mark Johnstone PublicationsMark Johnstone PublicationsReal Time garbage collection Paul Wilson Mark Johnstone Truly real time non copying garbage collection OOPSLA Workshop Memory Management and Garbage Collection October Malloc studies Paul Wilson Mark Johnstone Michael Neely and David Boles Dynamic Storage Allocation Survey and Critical Review IWMM September Date Wed Jan GMT Server NCSA Content type text html Last modified Fri Sep GMT Content length Fun Stuff Fun Stuff Comics Calvin and Hobbes Archive Calvin and Hobbes Gallery The Comic Book and Comic Strips Page The San Diego Comic Con Page Doctor Fun European Comics the Web Asterix Arkas Various Games ESPNET SportsZone NBA Yahoo Entertainment Visit home page Date Mon Nov GMT Server NCSA Content type text html Last modified Fri Mar GMT Content length Programming Assignment UNIVERSITY WISCONSIN MADISON Computer Sciences DepartmentCS Spring Bart MillerProgramming Assignment Due Tuesday March Parallel Producer Consumer Program The goal this assignment get experience writing program that actually runs parallel You will write program with four processes structure like The Reader process will read input file one line time Reader will take the each line the input and pass process Munch Munch will scan the line and replace each blank character with asterisk character will then pass the line process Munch Munch will scan the line and convert all lower case letters upper case convert will then pass the line process Writer Writer will write the line output file Synchronization and Communication The processes will communicate through shared memory Each the three pairs communicating processes will have queue buffers between This queue will represented class that you will call SyncQueue The SyncQueue class will implemented fixed sized buffer the constructor for the class will take parameter with default set the size the buffer You should use semaphores make sure that processes not insert remove data from the same queue the same time You should also make sure that each buffer queue locked separately that only the pair processes using that buffer queue would block The semaphores should part the SyncQueue class definition each instance the class produces new queue with new semaphores You will use the semaphore and thread operations supported the Solaris operating system have prepared summary the functions that you will use and special instructions for compiling your program For this assignment you must use Sun workstation running the Solaris operating system For semaphore operations you will use sema init sema wait the operation and sema post the operation addition the description that provide you can use the man command find out more about these functions Compiling Your Program You must few special things compile program use threads and synchronization Follow the instructions carefully you will get strange and incorrect results Program Details Your program will create four new threads this you will start your program and will create four threads using the thr create function Thread Reader will read each input line the line longer than characters will truncate characters plus the null byte the end Just throw away any extra characters See the manual page entry for the function index making writing Munch easier See the manual page entries for islower and toupper making writing Munch easier Read these function names lower and upper Thread Writer will count the number lines and print this number cout Deliverables You should hand print out your program including all and files Also hand your Makefile You should run your program the data stored public program DATA test This file not yet available not print the data file nor should you hand the output your program After your program completed you will meet with Muthiah demonstrate your running program Make sure that you not modify your files after you turn the program Last modified Tue Feb CST bart 