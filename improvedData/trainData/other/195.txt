MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Saturday Aug GMT Term ProjectParallel Ray Tracing Vineet Ahuja Amith Yamasani propose parallelize existing implementation ray tracer called Raylab which public domain software This sample scene reduced here took approximately minutes render the sequential version have finished learning and now intend investigate strategies for parallelization the code will then convert the program first program currently and then hope come close speed The program will implemented the port DATE TIME MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Monday Aug GMT Student ModelingStudent Modeling for ITS view paper click the open book image Novel Application Theory Refinement Student Modeling Paul Baffes and Raymond MooneyProceedings the Thirteenth National Conference Aritificial Intelligence Portland August AAAI Theory refinement systems developed machine learning automatically modify knowledge base render consistent with set classified training examples illustrate novel application these techniques the problem constructing student model for intelligent tutoring system ITS Our approach implemented ITS authoring system called Assert which uses theory refinement introduce errors into initially correct knowledge base that models incorrect student behavior The efficacy the approach has been demonstrated evaluating tutor developed with Assert with students tested classification task covering concepts from introductory course the programming language The system produced reasonably accurate models and students who received feedback based these models performed significantly better post test than students who received simple reteaching Refinement Based Student Modeling and Automated Bug Library Construction Paul Baffes and Raymond MooneyJournal Artificial Intelligence Education critical component model based intelligent tutoring sytems mechanism for capturing the conceptual state the student which enables the system tailor its feedback suit individual strengths and weaknesses useful such modeling technique must practical the sense that models are easy construct and effective the sense that using the model actually impacts student learning This research presents new student modeling technique which can automatically capture novel student errors using only correct domain knowledge and can automatically compile trends across multiple student models This approach has been implemented computer program ASSERT using machine learning technique called theory refinement which method for automatically revising knowledge base consistent with set examples Using knowledge base that correctly defines domain and examples student behavior that domain ASSERT models student errors collecting any refinements the correct knowledege base which are necessary account for the student behavior The efficacy the approach has been demonstrated evaluating ASSERT using students tested classification task covering concepts from introductory course the programming language Students who received feedback based the models automatically generated ASSERT performed significantly better post test than students who received simple teaching Automatic Student Modeling and Bug Library Construction using Theory Refinement Paul Baffes Thesis Department Computer Sciences University Texas Austin December The history computers education can characterized continuing effort construct intelligent tutorial programs which can adapt the individual needs student one one setting critical component these intelligent tutorials mechanism for modeling the conceptual state the student that the system able tailor its feedback suit individual strengths and weaknesses The primary contribution this research new student modeling technique which can automatically capture novel student errors using only correct domain knowledge and can automatically compile trends across multiple student models into bug libraries This approach has been implemented computer program ASSERT using machine learning technique called theory refinement which method for automatically revising knowledge base consistent with set examples Using knowledge base that correctly defines domain and examples student behavior that domain ASSERT models student errors collecting any refinements the correct knowledge base which are necessary account for the student behavior The efficacy the approach has been demonstrated evaluating ASSERT using students tested classification task using concepts from introductory course the programming language Students who received feedback based the models automatically generated ASSERT performed significantly better post test than students who received simple reteaching Learning Model Students Using Theory Refinement Detect Misconceptions Paul Baffes proposal Department Computer Sciences University Texas Austin new student modeling system called ASSERT described which uses domain independent learning algorithms model unique student errors and automatically construct bug libraries ASSERT consists two learning phases The first application theory refinement techniques for constructing student models from correct theory the domain being tutored The second learning cycle automatically constructs the bug library extracting common refinements from multiple student models which are then used bias future modeling efforts Initial experimental data will presented which suggests that ASSERT more effective modeling system than other induction techniques previously explored for student modeling and that the automatic bug library construction significantly enhances subsequent modeling efforts Using Theory Revision Model Students and Acquire Stereotypical Errors Paul Baffes and Raymond Mooney Proceedings the Fourteenth Annual Conference the Cognitive Science Society Bloomington July Student modeling has been identified important component the long term development Intelligent Computer Aided Instruction ICAI systems Two basic approaches have evolved model student misconceptions One uses static predefined library user bugs which contains the misconceptions modeled the system The other uses induction learn student misconceptions from scratch Here present third approach that uses machine learning technique called theory revision Using theory revision allows the system automatically construct bug library for use modeling while retaining the flexibility address novel errors estlin utexas edu Date Tue Jan GMT Server Apache Content type text html Content length Last modified Sat Dec GMT HCI Courses Stanford The following courses are being offered Human Computer Interaction and Graphics Stanford For information other courses related HCI see the listing HCI related courses Autumn QuarterCS Introduction Human Computer Interaction Design Introductory course based discussions case studies notable design examples Enrollment limited units Winograd Thornton Introductory Computer Graphics Undergraduate level introduction the field computer graphics units Johnson Gates Visualizing computer systems This new course will explore the use visualization design and understand computers and computer systems units Hanrahan Levoy Rosenblum Tue Thu Gates register Music Human Computer Interface Design Experimental multi university video conference course interface devices units Aut Chafe Forsythe plus labs and meetings TBA Human Computer Interaction Seminar Weekly speaker series unit Aut Win Spr Winograd Skilling AuditoriumWinter QuarterCS Human Computer Interaction Interaction Design Studio HCI Design projects individual studio format and groups Enrollment limited units Bill Verplank Colin Burns Andrew Singer Interval Two sections will probably held Division will done the first day class see the course page Interactive Narrative and Artificial Intelligence Same English units Hayes Roth Friedlander English Introduction Computer Graphics units Hanrahan TTh Gates Sensing for Graphics units Levoy Curless TTh Phenomenological Foundations Cognition Language and Computation Readings and discussion units Winograd See Also History Computers also listed STS HPS History COMM Computers and Interfaces Psychological and Societal Issues units Win Nass Stanford Humanities Center Research Workshops Discourse Networks Epistemologies Information TechnologiesInteractive Media Theory WorkshopSpring QuarterCS Human Computer Interaction Projects Contextual and Organizational issues Group project analyzing the design computer information systems actual context use units Spr Winograd Bonnie Johnson Interval Computer Graphics Image Synthesis Techniques units Spr Levoy TTh Gates Topics Computer Graphics announced units Spr Hanrahan TTh Topics Human Computer InteractionCS Game Craft User Interface Design enrollment limited Chuck Clanton Aratar Machine Perception for Human Computer Interface Trevor Darrell Interval Digital Multimedia Tools Environments Also listed Music Stephan Schwanauer Sumitomo and CCRMA Mondays Reactive and Proactive Computer Agents Ted Selker IBM Human Computer Interaction Seminar unit Aut Win Spr Winograd Skilling Auditorium Courses not offered this year which may offered again future years Principles from the Cognitive Sciences for Human Computer Interaction units Hank Strub Interval Interaction Product Design Design project combining product and interface design interdisciplinary teams David Kelley Sabbatical this year Interaction Design Nathan Shedroff vivid Click here for list HCI related courses StanfordInformation last updated December Date Tue Nov GMT Server NCSA Content type text html Last modified Sun Aug GMT Content length Directions Ben Office Directions Office get walk into the building front door Dayton and keep walking straight until you see the large Computer Sciences Department photo board through the door the right the photo board and take the stairs one and half floors You will see door with piece paper taped that says through that door and follow the hallway around the corner until you see large fishbowl like office desk this office the one with the bumper sticker the monitor For visual directions try Tom Hogan virtual reality map 