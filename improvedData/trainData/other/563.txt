Date Mon Dec GMT Server NCSA Content type text html Last modified Fri Dec GMT Content length Sean Landis Fall Context Based Image Retrieval Project PageSean Landis Project Fall Content Based Image Retrieval Systems for Interior DesignTable ContentsIntroductionBackground Manual Image Analysis Automated Image Analysis Image Features Indexing and QueriesCurrent Research Feature Extraction Query Specification Distance Metrics Indexing Extensibility Artificial Intelligence Maximizing Domain KnowledgeProject Overview Project DefinitionImplemention Storage Manager Analysis Manager Query Manager Display Manager and the User Interface Image Menu View Menu Query Color Algorithms Query Pattern AlgorithmsResults Color Queries Pattern Queries User Interface Design LimitationsConclusions Usefulness Future WorkReferencesIntroduction Computers are beginning replace photographic archives the preferred form repository Computer based image repositories provide flexibility that cannot attained with collections printed images Recently there has been explosion the number images available computer users this number increases users require more sophisticated methods retrieval Content based image retrival CBIR promises fill this requirement There are many diverse areas where CBIR can play key role the use images Art galleries and museum management Architectural and engineering design Interior design Remote sensing and natural resource management Geographic information systems Scientific database management Weather forecasting Retailing Fabric and fashion design Trademark and copyright database management Law enforcement and criminal investigation Picture archiving and communication systems Education Entertainment With many applications CBIR has attracted the attention researchers across several disciplines Background Content based retrieval based understanding the semantics the objects collection Semantic analysis performed when the object inserted into the collection Given semantic representation the objects collection user can compose query that retrieves set objects with similar semantics Query analysis usually performed index structure that summarizes the data the collection Content based image retrieval the semantic analysis and retrieval images Semantic analysis may involve manual intervention may entirely automated Manual analysis involves human interpretation associate semantic properties with image Automated semantic analysis extracts image features that are correlated with some semantic meaning the image Both analysis methods have their advantages and their drawbacks Manual Image Analysis Traditional databases use text key words labels efficiently access large quantities text data Even complex text data can automatically summarized and labeled using natural language processing and artificial intelligence When the data are images rather than text summarizing the data with labels becomes considerably more difficult For example consider repository news photographs user may wish pose query such Give all new photographs containing President and communist leader support queries like this images require labeling that indicates the people the images their title their nationality and their political alignment not known how humans can process electromagnetic signals and convert them into highly detailed semantic interpretations Therefore human analysis required generate labels that support sophisticated queries like the one above But there are problems with human analysis Personal perspective One person interpretation the important features image may not match another person interpretation Personal perspective leads variance image analysis and labeling Domain mismatch person domain interest may influence image feature selection and analysis Interface expressivenessHuman computer interfaces provide limited bandwidth expressive capability Image analysis limited the expressiveness the interface Data entry errorsHumans are error prone especially when set task which tedious redundant Because these and other problems best automate image analysis much possible Where intervention required the user should limited set unambiguous choices Automated Image Analysis Automated image analysis calculates approximately invariant statistics which can correlated the semantics the image data Example statistics are color histograms invariants shape moments and edges Statistical analysis useful because provides information about the image without fickle and costly human interaction Despite its appeal automated image analysis suffers drawbacks The primary problem with statistical analysis that extracted features can only support very specific type query The features apply particular domain but they are not useful for posing general purpose queries against diverse data sets Consider image database indexed color histogram For each image feature vector generated such that each element the vector represents the percentage color quantum found the image three element vector could have quantums representing red green and blue practice color feature vector requires more than three elements The feature vector for image contains the quantized percentage red green and blue The more quantums available the greater the accuracy the feature vector and the greater the cost indexing and comparison the database contained fabric images color histogram would powerful way pose query user interested designing men casual shirt for spring wants bright spring like colors The query posed with the desired color mix and all fabrics containing similar mixes the specified colors are retrieved the other hand the database contained news photographs described earlier then color histograms would not very useful The semantics the images the database not correlate well with color histograms Image Features image feature piece semantic information extracted from the image There are several properties for measuring the quality feature CapacityThe number distinguishable images that can represented Maximal Match NumberThe maximum number images query could possibly retrieve ComplexityThe amount computation required determine two images are similar for particular feature CompactnessThe amount space required store and compare feature Image features can categorized either primitive logical primitive feature low level statistical attribute image such object boundry color histogram Primitive features are automatically extracted directly from the image logical feature represents abstract attribute such the label grass assigned region image Logical features rely information beyond that contained the image The delineation between primitive and logical features not always clear Consider image which representation scene containing several objects Features representing the objects might either primitive logical features the extraction generates feature containing edge information then primitive feature the other hand the extraction identifies the object name say utilizing model based approach logical feature Primitive features are often used the basis for generating logical features common CBIR system architecture layers logical feature extraction top primitive featue extraction Primitive features are extracted directly from the image generate segemented image From this information more abstract logical features are generated Segementation the process dividing the image into regions that correspond structural units interest Indexing and Queries The goal indexing create compact summary the database contents provide efficient mechanism for retrieval the data The summary data based feature vectors Since content based visual databases all items images objects are represented pre computed visual features the key attribute for each image will feature vector which corresponds point multi dimensional feature space and search will based similarities between the feature vectors Therefore achieve fast and effective retrieval requires efficient multi dimensional indexing scheme Multiple indexing schemes may required support queries involving combination features utilize multiple indexes hierarchical approach often used where each component query applied against appropriate index higher layer merges results for presentation the user CBIR queries are posed fuzzy fashion The user typically interested results according similarity rather than equality This requirement influences the indexing scheme the methods feature comparison and the means which queries are solicited from the user Image similarity usually determined computing distance measure between the query and the appropriate feature vectors the index structure Similar images are ranked according distance Thresholding may used reduce the number similar images presented the user query created composing primitive and logical feature vectors present simple and structured query environment CBIR systems define query classes Some typical query classes are Color partial histogram created specifying colors and percentages Texture Texture features include directionality periodicity randomness roughness regularity coarseness color distribution contrast and complexity Sketch The user creates sketch representing outline matched against dominant image edges Shape example shape created using simple painting tools The shape compared objects within images for similarity Volume Volumetric relationships are specified using tools Feature vectors contain information Spatial constraints The feature vector contains topological relationships among the objects image Browsing The user presented with structured method viewing the entire database Objective features Objective features are attributes such date image acquisition light direction and view direction These features lend themselves the methods used traditional databases Subjective features Feature extraction manual semi automatic and subject human interpretation Examples are region labels and manual object identification Motion Motion applicable series images such video segments Motion features measure movement objects the sequences other movement such camera viewpoint and camera focal point Text Either simple complex text can associated with images For the simple case traditional database methods can used Complex systems use natural language processing and artificial intelligence reason about text annotations Domain concepts Domain information lends itself specific forms feature vectors and queries Query classes provide meaningful way for user create feature vectors that correspond their notion image semantics Queries can composed multiple query classes alternative user composed queries are queries example The user submits query the form prototype image and the system uses the feature vector the appropriate query class Often session will begin with user composed queries which are then refined through query example run interactive query system called Query Image Content QBIC click here Current Research There are large number researchers exploring CBIR related topics focused recent work which has been more productive The following sections describe some the important topics studied Feature Extraction Feature extraction performed when image added the database CBIR systems provide support for multiple query classes Pickard and Minka use different features characterize images from the MIT Photobook image retrieval system The CORE system retrieval engine that supports wide range features including visual browsing color similarity measures and text Primitive features are combined create higer level logical features they call concepts The QBIC system extracts features that support image query classes for color texture shape sketching location and text The system also supports set video oriented query classes For color histograms many different extraction methods are used The first issue the dimension the color feature vector the number colors Typical numbers range from dimensions being the number unique colors representable with one byte The higher the dimension the feature vector the greater its capacity The values each bin color histogram are usually either the total number pixels the percentage pixels for the given color the entire image Query Specification The papers read treated query specification secondary issue Researchers recognized the need for simple ways specify queries Unlike text based databases where the desired information retrieved with single query suitable image may require many queries CBIR systems typically return several the best images for selection the user Many systems allow the user select one these images example for another query This example query refinement Researchers are exploring ways providing easy refinement queries that yield high success The use multiple query classes compose query interests researchers Although many systems claim support composite queries few the papers explained how combine query classes successfully Distance Metrics Most image query classes rely similarity metrics rather than exact matching Distance metrics produce relative distance between two image feature vectors threshold used determine two features are similar many cases the user can control the threshold relax constrain query Every distance metric has advantages and drawbacks For example Stricker analyzes two common distance metrics the and euclidean norms The norm computes the distance between two element color histograms and And the norm computed Stricker states that Using the metric results false negatives not all the images with similar color composition are retrieved because the metric does not take color similarity into account Using metric similar the metric results false positives histograms with many non zero bins are close any other histogram and thus are retrieved always The QBIC system uses dimension color histogram where each element the percentage color The distance between histogram and database image histogram computed Where the transpose operator The locations contain the distance between color and color IBM Ultimedia Manager uses dimensional vector color percentages Each dimension represents range color space analysis time the color each pixel quantized into one the ranges based its location RGB space Indexing The predominant CBIR research the area image feature indexing There are many difficult problems solve First image features are typically high dimensional requiring complex multi dimensional indexing Second traditional indexing assumes exact matching similarity matching complicates the indexing structure Finally difficult combine multi dimensional similarity based indexing methods efficiently support queries composed mutliple query classes using similarity metrics only for initial indexing Pickard and Minka avoid the problem combining query classes with different metrics Similarity encoded into clusters image regions tree structure and distance measured ancestral distance between clusters This has the effect normalizing different query classes they can treated identically Extensibility Systems must extensible overcome the immaturity indexing methods query specification and feature extraction Most the important work CBIR lies ahead The importance extensibility was recognized when they developed CORE based generic framework for multimedia DBMS demonstrate the flexibility the architecture they developed two different applications computer aided facial image inference and retrieval system CAFIIR and trademark archival and registration system STAR medical information system currently development their conclusion they state Object orientation very important for retrieval engine like CORE One advantage increase the reusability codes increase its reusability and extensibility Artificial Intelligence Research focuses three applications Artificial Intelligence CBIR reasoning about logical features similarity metrics and index construction and maintenance For example Pickard and Minka apply when annotating images dynamically select from multiple feature models based how the user labels image regions Their system also capable improving the indexing structure based new positive and negative examples apply fuzzy reasoning queries where the logical features the query are only partially defined the user They also used learning based experiences neural network model generate self organizing nodes content based index tree This allows their system fuse composite feature measures support complex and fuzzy queries Maximizing Domain Knowledge Query performance can drastically improved cases where assumptions can made about the nature domain the images the database observe that CORE has comprehensive functions However each application has its domain specific problems And application development domain expertise must added customize the indexing and retrieval module Project Overview Exploration CBIR problems the domain interior design interested the methods CBIR which apply problems faced interior designers Interior designers work with paint wallpaper fabric and floor coverings They also follow general principles form space color and style Designers and their customers regularly face the tedious chore manually searching for and matching materials according general design principles and taste There opportunity for high degree computer assistence with these tasks Designers could compose queries using primitive and logical features and specify constraints according design principles Results series queries for wallpaper paint and carpet must self consistent according designer specified rules form space color and style These requirements led interest toward the following query classes Color Fabric wallpaper etc are often selected based upon color content This perfect application color histograms Texture Floor coverings wallpaper and fabric all have important textural components ideal for queries based textural features Shape Examples shapes are stripes plaids floral and patterns Objective features Styles such Victorian could modeled objective features Subjective features Taste mood sensation related design concepts can specified using subjective feature queries Examples are feminine Masculine cheery cool warm etc Text Product attributes such part numbers supplier information and first production date are all text features Domain specificThe design rules described above are domain specific features Query example powerful tool for interior designers For example given particular carpet sample the designer could find window covering that compliments the carpet Project Definition implemented software prototype that allowed explore the following areas Color Color important feature the materials interior designers use Color also allows automatic image analysis explored few implementations color histogram feature vectors and related similarity metrics Pattern Patterns are also very important interior designers focused automated feature vector generation using edge detection Software Design One the difficulties CBIR systems that small number query classes provide enough flexibility support interior design Further the technology image feature vectors similarity metrics and indexing immature real world system needs extensible and configurable Using object oriented techniques designed system that encapsulates the areas highest change created framework support the addition new query classes and distance metrics The framework divides major system tasks among manager objects that interact through well defined interfaces User Interface defined simple user interface for color histogram queries and provided the ability query example using color histograms and shapes Image ManagementBasic QBIC system the ability efficiently manage the performance storage and memory requirements images Because their size and complexity images have special computation and resource requirements have identified some these issues and suggest some solutions specifically avoided exploring indexing issues this project Implementation implemented software prototype for the purpose exploring the details CBIR The software was written using Microsoft Visual Compiler version The platform was Intel system running the Windows operating system version The software architecture shown the following block diagram This architecture loosely based CORE Each the managers implemented singleton object the class definition restricts instantiation only one system wide object Storage Manager The Storage Manager provides interface the image database responsible for maintaining memory virtual mapping images and for performing system specific operations The following class diagram depicts the key relationships The StorageManager class stormgr provides member functions access the image database client uses store associate the pixmap file with the image object and store the image the database This function used the AnalysisManager process user request add image the database also attaches the pixmap the image which allows the AnalysisManager perform feature extractions the image Clients can request single image using getImage the entire image database list using getImageList The loadDB function used initialize the StorageManager object The current implementation the StorageManager maintains unordered list Image objects representing the entire database real system the StorageManager would maintain multiple indices used retrieve images The Image objects would the leaves the index the case tree based index structure For efficiency this implementation only loads the pixmap data for image when necessary The Image object determines when load the data the task loading delegated the StorageManager The Image class image encapsulates the details the pixmap implementation and feature vectors The system manipulates Image objects for convenience The Pixmap class provides interface color pixel representation image pixmap This class allows the implementation the screen image change without affecting the rest the code The Features class features encapsulates set feature vectors This class allows new feature vectors added new query classes are added Two changes would required production system efficiently manage memory First the current implementation only loads pixmaps demand and never invalidates them Invalidating pixmaps would conserve large amounts physical memory typical pixmap requires bytes memory just store the image data assuming colors Also pixmap has color table and other overhead making for total about bytes second memory saver would the use thumbnail versions the pixmaps Thumbnails are smaller representations usually bytes which are used for display The current system only requires the entire image during feature extraction Support for thumbnails would either require time tradeoff reduce large pixmap when loaded into memory disk space tradeoff the thumbnails were generated load time and stored the database Analysis Manager The Analysis Manager analmgr performs analysis images they are added the system The result set feature vectors one for each type query class The greatest change CBIR system likely the addition new query classes The Analysis Manager provides extensibility via registration feature extractors which generate feature vectors The class relationships are shown the following class diagram When user adds new image the system the user interface calls the analyze member function This function uses the StorageManager create new Image which then analyzes calling extract each installed feature extractor New feature extractor objects are added calling addFeature when the system initialized The FeatureExtractor abstract class provides interface definition used all feature extractors features Concrete feature extractor classes inherit the interface and provide implementations appropriate for the needs the feature vectors they generate feature extractor object responsible for analyzing the image creating FeatureVector and installing the FeatureVector the Feature object the Image The FeatureExtractor classes play important role they encapsulate all important information for particular query class When adding new query class most the effort creating new subclass FeatureExtractor Other classes can get query class specific information from feature extractors For example the QueryManager calls the similarityFunc when comparing two images The AnalysisManager feature extractors Features and the FeatureVector have important relationship initialization time all the feature extractors are installed into the singleton instance the AnalysisManager init cpp The AnalysisManager tells each feature extractor its position the set feature vectors stored the Features objects also tells the Features class how many feature vectors every Features object must capable storing Every feature extractor implementation knows how large make the data portion its FeatureVector encapsulating knowledge this fashion new features can easily added Query Manager The QueryManager class provides two important functions the ability query the database and the ability maintain query history querymgr The Query Manager accepts Features object and similarityFunc from the User Interface and formulates query The formulated query used retrieve similar images from the Storage Manager client requests initialized Features object from the AnalysisManager which knows the position and size information for every feature and fills with the information matched the query The client gets the similarityFunc from the feature extractor class defined for the query class Similarity functions are static member functions the derived feature extractor class This necessary when passing member function pointer function argument They accept two Features objects and compute distance between them Similarity functions must return non negative value representing the distance between the feature vectors The function can also optionally return value less than zero the two feature vectors are dissimilar The QueryManager uses the return value rank images distance After the QueryManager completes the processing query passes the ranked list images the DisplayManager for presentation The current implementation contains similarity functions that only operate upon single query class Since the specifics the similarity computation are external the QueryManager possible provide similarity functions which take into account multiple query classes One way this provide hierarchy queries which the results one level queries are passed different similarity function Display Manager and the User Interface The display manager displmgr responsible for displaying images the screen and tracking mouse selection images This class closely related the user interface provided the operating system maintains the list currently displayed images and responds paint messages generated the window system client the display manager can submit list images calling display This will replace the existing list images held the display manager with the list passed this function Then the images will displayed Note that the Image lists that many the manager objects maintain are lists pointers Image objects avoid memory leaks clients pass deletion policy the display member function telling the DisplayManager how manage the memory the image list The user interface provides typical menu options according the Windows style see screen capture showing the application area filled with wallpaper images click here Each image has label which the name the database file containing the pixmap Image Menu The Image menu provides options for adding images and for querying the database Selecting query option presents dialog designed solicit query for particular query class For example the following screen capture shows the dialogs used compose query color Composing color query multi step process involving two dialogs The Query Color dialog allows the user specify color percentages for the query specify each color the user manipulates the controls the Color dialog This standard Windows dialog that allows selection colors directly from the system color palette The user may also create sixteen custom colors Once the query composed the user presses the button and the query submitted the QueryManager All similar images will displayed the DisplayManager View Menu The View menu provides selections that allow the user view information about the database and its images The Database item causes the DisplayManager display the entire image database real application this would impractical intelligent browsing tools would necessary for traversing large set images Selecting the Features item presents the user with the Image Features dialog containing list box all the image names The user selects image and presses the desired button the Display group The following screen capture shows what happens after the ColorHistogram button pressed The Color Histogram dialog presents two histograms the selected image The Original Image Histogram the color histogram the image stored the database Each bar represents the relative number pixels that are assigned the displayed color The Total Color Bins field the number bins each histogram and the Total Empty Bins field the number bins which not contain any pixels The Image Feature Histogram the histogram the feature vector quantized version the original histogram high percentage empty bins the feature histogram common Selecting the Pattern Histogram button from the Image Features dialog presents the Pattern Histogram dialog The dialog shows the directional bias the image The numbers below each the three bins represent the relative biases each direction The integer values range between and representing WEAK NOT STRONG STRONG and VERY STRONG The dialog shows that the image very strongly biased vertically and strongly biased horizontally The Color Values item the View menu presents the user with dialog for viewing the predominant feature colors The Image Color Values dialog displays the five most prevalent colors their percentage distribution and their RGB value The color and the RGB values shown are the value the center each quantization range This dialog very useful for testing the quality the similarity function Query Color Algorithms When image added the database the AnalysisManager calls the extract member function the ColorHistogram object clrhistx This function responsible for creating query class specific feature vector and installing the Image ColorHistogram creates dimensional color histogram feature vector similar the one used IBM Ultimedia Manager Each element the feature vector represents cube shaped subspace RGB space shown the following figure Each pixel quantized into one the bins After traversing the image the histogram contains the number pixels contained each color cube Each bin value then converted percentage representing the relative number pixels contained that color cube The similarity function ColorHistogram computes the distance between two histograms using norm This distance compared user definable threshold value determine similarity The QueryManager uses the return value order images most similar first The norm only works well sparse matrices This fine when the user provides three colors via dialog because only entries with values are compared When querying example the similarity function ignores small percentages they are present both histograms reducing the problem false positives due contribution insignificant differences between histograms Query example requires larger similarity threshold since usually involves many more comparisons than queries via the dialog For the data used worked for three color queries and was good for query example Query Pattern Algorithms Query pattern algorithms automatically recognize the directional biases image When image added the database the AnalysisManager calls the extract member function the Pattern class patternx Pattern creates dimensional feature vector where each element contains percentage bias the horizontal diagonal and vertical directions The pattern extraction algorithm multistep process First creates greyscale copy the original image RGB values are converted brightness values using the same translation for black and white television Television images are transmitted using the YIQ color scale Black and white television recievers only display the portion the luminance signal The greyscale image then processed detect edges using the Sobel operator This method applies two kernels the nieghborhood each pixel estimate the brightness derivatives and For the derivative the horizontal direction the following kernel used And for vertical direction the following kernel used Conceptually kernel applied image sliding the kernel over the image and summing the products the values the kernel with the brightness values under them The result the derivative brightness slope the pixel under the center the kernel After the application both kernels pixel nieghborhood the magnitude computed This value assigned the pixel under the center the kernel emphasize the edges the algorithm thresholds the value black white The following image result this process Finally the edge image traversed applying the two kernels again This time the derivatives are much stronger the bias the image The direction the slope determine This value between zero and The algorithm quantizes the direction into one the three bins the histogram After this process applied the entire image the sums the bins are converted percentages The result feature vector containing percentages bias horizontal diagonal and vertical directions The distance metric ranks the three direction biases very strong strong not strong and weak then computes the norm distance between the two histograms This distance compared user definable threshold value determine similarity The returned distance used the QueryManager order similar images Results The results project were positive Using scanner was able produce line pixmaps for wallpaper samples implemented software that supported both color and pattern based queries wallpaper database The software provides intuitive user interface and supports easy addition new query classes Color Queries There are two ways query the database color dialog and example The Query Color dialog was described above dialog query using three user selected colors demonstrates the effectiveness the query Three images are returned order similarity example based query uses the color histogram displayed wallpaper sample the query key The user clicks the right mouse button the desired example and presented with popup menu Selecting Query Color Example will initiate the retrieval STRIPE BMP was used the example wallpaper image and the threshold was set Pattern Queries The software currently supports pattern queries example only The example based queries are initiated from popup menu query based wallpaper sample PLAID BMP results set wallpapers containing strong directional bias vertical and horizontal directions This query was restricted display images The current implementation does not provide enough capacity distinguish between directional bias from lines and bias from noisy patterns This would require more sophisitcated feature extraction algorithm For example smoothing step could used supress the noise before performing the gradient computations User Interface The user interface fairly intuitive The interface presents familiar environment the Windows user following Microsoft Windows interface guidelines sample user unfamiliar with image processing easily navigated through the system The user was confused about the meaning the threshold parameters which must set numbers This confusion could alleviated presenting slider control representing scale relative distance Design The software design used takes full advantage object oriented principles The key features the design are Change encapsulated The area greatest change the addition new query classes This functionality encapsulated the feature extractor concrete classes new query class added copying existing feature extractor and modifying suit the needs the new query class Implemenation details are encapsulated Two classes hide implementation details Pixmap and StorageManager support multiple image types Pixmap could converted into abstract class providing only interface specific image types would inherit from this class The StorageManager class hides details the database and operating system and responsible for logical image management full featured application the StorageManager would delegate system details another class and would only manage images Abstraction enforced Abstraction enforced using well defined manager classes Interface inheritance eases expansion The FeatureExtractor abstract class defines the interface for all concrete feature extractors Client code can written interface without knowledge query class specific details Ghese design principles produced extensible and embeddable system The prototype could made embeddable converting server client server arrangement First the user interface code must externalized This code sensitive change and properly resides the client application Second client server communication protocol must used the Microsoft Windows environment OLE would provide this capability Limitations The limitations the prototype are performance and resource management Adding new image the database takes long time because image analysis Although the current algorithms are not optimized this step will always too expensive perform real time production system would have many feature vectors that batch processing mechanism would necessary Image management too crude for production system The entire image database loaded into memory and mechanism exists for maintaining only working subset images There support for thumbnail versions images The size image about even though the software always scales down for display The software prototype intended for exploring ideas and therefore does not contain the polish required production systems Conclusions The project goals were met prototype CBIR system was built demonstrating color and pattern queries intuitive user interface provides ease use object oriented design supports extensibility and embeddability Usefulness With the vast number images available line quality CBIR systems are critical using the right system people can quickly find the image they need the field interior design designers and their customers search through hundreds carpet drapery paint and wallpaper samples Their selections must combined create pleasing result Producing asthetic result often requires even more searching Through the use CBIR designers could access vast amounts material either ROM vendor database and rapidly create high quality interior decorating solutions Sophisticated query environments could assist applying practical design constraints ensure attractive results Expensive sample inventories would obsolete Significant savings would passed customers Future Work CBIR system for interior design requires access large databases flooring paint fabric and wallpaper samples Efficient retrieval from multiple large image databases relies new data representations and indexing methods These methods must support queries composed multiple query classes More and better query classes are needed support all aspects interior design materials Classes for color texture pattern and style are needed create asthetic designs Text and other attributes are necessary represent manufacturer information wear characteristics cost etc Judicious use artificial intelligence will improve system performance Fuzzy logic useful determining image similarity for certain query classes Expert systems can built that assist designers creating solutions that conform traditional design idioms Finally sophisticated user interfaces will needed give designers the power and flexibility their work demands Users must able incrementally build design solutions The interface must provide access designers portfolio they can use and modify past work allowing quick response customer demands There are many challenges ahead for future CBIR systems builders The field interior design presents its own challenges The results work show promise but there still much References Venkat Gudivada Vijay Raghavan Content Based Image Retrieval Systems IEEE Computer September Desai Narasimhalu Special section content based retrieval Multimedia Systems Flickner Sawhney Niblack Query Image and Video Content The QBIC System IEEE Computer September Rajiv Mehrotra James Gray Similar Shape Retrieval Shape Data Management IEEE Computer September Pickard Minka Vision Texture For Annotation Multimedia Systems Desai Narasimhalu Mehtre Lam Gao CORE Content Based Retrieval Engine for Multimedia Information Systems Multimedia Systems Markus Stricker Bounds for the discrimination power color indexing techniques Proceedings SPIE Storage and Retrieval for Image and Video Databases Nagarajan Ramesh Ishwar Sethi Feature Identification Aid Content based Image Retrieval Proceedings SPIE Storage and Retrieval for Image and Video Databases III Virginia Ogle Micheal Stonebraker Chabot Retrieval from Relational Database Images IEEE Computer September John Russ The Image Processing Handbook Second Edition CRC Press Hong Jian Zhang and Zhong Scheme for Visual Feature based Image Indexing Proceedings SPIE Storage and Retrieval for Image and Video Databases III Jonathan Ashley Ron Barber Myron Flickner James Hafner Denis Lee Wayne Niblack Dragutin Petkovic Automatic and Semi Automatic Methods for Image Annotation and Retrieval QBIC Proceedings SPIE Storage and Retrieval for Image and Video Databases III Harold Treat Ort Jean Mimi Jing Song Jang Laura Hall Frank Tung Dragutin Petkovic Searching Images Using Ultimedia Manager Proceedings SPIE Storage and Retrieval for Image and Video Databases III James Rumbaugh Michael Blaha William Premerlani Frederick Eddy William Lorensen Object Oriented Modeling and Design Prentice Hall Course DescriptionSend questions and comments Sean Landis scl isis comLast modified Sean Landis MIME Version Server CERN Date Friday Jan GMT Content Type text html Content Length Last Modified Tuesday Oct GMT CODE PublicationsCODE PublicationsExtracting Parallelism from Constraint Specifications Ajita John Browne International Conference Parallel and Distributed Processing Techniques and Applications PDPTA SunnyVale California August Uses CODE target language for compilation but focuses extracting parallelism from constraints Compilation Constraint Systems Procedural Parallel Programs Ajita John Browne Workshop Languages and Compilers for Parallel Computers August LNCS Springer Verlag Appear Uses CODE target language for compilation Parallel Programming Language Based Constraints Ajita John Browne International Conference High Performance Computing December Appear Uses CODE target language for compilation Complete Parallelization Computations Integration Data Partitioning and Functional Parallelism for Dynamic Data Structures Dwip Banerjee Browne Delivered IPPS Integrates data partitioning into the CODE model Visual Programming and Debugging for Parallel Computing Browne Hyder Dongarra Moore Newton IEEE Parallel and Distributed Technology Spring Volume Number Compares the visual parallel programming environments HeNCE and CODE High Level Language for Specifying Graph Based Languages and their Programming Environments Kleyn Dissertation Dept Computer Sciences Univ Texas Austin This dissertation describes high level specification language Glide for defining integrated graphical textual programming environments for visual programming languages those based directed graph models computation like CODE Distributed Execution Environments for the CODE Parallel Programming System Rajeev Vokkarne Thesis Dept Computer Sciences Univ Texas Austin Thesis describing distributed implementation the CODE runtime system for PVM Visual Programming and Parallel Computing Newton Delivered Workshop Environments and Tools for Parallel Scientific Computing Walland May Short paper virtues and limitations HeNCE and CODE well ramblings processes visual components Visual Programming and Debugging for Parallel Computing Browne Hyder Dongarra Moore Newton Technical Report Dept Computer Sciences Univ Texas Austin Compares the visual parallel programming environments HeNCE and CODE longer version the above paper with more references Unified Approach Concurrent Debugging Hyder Dissertation Dept Computer Sciences Univ Texas Austin Dissertation that describes approach concurrent debugging that has been implemented for the CODE environment Unified Model for Concurrent Debugging Hyder Werth Browne Proceedings the International Conference Parallel Processing IEEE Computer Society August Describes approach concurrent debugging that has been implemented for the CODE environment High Level Language for Specifying Graph Based Languages and their Programming Environments Kleyn Browne International Conference Software Engineering Baltimore April Describes high level specification language Glide for defining integrated graphical textual programming environments for visual programming languages those based directed graph models computation like CODE Graphical Retargetable Parallel Programming Environment and Its Efficient Implementation Newton Technical Report Dept Computer Sciences Univ Texas Austin doctoral dissertation discussing CODE depth The CODE Graphical Parallel Programming Language Newton Browne Proc ACM Int Conf Supercomputing July This paper describes prototype implementation CODE Some the notations have changed but the ideas are the same This paper remains good broad introduction CODE because brief general model for scheduling parallel computations and its application parallel operations Jain Werth and Browne Proceedings International Conference Parallel Processing August The interaction the formal and the practical parallel programming environment development CODE Werth Browne Sobek Lee Newton and Jain Lecture Notes Computer Science vol New York Springer Verlag Directions software engineering education Werth and Werth Proceedings Thirteenth International Conference Software Engineering May Emery Berger Last modified Tue Oct CDT Date Wed Jan GMT Server Apache Content type text html Content length Last modified Tue Jul GMT ACM UCSBThe Association for Computing MachineryThis Year Events Joining the ACMThe National ACM Home PageLiNkS tHe oUtSiDeScholarships FWC ACM NewsgroupResumes ACM Members UCSB Computer Science Department Mail comments ACM acm ucsb edu 