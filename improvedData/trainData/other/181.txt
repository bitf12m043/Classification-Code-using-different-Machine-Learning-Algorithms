MIME Version Server CERN Date Monday Dec GMT Content Type text html Content Length Last Modified Saturday May GMT CUCS Other Servers Other Servers Home Page General Information Academic Information Cornell Gopher Cornell Anonymous FTP Other Cornell Web PagesCS Department Home Page MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Wednesday Nov GMT Points Interest Highly Acclaimed Victor Wong Illustrations Professor Lifschitz favorite stories The World World Wide Herbarium Factbook Intelligence Computer World Online Contents Local Austin Chronicle Film Times Lotto Texas Results Click here return Mark home page Date Tue Jan GMT Server Stronghold Ben SSL Apache Content type text html Content length Last modified Thu Jan GMT Important DatesDateMajor HappeningJanuary Project Part DueFebruary Midterm ExamFebruary Project Part DueFebruary Project Part DueMarch Project Part DueMarch Final Exam Date Mon Nov GMT Server NCSA Content type text html Last modified Thu Feb GMT Content length Quiz UNIVERSITY WISCONSIN MADISON Computer Sciences DepartmentCS Spring Bart MillerQuiz Wednesday February Messages Readers Writers Revisited You are write the code implement the access control for the readers writer problem You will use message passing defined the class notes and lecture your synchronization mechanism you cannot use monitors semaphores Each client process that wants read write shared database will use the StartRead EndRead StartWrite EndWrite appropriate These procedures are described below You are write the four client procedures plus the code for server process StartRead This procedure called client process before wants have read access the shared database This procedure will not return until safe read the data Note that the actual reading the data not done this procedure EndRead This procedure called after client process done reading the shared database StartWrite This procedure called client process before wants have write access the shared database This procedure will not return until safe write the data Note that the actual writing the data not done this procedure EndWrite This procedure called after client process done writing the shared database might useful refer Section the lecture notes For this problem not concerned with whether the readers writers get more priority Solution Version Here good general solution may bit more complex than some you used but has some useful characteristics The most interesting characteristic that each client has its own mailbox for response Having separate client mailboxes allows the clients run different hosts network Note that didn write any queuing routines code clever use the message system this example using two message sends for each start request was able use the implicit queuing provided the mailboxes void StartRead char mboxname MAXNAMESIZE MakeMboxName mboxname send request STARTREAD send start read mboxname receive mboxname buff void EndRead send request ENDREAD void StartWrite char mboxname MAXNAMESIZE MakeMboxName mboxname send request STARTWRITE send start write mboxname receive mboxname buff void EndWrite send request ENDWRITE void MakeMboxName char mboxname sprintf mboxname mbox getpid CreateMailboxName mboxname void ReaderWriterServer int value int char mboxname MAXNAMESIZE CreateMailboxName request CreateMailboxName start read CreateMailboxName start write while Receive request value VALUE STARTREAD Receive start read mboxname Send mboxname else else VALUE STARTWRITE Receive start write mboxname Send mboxname else else VALUE ENDREAD and Receive start write mboxname Send mboxname else VALUE ENDWRITE Receive start write mboxname Send mboxname else while Receive start read mboxname Send mboxname Solution Version Here slightly simpler one This version has the client processes sharing mailboxes This type approach valid but not useful since work work the client processes are different hosts network void StartRead send request STARTREAD receive oktoread void EndRead send request ENDREAD void StartWrite MakeMboxName mboxname send request STARTWRITE receive oktowrite void EndWrite send request ENDWRITE void ReaderWriterServer int value int char mboxname MAXNAMESIZE CreateMailboxName request CreateMailboxName oktoread CreateMailboxName oktowrite while Receive request value VALUE STARTREAD Send oktoread else else VALUE STARTWRITE Send oktowrite else else VALUE ENDREAD and Send oktowrite else VALUE ENDWRITE Send oktowrite else while Send oktoread Last modified Thu Feb CST bart 