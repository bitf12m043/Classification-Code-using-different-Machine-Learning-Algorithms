MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Wednesday May GMT Scott Dawson Personal Information Scott DawsonCornell University Master Engineering Student most likely found doing the following things Working with this group guys the Systems Lab Debating the latest industry trends with Jeff and Will research partners Playing racquetball and inline skating like have the time Preparing make the move NYC the ball drops Times Square the roar the crowd becomes deafening Wait until you hear all when this ticker hits ground zero Sometimes one confined such small area for such extended period time the mind wanders This picture the result such phenomena Early one morning Jeff Will and decided put all the multimedia equipment that surrounded with daily basis good use The result much our pleasure was both inventive stress alleviating and exciting Not mention that now had some customized pixs put the net show just how interesting could individuals graduated May from the State University New York Geneseo with from their department Geneseo was really great school met some really great friends there Past employers have been Databook Incorporated summer Ithaca has since relocated Boston and Pathlight Technology which also located Ithaca moving New York City after graduating from Cornell University work for Citibank resume still online for those who are curious about what been Currently working for the Campus Life department Graduate Residence Assistant Schuyler House which conveniently located the Southern outskirts campus also very involved Alpha Phi Omega Coed National Service Fraternity pledged during the spring with Alpha Beta Chapter Geneseo and transferred membership the fall Gamma Chapter Cornell University where maintain active position the pledge team spdawson cornell edu MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Sunday Jul GMT RoboCacingRoboCacingDescription amazing fully autonomous robotic worm which moves like leech unless provoked approximately two and half feet long with metallic segmented body covered with sensitive bristles sense its environment Two antenna its head are for probing for front obstacles sensing danger through its bristles speeds off escape Different responses are produced for different sensation received through its bristles and antenna has been build specifically for the Robofest held Austin Texas April the way the word cacing Malay word for worm WYL Date Tue Jan GMT Server NCSA Last modified Sun Jan GMT Content type text html Content length Hope REU Information Undergraduate Research Computer Science Summer The Computer Science Department Hope College with support from the Research Experiences for Undergraduates Program the National Science Foundation providing opportunity for number undergraduate computer science students participate ten week research program Dates May August Stipend Housing campus housing provided costTravel Limited travel funds are available for participantsEligibility Any citizen who has not received baccalaureate degree and will enrolled undergraduate degree program Fall eligible Women and members minority groups are particularly encouraged apply Projects Concurrency Anomaly Prevention Using Java ThreadsImplementing Parallel Software Design ToolsAnimations Algorithms and Object Oriented ConceptsVisualization String Searching AlgorithmsParallelization Global Optimization SoftwareApplication Deadline application transcript all undergraduate work and letter recommendation from faculty member must submitted before March Applications and further Information Applications forms may downloaded PostScript form from here Applications and further information are available from Herbert Dershem Department Computer Science Hope College Holland reu hope edu phone FAX Internet There more information available via anonymous FTP from the site smaug hope edu under the pub reu directory Also information available from the World Wide Web the page http www hope edu dershem info html Research Projects Hope College Computer Science Summer Project Concurrency Anomaly Prevention Using Java Threads Michael Jipping This project will implement the prediction and detection concurrency anomalies the language Java This will implement detection methods parallel threads Java that monitor concurrent activity and detect when concurrent threads will damage shared resource will spending time with both threads programming and anomaly detection methods Project Implementing Parallel Software Design Tools Michael Jipping This project will focus integrating design tools for parallel programs into workable software development environment and demonstrating the usefulness this environment Specifically will build prototype design tools and evaluate these tools for usability accuracy and fitness for existing environments Project Animations Algorithms and Object Oriented Concepts Herbert Dershem This project will focus the development and use tools for animations within the framework the Java programming language One aspect will the use animations illustrate object oriented concepts creating algorithm animation classes that will make such animations nearly transparent the algorithm implementor Another aspect will involve the animation data structure algorithms adapting the techniques the THREADS package that was developed previous research projects Project Visualization String Searching Algorithms Herbert Dershem Approaches will investigated for visualizing the processes various string searching algorithms These will include Knuth Morris Pratt Boyer Moore and Rabin Karp methods Java applets will written implement the visualization techniques that are designed Project Parallelization Global Optimization Software Ronald Van Iwaarden Professor Van Iwaarden has developed global optimization software package called VerGO solves global optimization problems using interval arithmetic and automatic differentiation This project will develop version VerGO using MPI and PVM Both these versions will tested network Sun workstations evaluate the efficiency the different parallel implementations when running either single multiple CPU machine many single CPU machines Date Mon Nov GMT Server NCSA Content type text html Last modified Sun Sep GMT Content length Using GNU Common Lisp Department Workstations Using GNU Common Lisp GCL you have not already created your instructional account one the departmental workstations used for this class log newuser and set following the instructions given takes about half hour for the account created and ready for use Log your account and open two xterm windows the two windows you should see the default UNIX prompt One window will used run the version Common Lisp will using called gcl The other window will used edit UNIX files containing the Lisp functions and programs you write Run the GCL interpreter using the command gcl the first window Once invoked GCL initializes the system prints message and enters the top level prompt read eval print loop using the prompt You can enter any expression for evaluation this prompt Since GCL has the same prompt the default UNIX prompt the workstations you might want change the UNIX prompt something else this run the shell command you can put this command your cshrc local file avoid doing every time set prompt whatever you like GCL has line help facilities For example within GCL help introductory help message help symbol documentation everything associated with symbol help load help step help trace help compile file help dribble help any Lisp function that you are interested help string documentation all symbols containing string sub string help remove describes the functions remove remove remove duplicates and remove not apropos string like help except only lists the names documentation symbol type prints online documentation string for the symbol the given type available You can also use GNU info facility access documentation WWW version available addition this material may accessed the UNIX program info type info the UNIX prompt within Emacs typing ESC info Edit your program file using text editor such Emacs For example the following creates file named functions lisp and defines single Lisp function named welcome UNIX functions lisp defun welcome format Hello Welcome Emacs commands for Editing Lisp Since Emacs written lisp the command function name will work describe general lisp functions well the editing actions Emacs has three lisp modes emacs lisp mode lisp mode and lisp interaction mode The complexities the Emacs lisp modes are beyond the scope this introductory document however Emacs your editor choice its powerful lisp modes are worth investigating See Some Tips Editing Lisp Code for more ideas Commands for Editing Lisp Since there are many and Lisp programs you should set aid your entering Lisp functions readably and correctly There are three options interest lisp which changes the and commands move backward and forward over expressions autoindent which does automatic indenting and showmatch which shows the matching when typed set these you can either set them each time you enter doing lisp have these settings set every time you enter just edit the exrc file your home directory include the line set lisp Finally there also operator that realigns existing lines though they had been typed with lisp and autoindent set This the operator Using the command the beginning function will realign all the lines that function See also the use the and commands for moving around within Lisp functions Here brief explanation help you try them out The and commands move backward and forward over expressions The and commands are like and but don stop atoms These can used skip the next list through comment quickly The and commands advance and retreat lines beginning with They are useful for dealing with entire function definitions Call from Within GCL alternative keeping separate windows for and GCL can define Lisp function which will allow call from within GCL and automatically load the changes when done editing this save the contents dyer public html lisp lisp file your own directory and load that file into GCL the GCL window load all the functions defined file into GCL load functions lisp While GCL loading all the functions this file does some simple syntax checking such unmatched parentheses and misused punctuation Your functions will not loaded successfully has any these syntax errors this case back the window edit your functions and then reload the file the GCL window Run your program GCL welcome Hello Welcome there are any runtime errors use the other window modify your program and then the GCL window reload the file containing the program and run again Compile your program compile file functions lisp load functions welcome After compiling executable file functions created your current directory Debug your program using the interpreter first and compile for the optimized executable code only when everything debugged Make typescript terminal session One way use dribble dribble file name given string start typescript Run programs here plus anything else you want saved dribble stop typescript Everything displayed the screen will saved the given file including both what you type and what the Lisp interpreter responds You can also use the UNIX command script filename before starting GCL with the UNIX command exit after ending the GCL session This appears give slightly better looking output Trace single step your program trace func name trace named function untrace func name stop tracing named function step func name parameters any single step mode Exit GCL bye Control will also stop GCL Lisp Break Package Lisp invokes break package whenever encounters error the user aborts execution The break package recognizable the prompt changes from There are many options for you choose this package Break loop Command Summary indicates optional arg help this summary show local variables and their values segment compiled stack frames starting the current one BACKTRACE steps down DOWN frames one env describe ENVIRONMENT this stack frame for interpreted show frame loc return local this frame its function compiled loc RESUME return from the current break loop frames one Example print backtrace the last frames Note use fast links nil makes all non system function calls recorded the stack use fast links the default Low level commands make current the PREVIOUS frame list show make current the NEXT frame list show ihs index make current the frame corresponding ihs index print the last break message show function the current ihs frame quit top level resume from this break loop full backtrace all functions and special forms name backward search for frame named name name search for frame named name from Show value stack between FROM and ihs from Show Invocation History Stack bds Show previous special bindings all sure log out the workstation when you leave Hold down the left mouse button and click logout 