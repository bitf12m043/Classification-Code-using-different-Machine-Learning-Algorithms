MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Thursday Aug GMT PRL Seminar talksPRL Seminars Here are some the slides for the talks have given the Nuprl seminar These slides can pretty technical and assume knowledge the Nuprl system and type theory some cases present information intuitive level that technically imprecise All slides are Portable Document Format PDF You can obtain PDF reader from Adobe for just about any machine you can imagine using prepared these presentations using Adobe Persuasion and Adobe Illustrator Modules February This most recent version formal modules and objects Modules October This earlier version formal modules Horus November are performing verification the Horus group communication system These slides give outline the verification process Types October These slides cover some new type additions was proposing for Nuprl This includes very dependent function types Square Root Verification May This talk about the verification hardware square root algorithm program transformation The slides don contain much explanation The paper wrote for TPCD Theorem Provers Circuit Design better resource Theories March This very early version formal theories modules Nuprl Majority Vote November This the first formalization did Nuprl gives some idea the problems first encountered using Nuprl and provides motivation for current work Nuprl Some other talks Horus talksHorus Verification January This very high level overview the Horus verification effort Horus Verification April Here slightly more detailed but still high level version the Horus verification MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Friday Apr GMT Overview SeussOverview Seuss are currently working project called Seuss The research proposed Seuss based two observations the applications that will implemented networks processors the future will significantly more ambitious than the current applications which are mostly involved with transmissions digital data and images and many the programming concepts developed for databases object oriented programming and designs reactive systems can unified into concise model distributed programs that can serve the foundation for designing these future applications Research multiprogramming has traditionally attempted reconcile two apparently contradictory goals should possible understand module process data object isolation without considerations interference the other modules and should possible implement concurrent threads fine level granularity that process ever locked out accessing common data for long periods time The goals are conflict because fine granularity general implies considerable interference The earliest multiprograms see for instance the solution the mutual exclusion problem Dijkstra were trivially small and impossibly difficult understand because the behaviors the individual processes could not understood isolation and all possible interactions among the processes had analyzed explicitly Since then much effort has gone into limiting even eliminating interference among processes employing variety synchronization mechanisms locks semaphores critical regions monitors and message communications Constraining the programming model specific protocol binary semaphores message communication over bounded channels for instance will prove short sighted designing complex applications More general mechanisms for interactions among modules that include these specific protocols are required Further for the distributed applications the future essential devise model which the distinction between computation and communication removed particular the methods for designing and reasoning about the interfaces should different from those employed for the computations the nodes the network Seuss fosters discipline programming that makes possible understand program execution single thread control yet permits program implementation through multiple threads consequence possible reason about the properties program from its single execution thread whereas implementation specific platform shared memory message communicating system may exploit the inherent concurrency appropriately central theorem establishes that multiple execution threads implement single execution threads any property proven for the latter property the former well major point departure Seuss that there built concurrency and commitment either shared memory message passing style implementation specific communication synchronization mechanism except the procedure call built into the model particular the notions input output and their complementary nature rendezvous based communication are outside this model There distinction between computation and communication process specifications and interface specifications are not distinguished Consequently not have many the traditional multiprogramming concepts such processes locking rendezvous waiting interference and deadlock basic concepts our model Yet typical multiprograms employing message passing over bounded unbounded channels can encoded Seuss declaring the processes and channels the components program similarly shared memory multiprograms can encoded having processes and memories components Seuss permits mixture either style programming and variety different interaction mechanisms semaphore critical region phase handshake etc can encoded components Seuss proposes complete disentanglement the sequential and concurrent aspects programming expect large sections code written understood and reasoned about sequential programs view multiprogramming way orchestrate the executions these sequential programs specifying the conditions under which each program executed Typically several sequential programs will execute simultaneously yet can guarantee that their executions are non interfering and hence each program may regarded atomic propose efficient implementation scheme that can using user directives interleave the individual sequential programs with fine granularity without causing any interference References Dijkstra Solution Problem Concurrent Programming Control Communications the ACM Hoare Communicating Sequential Processes Prentice Hall International London Milner Communication and Concurrency International Series Computer Science Hoare Series Editor Prentice Hall International London Date Tue Jan GMT Server Apache Content type text html Content length Last modified Wed Oct GMT Dynamic Inter Dynamic Interactions Financial Markets authors Wilbert McClay Orlee Shohamy Brandeis University Department Computer Science Early observers financial markets believed the efficient market hypothesis This hypothesis claims that financial markets will reach efficient state where prices stocks will reflect rational forecast the present value future dividend payments The forces competition and rational arbitrage would guarantee that prices adjust their intrinic values Today this theory considered highly unrealistic financial markets were become efficient investors would have know the exact change company stock value caused unanticipated future events The acceptance real life factors such imperfect information behalf investors have produced new school thought market theory Today the idea fashion and fads investor attitudes other types systematic irrationality affecting stock prices has gained new respectability This thinking led the development field named Behavioral Finance Statistical data and research stock market history have shown that financial markets have several irrational trends For example the New York Stock Exchange Market has significantly highere average returns Fridays than does Mondays Such phenomenon cannot explained under the assumption rational behavior Utilizing the Maspar computer system will design technical schematic for the interacting agents investors and their impact forty companies the New York Stock Exchange will consider several realistic factors such imperfect information form model regarding investor decision making process Using these decisions models will then simulate adjustments stock prices using non linear regressional analysis doing will find pattern define the fluctuations stock prices Everday millions agents buy and sell stock the market These investor interventions are constantly molding the ever changing prices stocks set examine aspects this non rational behavior investors decision making process will then focus the effect their decisions have the dynamics the New York Stock Exchange Market BACK THE INTERACTION LAB Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Aug GMT Content length Lecture notes Chapter Floating Point Arithmetic Chapter floating point arithmetic about FLOATING POINT ARITHMETIC arithmetic operations floating point numbers consist addition subtraction multiplication and division the operations are done with algorithms similar those used sign magnitude integers because the similarity representation example only add numbers the same sign the numbers are opposite sign must subtraction ADDITION example decimal value given scientific notation first step align decimal points second step add presumes use infinite precision without regard for accuracy third step normalize the result already normalized example value given binary add these representations step align radix points shifting the mantissa LEFT bit DECREASES THE EXPONENT shifting the mantissa RIGHT bit INCREASES THE EXPONENT want shift the mantissa right because the bits that fall off the end should come from the least significant end the mantissa choose shift the since want increase exponent shift places original value shifted place note that hidden bit shifted into msb mantissa shifted places shifted places shifted places shifted places shifted places shifted places shifted places step add don forget the hidden bit for the step normalize the result get the hidden bit already for this example result SUBTRACTION like addition far alignment radix points then the algorithm for subtraction sign mag numbers takes over before subtracting compare magnitudes don forget the hidden bit change sign bit order operands changed don forget normalize number afterward MULTIPLICATION example decimal values given scientific notation algorithm multiply mantissas add exponents example binary use mantissa that only bits that don spend all day just doing the multiplication part mantissa multiplication don forget hidden bit becomes add exponents always add true exponents otherwise the bias gets added twice biased switch the order the subtraction that can get negative value true exp true exp add true exponents bias exponent unsigned representation for put the result back together and add sign bit normalize the result moving the radix point one place the left increases the exponent becomes this the value stored not the hidden bit DIVISION similar multiplication true division unsigned division the mantissas don forget the hidden bit subtract TRUE exponents The IEEE standard very specific about how all this done Unfortunately the hardware all this pretty slow Some comparisons approximate times complement integer add time unit add time units multiply time units divide time units There faster way division Its called division reciprocal approximation takes about the same time multiply Unfortunately the results are not always the same with true division Division reciprocal approximation instead doing they figure out reciprocal for and then use the multiplication hardware example result that isn the same with true division true division exactly reciprocal approx not not always possible get perfectly accurate reciprocal ISSUES floating point note this discussion only touches the surface some issues that people deal with Entire courses could probably taught each the issues rounding arithmetic operations values compute results that cannot represented the given amount precision must round results There are MANY ways rounding They each have correct uses and exist for different reasons The goal computation have the computer round such that the end result correct possible There are even arguments what really correct lecture note number line will help get the message across methods rounding round toward also called truncation figure out how many bits digits are available Take that many bits digits for the result and throw away the rest This has the effect making the value represented closer example decimal places available decimal places available round toward infinity regardless the value round towards infinity example decimal places decimal places round toward infinity regardless the value round towards infinity example decimal places decimal places binary round toward infinity round toward infinity round toward zero TRUNCATE round toward nearest ODD CASE there anything other than the right the number digits kept then rounded IEEE standard such that the least significant bit kept zero ODD CASE the way between ODD CASE NOTE this bit different than the round nearest algorithm for the tie case learned elementary school for decimal numbers use standards allows all machines following the standard exchange data and calculate the exact same results IEEE standard sets parameters data representation bits for mantissa exponent MIPS architecture follows the standard overflow and underflow Just with integer arithmetic floating point arithmetic operations can cause overflow Detection overflow comes checking exponents before during normalization Once overflow has occurred infinity value can represented and propagated through calculation Underflow occurs representations when number small close represented show number line value cannot normalized getting just the left the radix point would cause the exponent field all then underflow occurs computing floating point operations can done hardware circuitry software program code programmer won know which occuring without prior knowledge the much slower than approx times difficult but good exercize for students would design algorithm for doing addition using only integer operations operations tedious takes lots shifting and masking get the data the right form use integer arithmetic operations get result and then more shifting and masking put the number back into format common thing for manufacturers offer versions the same architecture one with and the other with ops 