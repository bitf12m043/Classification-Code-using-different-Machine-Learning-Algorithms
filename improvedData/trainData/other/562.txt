Date Mon Dec GMT Server NCSA Content type text html Last modified Fri Dec GMT Content length Modeling Human Facial ExpressionsModeling Human Facial Expressions Daniel Hung and Szu Wen Steven Huang Topics Computer Graphics Introduction Human faces are among some the most difficult objects model computer graphics and have been the attention numerous attempts some almost old computer graphics itself Facial expressions are the result the movement skin layered atop muscles and bone structures and may have thousands combinations part our coursework propose focus this subject Our work will divided into three parts survey various techniques developed throughout the years implementation one such technique and the presentation our results Limitations Due time constraints unlikely that detailed implementation any the models possible The goal the project thus produce technology demonstration technique The availability suitable input devices pre defined face mesh would limit the accuracy and aesthetic quality the finished product wish able produce the minimum wire frame animation face mesh The results from the survey and the implemented model will presented class Prior ArtGeneral Structure Among the various approaches taken over the years distinctive generalization can made There generally exists low level muscle motion simulator called variably action units abstract muscle action procedures minimum perceptible actions This layer enables the generation expressions that are not necessarily humanly possible such asymmetric movement two sides the face top the muscle layer find abstraction for humanly significant expressions This layer might include smile frown horror surprise and other expressions the objective many projects was emulate the human face during speech there usually exists another layer above expressions that include phonemes speech primitives complete data set phonemes allow the synthesized face look like coordinated with speech which played back separately KeyframingKeyframing was one the earliest approaches taken and involved linear transformations from one face mesh another The amount computations were extensive and the data set large The approach was rather inflexible because the range expressions that can generated are limited the keyframes that were previously digitized also difficult generalize work one face mesh another Parametric Deformations second approach was model the human face parametric surface and record the transformations movements the control points minimize the data storage requirements These approaches are still difficult generalize over different face meshes One such attempt utilizes spline patches that were defined manually actual digitized face mesh Nahas The control points for the spline patches were moved effect the distortion the face While this method powerful know automatic way defining the relevant control points for the spline patches Another such attempt used Rational Free form Deformations move points inside defined volume Waters Platt not for the amazingly little understanding have them The human facial muscles are capable large amount expressions and realistic simulation muscles requires the simulation muscle action wrapping around the skull structure jaw rotation and folding and stretching properties skin Pseudo muscles hybrid approach would simulate muscles that are not necessarily anatomically correct After the data set was complete decided that the available functions deform the face mesh were overly complicated and derived simple one where the time parameter running from the point where the force applied the point attractive force and every face vertex the bounding box The formula moves every vertex the bounding box towards the attraction point magnitude inversely proportional its distance from the point force application example this muscle model shown below This formula had unacceptable side effect seemingly pinch the points close towards abandoned because felt needed smoother attraction which led cos where introduced new parameter defines the radius influence and while closely related the size the bounding box separate parameter general however should cover roughly the same area the bounding box Note that singularities appear much smaller than the bounding box Note that the term this formula moves all the vertices the bounding box and the radius influence parallel the vector between the point force application towards the point attraction effect the point attraction actually defines plane attraction for the bounding volume This the formula settled with and the cosine term does provide with smooth deformation sample this muscle model shown below Not all muscles the face apply force linearly Sphincter muscles around the lips for example not work well with this formula unmodified thus defined special case the formula deal with these muscles cos There are two important differences The term was introduced allow the muscle contract one axis and expand another instead uniform contraction expansion The direction motion now defined which the direction the point attraction similar formula The reason inverted the sign this formula was because felt that positive should denote contraction and negative should denote expansion order consistent with formula The example the left below shows contracting sphincter muscle and the one the right shows expanding sphincter muscle Putting all together Armed with the face mesh and the muscles what remains the definition parameters which largely tedious trial and error task present few expressions generated IBM DataExplorer below for mpeg demos click the links below the images MPEG demos our work Click Here see the smile animation Click Here see the kiss animation Data Explorer files our work Click here for the connections list the mesh Click here for the macro which models linear contract relax muscle the face Click here for the macro which models the facial mesh Note that this requires vertex list connections and lip connections file similar the ones above order work Ahead The effects have achieved are far from realistic The complexities facial animation have not yet been fully explored but believe have come with reasonable model for manipulating data less than vertices versus the much larger data set acquired machines with good quality Other areas may explored and those feel are interesting are listed below Texture mapped skin Nahas Coordination lip muscles with speech Nahas Motion other facial elements such eyeball jaw Modelling the interior the mouth such teeth and gums Modelling hair features such hair moustache beard eyebrows References Arad Dyn Reisfeld and Yeshurun Image Warping Radial Basis Functions Application Facial Expressions CVGIP Graphical Models and Image Processing Badler and Platt Simulation Facial Muscle Actions Based Rational Free form Deformations Computer Graphics September Kang Chen and Hsu Automatic Approach Mapping Lifelike Human Face Image and Vision Computing Magnenat Thalmann Minh Angelis and Thalmann Design Transformation and Animation Human Faces Visual Computer Magnenat Thalmann Primeau and Thalmann Abstract Muscle Action Procedures for Human Face Animation Visual Computer Nahas Huitric Rioux and Domey Facial Image Synthesis Using Skin Texture Recording Visual Computer December Nahas Huitric and Saintourens Digital Actors for Interactive Television Proceedings the IEEE Tost and Pueyo Human Body Animation Survey Visual Computer March Waters Muscle Model for Animating Three dimensional Facial Expressions Computer Graphics July Maintained Steven Huang and Dan Hung Last Modified December MIME Version Server CERN Date Friday Jan GMT Content Type text html Content Length Last Modified Thursday Oct GMT CODE Visual Parallel Programming May Come Age with CODE HPCwire from HPCwire reprinted with permission Visual Parallel Programming May Come Age with CODEby Alan Beck editor chief AUSTIN Texas Although visual parallel programming environments are not new the unusually simple and direct techniques employed the University Texas CODE Computationally Oriented Display Environment abstract declarative graphical environment for parallel programming promises not only different but also much more effective approach the entire task Within the CODE environment parallel program directed graph where data flows arcs connecting nodes representing sequential programs The sequential programs may written any language and CODE itself architecture independent Thus the CODE system can produce parallel programs for PVM based and MPI based networks well for the Sequent Symmetry CRAY and Sun Sparc Currently the CODE graphical interface itself runs Suns order learn more about the operation CODE HPCwire interviewed its godfather James Browne Regents Chair Computer Sciences and Professor Physics and Electrical Computer Engineering the University Texas Following are selected excerpts from that discussion HPCwire What level skill must programmer bring CODE BROWNE special programming skills are needed Traditionally one works the procedural level stipulating how computation done With CODE you make transition from how something done what you trying very high level used CODE undergraduate parallel programming classes given students about hour instruction then turned them loose the graphical environment and they work their way through forgiving course they already know how program traditional languages And clearly they must understand parallelism the conceptual level HPCwire fair say that the better the programmer the better will able utilize CODE BROWNE Let take another tack and say the better people understand their applications the better they able use CODE When you write program language like HPF you have lot nonintuitive things like partitioning matrices handling distributions etc But with CODE what you must understand that parallel computation structure basically directed graph with many paths through different level conceptual understanding used CODE undergraduate parallel programming classes given students about hour instruction then turned them loose the graphical environment and they work their way through HPCwire Given certain level skill how much more efficiently can parallel programmer function with CODE BROWNE order magnitude more effectively And need even better than that What done change the level abstraction which programs are described like writing book simply writing outline and then having smart word processor consult encyclopedias and dictionaries fill the rest CODE uses abstract general model parallel computation which hierarchical dependence graph Those are lot buzzwords but the graphical environment speaks for itself Let say you have old FORTRAN program with bunch subroutines for which you want invoke many parallel copies associate one subroutine with node the graph you want run copies parallel and connect them with the rest the program you simply draw arcs among the routines you want connected CODE takes care all the parallel programming book keeping like where the copy how get touch with for input output how synchronize with other routines HPCwire Doesn this favor coarse grained approach BROWNE Definitely But about three years ago asked ourselves how data parallelism could most simply represented the dependence graph model You can construct graph where each node represents part computation matrix but that awkward thought why not introduce additional annotation the arcs that says Any data flowing down this arc will split into pieces with each piece sent copy the routine the arc end you this you then have fine grained data parallelism embedded the graphical model paper this approach integration data parallelism into the graphical model was presented the last International Parallel Processing Symposium HPCwire What are the limitations this approach BROWNE Lack familiarity The need change the way you think See messing with people minds There are intrinsic limitations The nodes are nothing more less than FORTRAN subroutines There are conceptual limitations back ends compile shared memory PVM MPI back ends Give that one graph click the icon for the back end you want and compile with some optimization for each different environment The reason this approach program development isn particularly well accepted because the scientific and engineering community accustomed doing business certain way and working certain level abstraction With this method you require people change the way they think And people change the way they think very slowly compile shared memory PVM MPI back ends Give that one graph click the icon for the back end you want and compile with some optimization for each different environment HPCwire But how about your competitors BROWNE Many people have worked graphical models parallel programming for long time They have some very good systems Ted Lewis did the PPSE system Oregon State and there was group that used work with Jack Dongarra the University Tennessee which produced system called HeNCE similar ours And there are several other interesting graphical programming systems have all encountered similar results that this was really neat technology and once you get people trained they like But like any other major paradigm change hard for people make paradigm shifts great part the benefit not from the graphical interface although makes programming easier but from the fact that using more general more abstract model parallel computation HPCwire Are you still refining the system BROWNE Yes still trying better integrate data parallelism with the dependence graph model Also developing debugger Normally debugging parallel programs very difficult particularly distributed ones because you have race conditions and you can wrap your hands around the problems There are really good debuggers for parallel systems although some strong academic work has been done for example Bart Miller the University Wisconsin debug CODE play back the execution animating the graph can this because cleanly separated the notion computation from notions communication and interaction HPCwire you feel this type model will have fundamental impact parallel programming BROWNE think that over the next years people learn change everybody has graphical workstation front them the whole idea raising the level abstraction which people program will take effect truly believe there will change the practice programming And going higher levels abstraction there will more change the next years than there has been the years since wrote first program free alpha release CODE now available For more information see Web site http www utexas edu users code Copyright HPCwire Redistribution this article forbidden law without the expressed written consent the publisher For free trial subscription HPCwire send mail trial hpcwire tgc com emery utexas edu Last modified Tue Oct CDT Date Tue Jan GMT Server Apache Content type text html Content length Last modified Mon Jan GMT Graduate Students UCSB Graduate StudentsGet the list This alphabetical list last name The user names are ucsb edu unless they say otherwise you want your home page added this list please read Creating your own home page and link your page the list Direct questions mionescu ucsb edu Albert Alexandrov bertoMustafa Cemil Azizoglu azizogluDaniel Andresen dandreseMarjan Badiei marjanXun Cheng xunDouglas Chang dchangBogdan Cocosel bcocoselPamela Dake dakeGregory Davis gdavisAlex DeCastro alexKunal Desai kunalSylvia Dieckmann sylviePedro Diniz pedroRon Dolin radMaximillan Domeika domeikaKarel Driesen karelJames Duliakas jamesdAndrew Duncan aduncanJ Mitchell Ferguson fergusonDavid Flynt defCharles Forest forestCong cfuSteve Geffner sgeffnerDavid Giannini dgGary Gregg 