MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Monday Apr GMT Francis Chu Humor Page History the World Physics Warning Labels WARNING Read your own risk capital Punishment Twas the Night Before Beta Smiley Dictionary Mathematician Windows Microsoft The Next Generation Microsoft buys CUCS fcc cornell edu MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Lisp DemoDemonstration Interactive Graphics from Lisp This demo the Interface for Gnu Common Lisp which available free software under the Gnu General Public License from ftp utexas edu When the demo started window created and some things are drawn menu options presented select option and then click the mouse one more times inside the graphics window The code fairly simple Instructions You must logged host running windows Type xhost www utexas edu exactly shown left window that host allow this server write your display Enter your display name here needed you may need change what shown the box your display name For example myterminal utexas edu Click start the demo Gordon Novak MIME Version Server CERN Date Wednesday Jan GMT Content Type text html Content Length Last Modified Friday Dec GMT Natalya Lagunova LISP lab pageFall COM LISP lab the LISP lab over Happy vacations Homeworks Homework Homework Homework Homework Due one week Homework Text Input data for Sample outputs for Alternative output for got from one students Homework Exams Here the statistics for the Final Exam The average grade There are and Take look the solutions Final Handouts Algorithms for converting lists boxes and back Method recursion LISP examples Now includes the examples recursion with MAPCAR and APPLY SUBST ALL and COUNT ATOMS Tail recursion looping SETQ LET More about DEFVAR optional Read this you want solve extra credit problem and also you plan take PPL shortly Functions arguments and results Powerful functions and databases Structures Help General Help LISP Help Emacs Help Unix Help debugging ACL Useful Links Common LISP the Language Guy Steele Date Mon Nov GMT Server NCSA Content type text html Last modified Tue Jan GMT Content length Project Suggestions Spring Project Suggestions Spring Here are list suggested topics for your project You are also welcome come with your own project you can see most the projects listed here are open ended research questions and will definitely discover some interesting stuff the end the projects will just excited about them you will For most the projects you need read some additional papers will list the papers here have online copies otherwise will give out the references and you can either find them library ask for copies File Systems Cache Management the disk performance continues lag behind microprocessor performance file system increasingly becoming performance bottleneck many systems The file system performance often determined how effectively the file cache used Unfortunately most operating systems today still use the LRU its approximation two hand clock caching strategy decide which file data are kept cache and which are not LRU algorithm unfortunately not always perform well due the following problems flushing one time scan large file can wipe out the entire content the file cache the file larger than the cache loops sometimes group files are always accessed the same order the files are bigger than the cache LRU would not perform well Research this topic consists three projects Trace Driven Simulation Study Write trace driven simulator which takes the SPRITE file system traces and the DEC SRC Epoch file system traces input and study the hit ratio the file cache under different replacement policies LRU replacement baseline algorithm LBN replacement for each file replace the block with the largest logical block number first sequence detection the trace detect the situations when file almost always read immediately before file which case file blocks should replaced before file blocks LRU replacement deciding about replacement blocks consider the times the last two references the file instead just the last reference like done LRU this algorithm suggested database researchers but might have good application file cache management well any other policy you might discover along the way Papers you might want read for this project ftp ftp princeton edu reports get inproceedings dewitt buffer policy evaluation author Hong Tai Chou and David DeWitt title Evaluation Buffer Management Strategies for Relational tabase Systems booktitle Proceedings the Eleventh International Conference Ver Large Databases year month Aug pages inproceedings lru author Elizabeth Neil and Patrick Neil and Gerhard Weikum title The LRU Page Replacement Algorithm For Database Disk Buffer ing booktitle SIGMOD year month May pages File System Trace Replay have good file caching algorithm how could prove that performs better than existing ones Sometimes can use benchmark programs but they are often too small capture the long term effects file caching Traces the other hand seems only good for simulations unless can replay real system The project investigates how emulate trace events actual file system and how simulate different caching policies for these traces writing special device driver that implements its own buffer cache The result would comparison the different buffer caching policies terms elapsed time real systems instead file cache hit ratios Papers you might want read for this project http www eecs harvard edu keith papers realloc Better File Caching Solaris While the above two projects are above kernel level this one digs down and tries find out what needs done change Solaris file caching policy fact you may need change the paging algorithm well Pick any the policies listed above policies that you come with and implement them the Solaris kernel Then measure their performance using some benchmark programs Papers you might want read for this project ftp ftp princeton edu pub people OSDI get paper Virtual Memory Page Replacement Algorithms For the past few years DRAM price has not dropped much result DRAM still fairly expensive and people spend half the cost computer its memory the other hand operating systems have not managed the memory very well Although most operating systems provide virtual memory many applications cannot run machines with relatively small memory because the paging performance too poor Research this topic tries find out why the demand paging performance poor for many large memory applications and what techinques can applied improve the situation There are three projects Memory Intensive Applications Instrument the Solaris kernel collect information related system page fault information pid memory address time etc cost page faults how long the disk operation take cleaning dirty pages how often done cost the disk writes and other information Then collect set applications that you think important and usually require too much memory run your workstation run them anyway and collect their paging information From these traces figure out exactly what were the cause paging thrashing there simply not enough memory definition not enough the memory less than the working set the application Does the system prefetching policy hurt rather than help the performance what about the writeback policy two hand clock policy particularly bad page replacement policy for this application You might want feed the page fault traces cache simulator for this purpose Multi User Workload Similar the above study but use multi user workload instead single application SPEC server benchmarks desktop bench are examples multi user workload Again the system performs poorly find out why and what can improve the situation particular pay attention the interaction virtual memory system and file buffer management when they compete for memory resource Would have been better Solaris used fixed partition memory among the and file cache Also see the messages from the project leader Solaris system Memory Intensive Applications Finally you are really into kernel hacking here another oppurtunity Messages from the project leader Solaris SUN madvise usage Solaris implements the madvise system calls but not many applications use them Project take utilities tar grep etc and modify them use madvise and see they have performance differences Project can also see the implementation madvise seg can improved new madvise calls are needed Paging algorithm Solaris uses the global clock algorithm there better one Are the thresholds used for paging better tuned What the interaction between swapping and paging Are the thresholds which each kicks appropriate there better implemenation Page coloring for various CPU cache types There are types CPU caches PIPT VIPT PIVT VIVT And with two levels caches there can even more combinations our physical freelist page management try page coloring various ways improve cache utilizations well reduce cache flushes Pick various processors machines and see there are better page coloring algorithms While the above two projects try study these questions from trace analysis this project you will actually change the kernel and experiment with all these issues Papers you might want read for these projects inproceedings anderson oopsla author Keith Krueger and David Loftesness and Amin Vahdat and Tom And erson title Tools for the Development Application Specific Virtual Memor Management booktitle OOPSLA year month Oct pages inproceedings harty appcontrol author Kieran Harty and David Cheriton title Application Controlled Physical Memory using External Page Cache Management booktitle The Fifth International Conference Architectural Support for Programming Languages and Operating Systems year month Oct pages WWW Regional Cache Management the Web grows and expands the traffic network backbones are quickly approaching the capacity limit the network One attractive method for reducing network traffic through regional caching department wise campus wisc shared information resource The project seeks build such regional information cache need cache management layer which keep track all documents cached member machines Then need modify the client browser intercept URL requests and make the request through the cache management layer first The cache management layer can return the document request from another workstation knows that the document cached its region Otherwise the request forward the real server The cache actually does not sit one machine rather the collection cached documents member machines the region The cache management maintains directory documents cached this region and authenticates the cached copy the document keeping its fingerprints addition the cache manager needs coordinate with servers maintain the consistency cached documents keeping them date Investigate through implementation the tradeoff various cache management policies and consistency protocols Papers you might want read for these projects http excalibur usc edu http www das harvard edu users faculty Margo Seltzer papers hotos http www eecs harvard edu vino web usenix Databases COW Can clusters workstations clusters SMP support database systems effectively and scalable fashion This project small step investigating this big question The goal take the house database storage manager shore and port onto the node COW cluster The project involves making shore true SMP program and then applying the fine grained software DSM technique its binary and running node COW cluster Kernel Documentation Debugging and Binary Instrumentation Again there are few projects this area Kernel Documentation Again messages from Solaris project leader Documentation For some folks might good project just look the code and document how works For example the system the hat layer the scheduler the system even portions This not easy Fork Fork typically very heavy weight operation Why Can this speeded Kernel Reliability Kernel reliability Another project would look for panics the system and see they can handled gracefully Note that many panics are there because they are invariant the system ASSERT are more interested those that are truly errors that should handle One the interesting one kmem alloc NOSLEEP The caller supposed able handle return NULL there free memory the system many cases the caller just panics good test would have kmem alloc return random failures kmem alloc NOSLEEP and see the system still works how can fixed How the file systems behave some random disk error occurs Binary Instrumentation Investigate whether binary rewriting techniques EEL can applied successfully kernel There are probably number routines that shouldn instrumented EEL find them out usually instrumenting them and then crashing the machine Parallel Systems and Applications How would one build parallel system Partly that depends application needs Collect parallel applications that require large data sets and charaterize their demands Port the applications message passing architecture and observe their performance with parallel file system prototype 