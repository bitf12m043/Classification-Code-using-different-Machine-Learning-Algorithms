MIME Version Server CERN Date Sunday Dec GMT Content Type text html Content Length Last Modified Saturday Jul GMT Koichi KamijoKoichi Kamijo now Japan Temporarily address Kotesashi cho Tokorozawa shi Saitama ken Japan Tel Office LAB Koichi Kamijo IBM Japan Yamato lab Shimotsuruma Yamato shi Kanagawa ken Japan Tel direct Fax Mail kkamijoh vnet ibm com Japanese also Note resume working some day between and Until then telephone may not activated and access time mail would most once week English Japanese MIME Version Server CERN Date Tuesday Jan GMT Content Type text html Content Length Last Modified Thursday Oct GMT Group Alumni and Recent VisitorsQR Group Alumni and Recent Visitors Alumni Dan Berleant djb engr uark edu PhD thesis Yung Tai Byun byun hongik James Crawford com PhD thesis Contents David Dalle Molle dtdallemolle amoco com Dan Dvorak dvorak aig jpl nasa gov PhD thesis Adam Farquhar Adam Farquhar ksl stanford edu PhD thesis David Franke franke Trilogy com PhD thesis Richard Froom froom utexas edu PhD thesis Abstract John Hartman hartman cis ohio state edu PhD thesis Akira Hayashi akira hiroshima PhD thesis Wan Yik Lee wylee utexas edu PhD thesis Abstract Wood Wai Lee woodlee slb com David Pierce dmpierce utexas edu PhD thesis Abstract Raman Rajagopalan Raman Rajagopalan ccm intel com PhD thesis Abstract David Throop throop hsvaic boeing com PhD thesis Dissertation abstracts Recent Visitors Giorgio Brajnik Catherine Catino Pierre Fouche Evi Gazi gazi cheme seas upenn edu Lyle Ungar ungar cis upenn edu Jack Vinson vinson cis upenn edu Takashi Watanabe watanabe human nagoya BJK Date Tue Jan GMT Server NCSA Content type text html CLA Intro Homework CLA Intro Heddaya Fall Homework due Tue Unless otherwise noted please submit listing each program you write for this homework and one script that shows that all your programs compile properly and run intended Problems labelled Extra credit Honors are required only honors students and are optional for everyone else usual homeworks are due the beginning class The following program writes large letter the screen include stdio define HEIGHT main int printf nIIIIIII while Type compile and run this program Describe sentence two your own words what the program does Write similar program that prints large letter the screen Extra credit Honors Write program that prints the letter that lines high using few printf statements you can page problem this problem you need only submit hand written list the compilation errors generated result each the six modifications page problem Extra credit Honors page problem Abdelsalam Heddaya Created Updated Date Tue Nov GMT Server NCSA Content type text html Last modified Wed Aug GMT Content length Lecture notes Chapter Chapter all about computers aren useful unless can put data into them and get results out input data computer output data from computer computer model CPU memory examples input devices keyboard mouse network disk examples output devices printer terminal display network simulator has only devices keyboard for input display for output ISSUES THAT MUST SOLVED programmer interface simulator has get getc put putc puts these are actually implemented procedures The the program that interfaces between the programmer application user and the actual hardware For the snakes UNIX protection issues real system there could more than one terminal terminal keyboard and display together Should one user able display characters another display Lock another keyboard Send file infinite length the printer effectively shutting all others out practice the job resource management allocating all portions the processor Examples resources are the CPU and all devices physical issues computer today can complete instruction the rate about each nsec MHz MIPS Unfortunately typical devices are much slower often requiring milliseconds deal with single character That approx million times slower This situation dubbed the access gap disk real live phisical device Vocabulary form picture disk PLATTER sort like phonograph record data stored SURFACE platter all platters are tied together and rotate around the SPINDLE fixed speed each surface has one more READ WRITE HEADS Platters are broken down into TRACKS single track one many concentric circles the platter All the corresponding tracks all surfaces taken together form CYLINDER Each track broken down into SECTORS How read write sector Given the sector position the cylinder looked table calculated from the disk address the disk spinning the read write head moving the correct cylinder track THIS TAKES LONG TIME RELATIVE THE OTHER STUFF the physical movement acceleration etc comes into play This SEEK time once the read write head over the correct cylinder there bound some time wait until the correct sector under the head This ROTATIONAL LATENCY Even the correct sector still takes some time for the data read written This the READ WRITE time time read sector seek time rotate time read time the nitty gritty issue how does the accomplish requests There are possibilities have special instructions input need know which device how much data where the data output need know which device how much data where the data currently How does the CPU know that the instruction has completed there any need wait What happens the device encounters error Does this halt the computer the solution choice overload memory locations use communication channels for example address real memory xffff xffff data from keyboard Keyboard Data xffff data display Display Data then reading loading from location xffff data requested from the keyboard then writing storing location xffff data sent the display the syscall code the must essence Keyboard Data getc syscall return from syscall and Display Data putc syscall return from syscall This method called MEMORY MAPPED Problems with memory mapped currently given getc presumably returns once character has been typed What happens the user does not type character Types the wrong keyboard Goes get drink water What happens the data the user types characters before getc has been called How does the computer know character has been typed putc and puts how does the computer know that the device ready print out second character What the printer jams printers and terminals are SLOW What needed way convey information about the STATUS devices This status information used coordinate and SYNCHRONIZE the useage devices address real memory xffff xffff data from keyboard Keyboard Data xffff STATUS from keyboard Keyboard Status xffff data display Display Data xffff STATUS from display Display Status assume that the MSB used tell the status device MSB means device ready MSB means device busy note that can check for device ready busy looking see the Status word negative comp not for the keyboard means that character has been typed means that character available for the display means that new character may sent means that the device still disposing previous character Then the syscall code the must more like getc loop Keyboard Status getc syscall bgez getc loop Keyboard Data return from syscall and putc loop Display Status putc syscall bgez putc loop Display Data return from syscall This scheme known BUSY WAITING SPIN WAITING The little loop called SPIN WAIT LOOP Something that not well explained this level how these status bits get set and cleared The spin wait loop reads the status word but does not change The device its CONTROLLER sets and clears the bit implied fuction that the device sets the bit when becomes ready work another character AND load from Keyboard Data also clears the MSB Keyboard Status AND store Display Data also clears the MSB Display Status PROBLEMS with this programmed approach much time wasted spin waiting takes instructions program this and each instruction takes execute then takes nsec nsec usec execute this code device takes msec usec deal with one character then the percent time spent waiting time waiting total time usec like solution that spent less time doing nothing somehow second key pressed before the program does getc the first key pressed lost There only one character worth storage This problem actually Catch The getc code has run often enough that characters are lost but executing this code spin waits until character pressed The system could nothing but getc calls Some problems are solved the use queues buffers The check for device ready separated from the sending and receiving characters Code for this the text pages and putnextchar print character there one the queue and the device ready printstring put character queue and return getnextchar get character one available and put queue getstring get character from queue available and return Some difficulties are caused this situation Someone user must call getnextchar regularly and often not lose characters What happens the queue become full Are characters lost Someone user must call putnextchar regularly empty out the queue 