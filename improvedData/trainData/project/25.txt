Date Tue Nov GMT Server NCSA Last modified Fri Aug GMT Content type text html Content length The Massively Scalar Compiler GroupRice UniversityHouston Texas USAThe Massively Scalar Compiler Group Rice UniversityPurpose The Massively Scalar Compiler Project designing and building laboratory compiler explore new compiler based code improvement techniques for microprocessor based systems Our focus uniprocessor systems Mission The goals the Massively Scalar Compiler Project are develop new techniques code optimization and code generation that represent real improvements over existing methods transfer this knowledge industrial compiler groups way that enables them quickly evaluate and deploy new methods and implement and distribute laboratory compiler that can serve testbed for evaluating new techniques code optimization and code generation view industrial compiler groups our primary customers with academic researchers our second priority Our primary focus problems that arise for uniprocessor microprocessor based systems try ensure that our techniques work equally well multiprocessor systems This work supported both ARPA and the State Texas Problems that attack general investigate problems that arise compiling code for uniprocessor microprocessor based systems Our particular areas interest are code improvement techniques often misnamed optimization and code generation issues common misconception that these problems were all solved Methodology group have strong belief the development new algorithms coupled with experimental evaluation view research and development two halves whole effort Each our research activities directly coupled development activity our intent build reference implementation for each new technique that proves its worth these are written nuweb literate programming tool The implementation intended serve reference guide for reimplementation commercial setting For the truly interested longer discussion available Personnel The group scaling massive object The Massively Scalar Compiler Project led four researchers Keith CooperKen KennedyTaylor SimpsonLinda Torczon The prime reason that these people are productive because they have supporting cast staff and graduate students Software One the prime work products the project software phase the compiler achieves semblance stability and maturity place into the pool released software The code available nuweb form via anonymous ftp The compiler uses low level intermediate language named ILOC have gathered together one place the complete ILOC archives including unpublished papers and newsletters hope that someone learns from our experience Accomplishments This project produces several kinds results The first course students Preston Briggs Tera Computers and Cliff Click Hewlett Packard are both recent graduates publish papers our work several different venues write software and make available via the web For more information have brief summary results available online More information Our most recent annual report can found the ARPA archives Overhead transparencies and poster materials from the Spring ARPA meeting are also archived online This page has been accessed times since started counting September Date Thu Nov GMT Server NCSA Content type text html Last modified Mon Aug GMT Content length Wisconsin Wind Tunnel Project Home Page Wisconsin Wind Tunnel Project Most future massively parallel computers will built from workstation like nodes and programmed high level parallel languages like HPF that support shared address space which processes uniformly reference data The Wisconsin Wind Tunnel WWT Project seeks develop consensus about the middle level interface below languages and compilers and above system software and hardware Our first proposed interface was Cooperative Shared Memory which evolutionary extension conventional shared memory software and hardware Recently have been working more revolutionary interface called Tempest Tempest provides the mechanisms that allow programmers compilers and program libraries implement and use message passing transparent shared memory and hybrid combinations the two are developing implementations Tempest Thinking Machines cluster workstations Wisconsin COW and hypothetical hardware platform One approach COW uses bus snooping logic implemented with FPGAs and SRAM are collaborating with the Wisconsin Paradyn Project adapt their performance tools Tempest Overview and Annotated Bibliography Slides from Overview Talk November with one slide per page four slides per page Complete Technical Papers Contributors Funding Sources Origin Project Name Wisconsin Week Article WWT Paradyn Related Projects Wisconsin Computer Architecture Group Computer Sciences Department the University Wisconsin World Wide Computer Architecture Information Last Updated July Mark Hill markhill wisc edu 