MIME Version Server CERN Date Wednesday Nov GMT Content Type text html Content Length Last Modified Wednesday Jan GMT HORUS DISTRIBUTED COMPUTING ENVIRONMENTHORUS DISTRIBUTED COMPUTING ENVIRONMENT Kenneth Birman ken cornell edu Robbert van Renesse rvr cornell edu Cornell Horus effort has developed programming environment for reliable distributed computing During the last year Horus was used demonstrate groupware and fault tolerance over high performance networks and was found offer higher performance than other similar systems Novel features Horus are its flexible software architecture which applications pay only for features that they use and support for virtually synchronous process groups technology that developed our prior work the Isis Toolkit which has become significant commercial success Horus also offers fault tolerant security and privacy technology which view important research advance During will extending Horus provide extremely low latency high performance real time capabilities Our approach combines elements communication technology called Active Messages with multi media playback system called Continuous Media the end the year expect demonstrate high speed interactive applications with remote multimedia servers such might used remote telemedicine applications video demand systems All this will retain the existing fault tolerance and security options Horus and its virtual synchrony programming model Prior work Isis has created substantial user base and expect rapid uptake Horus within this community matures Isis users span wide range industries including telecommunications systems financial trading systems stock market automation factory floor process control for discrete electronic component manufacture air traffic control and space based communications system management and control Applications Isis are being explored several branches the military well the NSA and other non military government branches Among the more visible military efforts the Naval Hiper project which exploring the use Isis new system that prototypes technologies for future enhancements the AEGIS battle radar system The more demanding applications this user base would benefit from access Horus and our initial plan make possible migrate Isis applications Horus with few changes thus benefiting this community direct way Technology transition has occured through licensing agreements with Isis Distributed Systems Inc subsidiary Stratus Computers However all our Cornell work also available researchers fee and described through detailed publications and programming manuals Looking the future hope that mixture Isis and Horus technologies will permit develop some the very demanding applications that will seen next generation groupware and planning systems The illustration below shows such application military mission control and planning system that integrates data from variety space air and ground resources and uses this coordinate actions various theatre assets Systems this sort will demand the utmost performance reliability and security while also tolerating failures and rapidly reconfiguring respond changing demands Success our project will thus impact wide range both civilian and military technology efforts Dept Computer Science Cornell University ken cornell edu MIME Version Server CERN Date Monday Jan GMT Content Type text html Content Length Last Modified Thursday Dec GMT UTCS Natural Language Acquistion GroupNatural Language Acquisition Group the Department Computer Sciences the University Texas Austin Date Thu Nov GMT Server NCSA Content type text html Last modified Fri Nov GMT Content length VIS Data Visualization based Lattices VIS Data Visualization based Lattices Bill Hibbard Brian Paul Chuck Dyer are defining foundation for data visualization based the idea that visualization process function from set data objects called data model set displays called display model prototype system called VIS has been implemented based upon our ideas are guided the following principles Scientists develop mathematical models nature and data objects represent the objects mathematical models Mathematical objects frequently contain infinite precision real numbers and functions with infinite domains whereas computer data objects contain finite amounts information and are thus approximations the mathematical objects they represent Computer displays contain finite amounts information they contain finite numbers pixels their colors are chosen from finite palettes animation sequences contain finite numbers frames etc and are thus approximations ideal displays Because the close relationship between data and computation data model should appropriate for the data objects computational model such programming language The purpose data visualization communicate the information content data objects particular define expressiveness conditions the mapping from data objects displays such that displays should encode the facts about data objects and only those facts visualization system should complete the sense that implements any function from data objects displays satisfying the expressivenss conditions can define order relation between data objects based how precisely they approximate mathematical objects and can define order relation between displays based how precisely they approximate ideal displays based voxel resolution etc These order relations define lattices data objects and displays Therefore can model the visualization process function from lattice data objects lattice displays can interpret the expressiveness conditions this context and show that satisfies the expressiveness conditions and only lattice isomorphism can define particular lattice appropriate for scientific data objects These data objects are built from primitive variables that call scalars time latitude radiance and temperature tuple and array data type constructors array time temperature data type appropriate for time series temperatures Thus the lattice contains the data objects scientific programming language can also define particular lattice displays which display set voxels Each voxel specified set graphics primitives that call display scalars pixel location and size volume its color and its place animation sequence can show that functions satisfying the expressiveness conditions are just the class functions defined mappings from the scalars used for primitive variables data objects the display scalars that specify graphics primitives voxels course designers scientific displays already assume that primitive variables are mapped graphics primitives For example given data object type array time temperature natural display graph with time along one axis and temperature along another The remarkable thing that not have take this way designing displays assumption but that consequence the more fundamental expressiveness conditions are developing and implementing system called VIS that allows scientists experiment with algorithms steer their computations and visualize the data objects they create their programs The lattice defines the data objects the VIS programming language the system implements the lattice displays and data can displayed using any function that satisfies the expressiveness conditions however the implementation not quite precise Just data flow systems define user interface for controlling data display based abstraction the rendering pipeline the VIS system defines user interface for controlling data display based the abstraction mappings from scalars display scalars possible define data lattices for the recursively defined data types complex linked types such trees used general purpose programming languages and for the abstract data types and object classes object oriented programming languages Lattices provide rigorous foundation for visualization particular they can help develop analytical alternative the usual approach defining visualization process constructively writing special purpose program for computing display for specific data object 