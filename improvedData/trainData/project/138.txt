Date Wed Nov GMT Server Apache Content type text html Content length Last modified Thu May GMT Storage ManagementStorage ManagementDescription Heap memory usually requires overhead for storage management traditionally garbage collection have built reference counting memory RCM installed banks smart memories without incurring processor cycles for heap management even multiprocessor would support languages that depend heap Lisp Scheme Prolog Haskell local use Scheme and prototype Applicative File System has been built over RCM which provides essential files services persistency and bulk within purely applicative environment Other work targeted reusing nodes place Applicative style often asks copy structure with changes when fact analogous structure abandoned the copy occurs want recycle these uniquely referenced nodes either run time better compile time noticing the unique referencing have developed generational storage management system incorporated into Chez Scheme that employs segmented memory model and hybrid tagging system The hybrid tagging system uses typed pointers and typed objects for object level typing and big bag pages BiBOP for meta level typing The system allows allocation performed line from single register based allocation pointer results virtually tagging overhead allows the Scheme heap coexist gracefully with other languages run time systems increases data locality supports weak pairs and finalization and supports large objects efficiently The system used for ongoing research storage management Associated Faculty David Wise dswise Kent Dybvig dyb Associated Graduate Students Brian Heck heckb Diana Meadows meadows Joshua Walgenbach jwalgenb Return Computer Science Research 