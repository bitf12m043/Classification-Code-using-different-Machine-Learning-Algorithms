Date Wednesday Nov GMT Server NCSA MIME version Content type text html Last modified Friday Oct GMT Content length High Performance SynchronizationNSF grant CCR High Performance Synchronization for Shared Memory Parallel Programs Computer Science Department University Rochester Rochester through With increases the size and availability parallel processors with shared memory programming models high performance synchronization becoming increasingly important Several groups including ours have demonstrated recent years that software synchronization algorithms can scale well very large numbers processors and that they can avoid certain negative interactions with high performance scheduling algorithms are continuing this research several directions including mechanisms for cooperative synchronization and scheduling which minimize unnecessary spinning maximize processor locality and avoid contention for both lock and non lock data comparative evaluation alternative mechanisms for atomic update shared data structures including locks non blocking synchronization and function shipping implementation atomic hardware primitives scalable architectures evaluation the interaction synchronization with coherence and new synchronization algorithms Principal InvestigatorMichael Scott Associate Professor and Department Chairscott rochester edu Recent Graduates Leonidas Kontothanassis Bob WisniewskiGraduate Students Maged Michael Galen Hunt Srinivasan ParthasarathyPublicationsProject specific papers Systems Technical Report ArchivePseudocode Scalable spinlocks and barriers Includes test and set and ticket locks queue locks and centralized tree based and fft style butterfly barriers From the TOCS paper Scalable busy wait reader writer locks Includes reader preference writer preference and fair locks From the PPoPP paper Scalable adaptive combining tree barriers Combine local only spinning logarithmic critical paths amortization overhead for skewed arrival and fuzziness From the IJPP paper Variations Lamport fast mutual exclusion lock Use atomic instructions other than read and write From submitted for publication Preemption safe and scheduler conscious synchronization algorithms Includes two queue based mutual exclusion locks test and set and ticket locks fair scalable queue based reader writer lock competitive and optimal time small scale barriers and scalable barrier All algorithms avoid busy waiting for action preempted processes including those waiting line for FIFO queue ticket lock Most employ widened kernel user interface Revised from appear ACM TOCS highly concurrent multi lock concurrent priority queue Uses bottom insertions and bit reversal choice among fringe nodes Fast concurrent queue algorithms believe these algorithms the best concurrent queues available for almost any application Executable CodeBasic and scalable spinlocks and barriers Code run the Sequent Symmetry BBN Butterfly and BBN Scalable busy wait reader writer locks Code run the BBN Scalable adaptive combining tree barriers Code run the BBN Butterfly BBN and Kendall Square KSR Variations Lamport fast mutual exclusion lock Code run the Silicon Graphics Iris Preemption safe and scheduler conscious synchronization algorithms Code run the Kendall Square KSR and Silicon Graphics Challenge highly concurrent multi lock concurrent priority queue Code run the SGI Challenge Fast concurrent queue algorithms Includes SGI Challenge code for our two lock and non blocking queues and for previous algorithms other researchers Last Change August scott rochester edu 