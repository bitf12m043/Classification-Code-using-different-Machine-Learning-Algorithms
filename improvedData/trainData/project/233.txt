Date Wed Nov GMT Server Apache SSL Content type text html Content length Last modified Tue Oct GMT Frameworks and Algorithms for the Analysis and Transformation Scientific Programs The Omega Project Frameworks and Algorithms for the Analysis and Transformation Scientific Programs Part the High Performance Software Systems Laboratory the Computer Science Department the Univ Maryland College Park Release Petit the Omega Library and Omega calculator William Pugh and the entire Omega Project Team Omega Project Technical Reports The Omega project has two major components One component the Omega test system for manipulating sets affine constraints over integer variables When started work the Omega test for dependence testing was designed decision test for the existence integer solutions affine constraints found that having the Omega test return symbolic answers rather than yes answers could perform standard data dependence analysis quicker have explored more difficult issues analysis and transformation scientific programs have extended the Omega test the point where complete system for simplifying and verifying Presburger formulas Presburger formulas contain affine constraints the usual logical connectives and and quantifiers course the Omega test cannot simplify all Presburger formulas efficiently there nondeterministic lower bound and deterministic upper bound the time required verify Presburger formulas However practice the Omega test reasonably efficient for the tasks for which currently use The other component research developing frameworks for analyzing and transforming programs have utilized the Omega test research asking more sophisticated questions than are usually asked when analyzing programs using this information pinpoint parallelism unexploited conventional techniques and developing unified framework for reordering transformations These methods are described using simple cases Presburger formulas The descriptions and implementations these techniques can simple and clear since they need not concerned with the techniques used the Omega test simplify the formulas general philosophy tried develop exact methods and frameworks that are efficient enough practical opposed developing inexact methods that may faster and accurate enough for practical use find that studying exact methods gives better insight into the problems study that easier extend exact methods make them faster than extend inexact methods make them more exact and that exact methods can more easily applied new problems research group has done only very limited studies the efficiency and effectiveness our methods real FORTRAN codes While these are important doing such studies well requires robust optimizing FORTRAN compiler which not have access and substantial effort Also applying our techniques real codes requires extensions still under development for procedure calls and arbitrary control flow number other research groups incorporate the Omega test into their software hope get feedback from them and pursue collaborative research Array Data Dependence Analysis Value based Dependence Analysis Static Analysis Upper and Lower Bounds Dependences and Parallelism The Omega Test Eliminate Existentially Quantified Variables Verify the Existence Solutions Remove Redundant Constraints Verify Implications Simplify Formulas Involving Negation Related Work Framework for Unifying Reordering Transformations Code generation Related work Implementation and Users Future Directions References About this document Next Array Data Dependence Where get Omega project software Omega project software available for anonymous FTP Version Petit the Omega Calculator and Library binaries and sources Array dataflow benchmark programs either FORTRAN tiny omega umd edu 