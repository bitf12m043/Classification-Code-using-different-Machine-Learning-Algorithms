Date Wed Nov GMT Server Apache Content type text html Content length Last modified Wed Sep GMT Formal Methods System Design and Verification University Utah Department Computer Science The Utah Verifier Project Formal Methods System Design and Verification The Cartoon Synopsis The process designing modern digital hardware systems multiprocessors quite challenging many ways especially terms correctness problems that must solved Projects this area last several years with large group sizes and constantly face changing requirements personnel turnover well newly unearthed and often unanticipated facts Applying today verification tools verify entire systems this nature requires inordinate amounts human effort well computer resources Under DARPA award the Utah Verifier project hopes address and solve some the problems making formal verification techniques apply problems industrial scale Our ideas are being developed the context real systems projects such Avalanche Specific activities date include efficient explicit enumeration methods based new partial order reduction methods and model checking non trivial industrial bus specifications Specific activities planned include creation the following suite verification tools explained below The System Block Diagram Protocol Verifier will accept descriptions extended subset the PROtocol ModEling LAnguage Promela with key extensions the area incorporating abstract data types and uninterpreted functions will employ efficient the fly explicit enumeration algorithms unique feature will its support for refining high level protocol descriptions that assume infinitely sized communication buffers those that use finite and shared buffers Cycle level Verifier will accept descriptions extended subset Verilog with key extensions the area incorporating abstract data types will perform implicit enumeration efficiently using recently developed graph representations logic functions such Multiway Decision Graphs Corella will also support many pragmatically motivated features including facility accept test vectors from for cross validating the and models Switch level Verifier will feature the use parametric forms Boolean expressions investigated for incorporating input constraints into symbolic simulation vectors The verification conditions established through symbolic simulation will derived from the very same descriptions provided the tool Design requirements Base will shared members the project group The core will based the PVS verification system from SRI The expressive power the PVS theory description language will permit design requirements captured high level abstraction and also permit future extensions exploit PVS full power will also permit the state transition relation and translated into PVS prove key system properties will also have facilities translate assertions its design requirements base into assertions verified the mainly for protocol and mainly for data layout and cycle level details tools ensure consistency between the models valuable aspect this organization that will permit regression verification runs after design changes The tool will have hypertext based API allowing designers pursue links various pieces the specification Benchmark Examples Benchmark examples cutting across several hierarchical levels abstraction will released key verification benchmark suite delivered will distributed shared memory cache protocol and its refinement through hardware realization using industrial bus and routing network the refinement the bus transactions the refinement the bus arbitration schemes and flow control all the way down the bus interface logic Further Details Prospective graduate students and post doctoral fellows are encouraged contact ganesh utah edu See http www utah edu ganesh for further details FacultyGanesh GopalakrishnanAlan DavisStudentsRatan NalumasuRavi Hosabettu 